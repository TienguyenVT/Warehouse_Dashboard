{"ast":null,"code":"'use strict';\n\nconst tls = require('tls');\nconst net = require('net');\nconst debug = require('debug')('mqttjs:tls');\nfunction buildBuilder(mqttClient, opts) {\n  opts.port = opts.port || 8883;\n  opts.host = opts.hostname || opts.host || 'localhost';\n  if (net.isIP(opts.host) === 0) {\n    opts.servername = opts.host;\n  }\n  opts.rejectUnauthorized = opts.rejectUnauthorized !== false;\n  delete opts.path;\n  debug('port %d host %s rejectUnauthorized %b', opts.port, opts.host, opts.rejectUnauthorized);\n  const connection = tls.connect(opts);\n  /* eslint no-use-before-define: [2, \"nofunc\"] */\n  connection.on('secureConnect', function () {\n    if (opts.rejectUnauthorized && !connection.authorized) {\n      connection.emit('error', new Error('TLS not authorized'));\n    } else {\n      connection.removeListener('error', handleTLSerrors);\n    }\n  });\n  function handleTLSerrors(err) {\n    // How can I get verify this error is a tls error?\n    if (opts.rejectUnauthorized) {\n      mqttClient.emit('error', err);\n    }\n\n    // close this connection to match the behaviour of net\n    // otherwise all we get is an error from the connection\n    // and close event doesn't fire. This is a work around\n    // to enable the reconnect code to work the same as with\n    // net.createConnection\n    connection.end();\n  }\n  connection.on('error', handleTLSerrors);\n  return connection;\n}\nmodule.exports = buildBuilder;","map":{"version":3,"names":["tls","require","net","debug","buildBuilder","mqttClient","opts","port","host","hostname","isIP","servername","rejectUnauthorized","path","connection","connect","on","authorized","emit","Error","removeListener","handleTLSerrors","err","end","module","exports"],"sources":["C:/Documents/warehouse-dashboard/node_modules/mqtt/lib/connect/tls.js"],"sourcesContent":["'use strict'\r\nconst tls = require('tls')\r\nconst net = require('net')\r\nconst debug = require('debug')('mqttjs:tls')\r\n\r\nfunction buildBuilder (mqttClient, opts) {\r\n  opts.port = opts.port || 8883\r\n  opts.host = opts.hostname || opts.host || 'localhost'\r\n\r\n  if (net.isIP(opts.host) === 0) {\r\n    opts.servername = opts.host\r\n  }\r\n\r\n  opts.rejectUnauthorized = opts.rejectUnauthorized !== false\r\n\r\n  delete opts.path\r\n\r\n  debug('port %d host %s rejectUnauthorized %b', opts.port, opts.host, opts.rejectUnauthorized)\r\n\r\n  const connection = tls.connect(opts)\r\n  /* eslint no-use-before-define: [2, \"nofunc\"] */\r\n  connection.on('secureConnect', function () {\r\n    if (opts.rejectUnauthorized && !connection.authorized) {\r\n      connection.emit('error', new Error('TLS not authorized'))\r\n    } else {\r\n      connection.removeListener('error', handleTLSerrors)\r\n    }\r\n  })\r\n\r\n  function handleTLSerrors (err) {\r\n    // How can I get verify this error is a tls error?\r\n    if (opts.rejectUnauthorized) {\r\n      mqttClient.emit('error', err)\r\n    }\r\n\r\n    // close this connection to match the behaviour of net\r\n    // otherwise all we get is an error from the connection\r\n    // and close event doesn't fire. This is a work around\r\n    // to enable the reconnect code to work the same as with\r\n    // net.createConnection\r\n    connection.end()\r\n  }\r\n\r\n  connection.on('error', handleTLSerrors)\r\n  return connection\r\n}\r\n\r\nmodule.exports = buildBuilder\r\n"],"mappings":"AAAA,YAAY;;AACZ,MAAMA,GAAG,GAAGC,OAAO,CAAC,KAAK,CAAC;AAC1B,MAAMC,GAAG,GAAGD,OAAO,CAAC,KAAK,CAAC;AAC1B,MAAME,KAAK,GAAGF,OAAO,CAAC,OAAO,CAAC,CAAC,YAAY,CAAC;AAE5C,SAASG,YAAYA,CAAEC,UAAU,EAAEC,IAAI,EAAE;EACvCA,IAAI,CAACC,IAAI,GAAGD,IAAI,CAACC,IAAI,IAAI,IAAI;EAC7BD,IAAI,CAACE,IAAI,GAAGF,IAAI,CAACG,QAAQ,IAAIH,IAAI,CAACE,IAAI,IAAI,WAAW;EAErD,IAAIN,GAAG,CAACQ,IAAI,CAACJ,IAAI,CAACE,IAAI,CAAC,KAAK,CAAC,EAAE;IAC7BF,IAAI,CAACK,UAAU,GAAGL,IAAI,CAACE,IAAI;EAC7B;EAEAF,IAAI,CAACM,kBAAkB,GAAGN,IAAI,CAACM,kBAAkB,KAAK,KAAK;EAE3D,OAAON,IAAI,CAACO,IAAI;EAEhBV,KAAK,CAAC,uCAAuC,EAAEG,IAAI,CAACC,IAAI,EAAED,IAAI,CAACE,IAAI,EAAEF,IAAI,CAACM,kBAAkB,CAAC;EAE7F,MAAME,UAAU,GAAGd,GAAG,CAACe,OAAO,CAACT,IAAI,CAAC;EACpC;EACAQ,UAAU,CAACE,EAAE,CAAC,eAAe,EAAE,YAAY;IACzC,IAAIV,IAAI,CAACM,kBAAkB,IAAI,CAACE,UAAU,CAACG,UAAU,EAAE;MACrDH,UAAU,CAACI,IAAI,CAAC,OAAO,EAAE,IAAIC,KAAK,CAAC,oBAAoB,CAAC,CAAC;IAC3D,CAAC,MAAM;MACLL,UAAU,CAACM,cAAc,CAAC,OAAO,EAAEC,eAAe,CAAC;IACrD;EACF,CAAC,CAAC;EAEF,SAASA,eAAeA,CAAEC,GAAG,EAAE;IAC7B;IACA,IAAIhB,IAAI,CAACM,kBAAkB,EAAE;MAC3BP,UAAU,CAACa,IAAI,CAAC,OAAO,EAAEI,GAAG,CAAC;IAC/B;;IAEA;IACA;IACA;IACA;IACA;IACAR,UAAU,CAACS,GAAG,CAAC,CAAC;EAClB;EAEAT,UAAU,CAACE,EAAE,CAAC,OAAO,EAAEK,eAAe,CAAC;EACvC,OAAOP,UAAU;AACnB;AAEAU,MAAM,CAACC,OAAO,GAAGrB,YAAY","ignoreList":[]},"metadata":{},"sourceType":"script"}