{"ast":null,"code":"// File: ShelfGrid.js\n// Mô tả: Component React hiển thị lưới các kệ hàng trong dashboard quản lý kho.\n// Chức năng: Hiển thị danh sách kệ hàng theo tầng và khay, cho phép chọn từng kệ để xem chi tiết.\nimport React,{useState,useEffect,useRef}from'react';import'./ShelfGrid.css';import ShelfItem from'./ShelfItem';import ShelfDetail from'../ShelfDetail/ShelfDetail';import StatusBar from'../StatusBar/StatusBar';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ShelfGrid=_ref=>{let{shelves,onShelfClick}=_ref;const NUM_SHELVES=4;// Số lượng kệ đồ\nconst NUM_TIERS_PER_SHELF=4;// Số tầng mỗi kệ\nconst NUM_TRAYS_PER_TIER=6;// Số ô mỗi tầng\nconst isMounted=useRef(true);const[selectedShelf,setSelectedShelf]=useState(null);const[stats,setStats]=useState({high:0,medium:0,empty:0});const[lastUpdated,setLastUpdated]=useState(new Date().toISOString());const[shelvesData,setShelvesData]=useState([]);const[filters]=useState({tier:'all',status:'all'});// Kiểm tra xem có bất kỳ bộ lọc nào đang hoạt động không\nconst hasActiveFilters=filters.status!=='all'||filters.tier!=='all';// Hàm tính toán trạng thái dựa trên số lượng vật phẩm và sức chứa\nconst calculateStatus=(itemCount,capacity)=>{const percentage=itemCount/capacity*100;let status;if(percentage>=70)status='HIGH';else if(percentage>=30)status='MEDIUM';else status='EMPTY';return status;};// Cleanup khi component unmount\nuseEffect(()=>{return()=>{isMounted.current=false;};},[]);// Khởi tạo dữ liệu ban đầu và thiết lập interval cập nhật\nuseEffect(()=>{// Tạo dữ liệu mẫu ban đầu\nconst initialData=Array.from({length:NUM_SHELVES},(_,shelfIndex)=>{const tiers=Array.from({length:NUM_TIERS_PER_SHELF/2},(_,groupIndex)=>{const groupedTiers=[{tier:groupIndex*2+1,trays:Array.from({length:NUM_TRAYS_PER_TIER},(_,trayIndex)=>{const capacity=100;const itemCount=Math.floor(Math.random()*(capacity+1));return{tray:trayIndex+1,status:calculateStatus(itemCount,capacity),capacity,itemCount,lastUpdated:new Date().toISOString()};})},{tier:groupIndex*2+2,trays:Array.from({length:NUM_TRAYS_PER_TIER},(_,trayIndex)=>{const capacity=100;const itemCount=Math.floor(Math.random()*(capacity+1));return{tray:trayIndex+1,status:calculateStatus(itemCount,capacity),capacity,itemCount,lastUpdated:new Date().toISOString()};})}];return groupedTiers;});return{shelf:shelfIndex+1,tiers};});setShelvesData(initialData);// Thiết lập interval để cập nhật ngẫu nhiên\nconst interval=setInterval(()=>{if(isMounted.current){setShelvesData(prevData=>{const newData=JSON.parse(JSON.stringify(prevData));// Chọn ngẫu nhiên một ô để cập nhật\nconst randomShelf=Math.floor(Math.random()*NUM_SHELVES);const randomTierGroup=Math.floor(Math.random()*(NUM_TIERS_PER_SHELF/2));const randomTierInGroup=Math.floor(Math.random()*2);const randomTray=Math.floor(Math.random()*NUM_TRAYS_PER_TIER);// Cập nhật thông tin của ô được chọn\nconst tray=newData[randomShelf].tiers[randomTierGroup][randomTierInGroup].trays[randomTray];const newItemCount=Math.floor(Math.random()*(tray.capacity+1));tray.itemCount=newItemCount;tray.status=calculateStatus(newItemCount,tray.capacity);tray.lastUpdated=new Date().toISOString();return newData;});setLastUpdated(new Date().toISOString());}},3000);return()=>clearInterval(interval);},[]);// Tính toán thống kê mỗi khi dữ liệu thay đổi\nuseEffect(()=>{const newStats={high:0,medium:0,empty:0};shelvesData.forEach(shelf=>{shelf.tiers.forEach(group=>{group.forEach(tier=>{tier.trays.forEach(tray=>{newStats[tray.status.toLowerCase()]++;});});});});setStats(newStats);},[shelvesData]);const handleTrayClick=(shelfIndex,tierInfo,trayIndex)=>{// Thêm check để tránh click vào khu vực không hợp lệ\nif(!tierInfo||!tierInfo.trays||!tierInfo.trays[trayIndex]){return;}const tray=tierInfo.trays[trayIndex];setSelectedShelf({shelf:shelfIndex+1,tier:tierInfo.tier,tray:tray.tray,status:tray.status,capacity:tray.capacity,itemCount:tray.itemCount,lastUpdated:tray.lastUpdated});};// Hàm kiểm tra một hàng (tier) có bất kỳ ô nào phù hợp với bộ lọc không\nconst hasTierMatchingItems=tier=>{// Nếu không có bộ lọc đang hoạt động, mọi tier đều phù hợp\nif(filters.tier==='all'&&filters.status==='all'){return true;}// Kiểm tra xem tầng này có phù hợp với bộ lọc tầng không\nconst matchesTierFilter=filters.tier==='all'||Number(filters.tier)===tier.tier;// Nếu không phù hợp với bộ lọc tầng, trả về false ngay\nif(!matchesTierFilter){return false;}// Kiểm tra xem có bất kỳ khay nào trong tầng này phù hợp với bộ lọc trạng thái\nconst hasMatchingStatus=tier.trays.some(tray=>{return filters.status==='all'||filters.status===tray.status;});return hasMatchingStatus;};const handleCloseDetail=()=>{setSelectedShelf(null);};return/*#__PURE__*/_jsxs(\"div\",{className:\"shelf-grid-wrapper\",children:[/*#__PURE__*/_jsx(StatusBar,{stats:stats,lastUpdated:lastUpdated}),/*#__PURE__*/_jsx(\"div\",{className:\"shelf-grid-container\",children:shelvesData.map((shelf,shelfIndex)=>/*#__PURE__*/_jsxs(\"div\",{className:\"shelf-grid\",children:[/*#__PURE__*/_jsxs(\"h3\",{children:[\"K\\u1EC7 \",shelf.shelf]}),shelf.tiers.map((group,groupIndex)=>/*#__PURE__*/_jsx(\"div\",{className:\"tier-row-group\",children:group.map(tier=>{// Xác định xem tier này có phần tử phù hợp với bộ lọc không\nconst hasMatchingItems=hasTierMatchingItems(tier);// Class CSS dựa trên kết quả lọc\nconst isFiltered=filters.status!=='all'||filters.tier!=='all';const tierFilterClass=isFiltered?hasMatchingItems?'has-matching-items':'no-matching-items':'';return/*#__PURE__*/_jsxs(\"div\",{className:\"tier-row \".concat(tierFilterClass),style:{transition:\"all 0.7s cubic-bezier(0.4, 0, 0.2, 1) \".concat(tier.tier*0.1,\"s\")},\"data-tier\":tier.tier,\"data-has-matches\":hasMatchingItems.toString(),children:[/*#__PURE__*/_jsxs(\"div\",{className:\"tier-label\",children:[\"T\\u1EA7ng \",tier.tier]}),/*#__PURE__*/_jsx(\"div\",{className:\"tray-container\",children:tier.trays.map((tray,trayIndex)=>{// Kiểm tra cụ thể cho mỗi loại bộ lọc\nconst matchesTier=filters.tier==='all'||Number(filters.tier)===tier.tier;const matchesStatus=filters.status==='all'||filters.status===tray.status;const isMatching=matchesTier&&matchesStatus;const isFiltered=filters.status!=='all'||filters.tier!=='all';return/*#__PURE__*/_jsx(\"div\",{className:\"tray-cell \".concat(isFiltered?isMatching?'matching-filter':'not-matching-filter':'',\" status-\").concat(tray.status.toLowerCase()),style:{transition:\"all 0.5s cubic-bezier(0.4, 0, 0.2, 1) \".concat(trayIndex*0.05,\"s\")},\"data-tier\":tier.tier,\"data-tray\":tray.tray,\"data-status\":tray.status,\"data-matches\":isMatching.toString(),children:/*#__PURE__*/_jsx(ShelfItem,{tier:tier.tier,tray:tray.tray,status:tray.status,onClick:()=>handleTrayClick(shelfIndex,tier,trayIndex),isFiltered:hasActiveFilters&&isMatching})},\"tray-\".concat(tier.tier,\"-\").concat(tray.tray));})})]},\"tier-\".concat(tier.tier));})},\"tier-group-\".concat(groupIndex)))]},\"shelf-\".concat(shelf.shelf)))}),selectedShelf&&/*#__PURE__*/_jsx(ShelfDetail,{shelf:selectedShelf,onClose:handleCloseDetail})]});};export default ShelfGrid;","map":{"version":3,"names":["React","useState","useEffect","useRef","ShelfItem","ShelfDetail","StatusBar","jsx","_jsx","jsxs","_jsxs","ShelfGrid","_ref","shelves","onShelfClick","NUM_SHELVES","NUM_TIERS_PER_SHELF","NUM_TRAYS_PER_TIER","isMounted","selectedShelf","setSelectedShelf","stats","setStats","high","medium","empty","lastUpdated","setLastUpdated","Date","toISOString","shelvesData","setShelvesData","filters","tier","status","hasActiveFilters","calculateStatus","itemCount","capacity","percentage","current","initialData","Array","from","length","_","shelfIndex","tiers","groupIndex","groupedTiers","trays","trayIndex","Math","floor","random","tray","shelf","interval","setInterval","prevData","newData","JSON","parse","stringify","randomShelf","randomTierGroup","randomTierInGroup","randomTray","newItemCount","clearInterval","newStats","forEach","group","toLowerCase","handleTrayClick","tierInfo","hasTierMatchingItems","matchesTierFilter","Number","hasMatchingStatus","some","handleCloseDetail","className","children","map","hasMatchingItems","isFiltered","tierFilterClass","concat","style","transition","toString","matchesTier","matchesStatus","isMatching","onClick","onClose"],"sources":["C:/Documents/warehouse-dashboard/src/components/ShelfGrid/ShelfGrid.js"],"sourcesContent":["// File: ShelfGrid.js\n// Mô tả: Component React hiển thị lưới các kệ hàng trong dashboard quản lý kho.\n// Chức năng: Hiển thị danh sách kệ hàng theo tầng và khay, cho phép chọn từng kệ để xem chi tiết.\nimport React, { useState, useEffect, useRef } from 'react';\nimport './ShelfGrid.css';\nimport ShelfItem from './ShelfItem';\nimport ShelfDetail from '../ShelfDetail/ShelfDetail';\nimport StatusBar from '../StatusBar/StatusBar';\n\nconst ShelfGrid = ({ shelves, onShelfClick }) => {\n  const NUM_SHELVES = 4; // Số lượng kệ đồ\n  const NUM_TIERS_PER_SHELF = 4; // Số tầng mỗi kệ\n  const NUM_TRAYS_PER_TIER = 6; // Số ô mỗi tầng\n  const isMounted = useRef(true);\n\n  const [selectedShelf, setSelectedShelf] = useState(null);\n  const [stats, setStats] = useState({ high: 0, medium: 0, empty: 0 });\n  const [lastUpdated, setLastUpdated] = useState(new Date().toISOString());\n  const [shelvesData, setShelvesData] = useState([]);\n  const [filters] = useState({\n    tier: 'all',\n    status: 'all'\n  });\n\n  // Kiểm tra xem có bất kỳ bộ lọc nào đang hoạt động không\n  const hasActiveFilters = filters.status !== 'all' || filters.tier !== 'all';\n  \n  // Hàm tính toán trạng thái dựa trên số lượng vật phẩm và sức chứa\n  const calculateStatus = (itemCount, capacity) => {\n    const percentage = (itemCount / capacity) * 100;\n    let status;\n    if (percentage >= 70) status = 'HIGH';\n    else if (percentage >= 30) status = 'MEDIUM';\n    else status = 'EMPTY';\n    \n    return status;\n  };\n\n  // Cleanup khi component unmount\n  useEffect(() => {\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  // Khởi tạo dữ liệu ban đầu và thiết lập interval cập nhật\n  useEffect(() => {\n    // Tạo dữ liệu mẫu ban đầu\n    const initialData = Array.from({ length: NUM_SHELVES }, (_, shelfIndex) => {\n      const tiers = Array.from({ length: NUM_TIERS_PER_SHELF / 2 }, (_, groupIndex) => {\n        const groupedTiers = [\n          { \n            tier: groupIndex * 2 + 1, \n            trays: Array.from({ length: NUM_TRAYS_PER_TIER }, (_, trayIndex) => {\n              const capacity = 100;\n              const itemCount = Math.floor(Math.random() * (capacity + 1));\n              return {\n                tray: trayIndex + 1,\n                status: calculateStatus(itemCount, capacity),\n                capacity,\n                itemCount,\n                lastUpdated: new Date().toISOString()\n              };\n            })\n          },\n          { \n            tier: groupIndex * 2 + 2, \n            trays: Array.from({ length: NUM_TRAYS_PER_TIER }, (_, trayIndex) => {\n              const capacity = 100;\n              const itemCount = Math.floor(Math.random() * (capacity + 1));\n              return {\n                tray: trayIndex + 1,\n                status: calculateStatus(itemCount, capacity),\n                capacity,\n                itemCount,\n                lastUpdated: new Date().toISOString()\n              };\n            })\n          }\n        ];\n        return groupedTiers;\n      });\n      return { shelf: shelfIndex + 1, tiers };\n    });\n\n    setShelvesData(initialData);\n\n    // Thiết lập interval để cập nhật ngẫu nhiên\n    const interval = setInterval(() => {\n      if (isMounted.current) {\n        setShelvesData(prevData => {\n          const newData = JSON.parse(JSON.stringify(prevData));\n          \n          // Chọn ngẫu nhiên một ô để cập nhật\n          const randomShelf = Math.floor(Math.random() * NUM_SHELVES);\n          const randomTierGroup = Math.floor(Math.random() * (NUM_TIERS_PER_SHELF / 2));\n          const randomTierInGroup = Math.floor(Math.random() * 2);\n          const randomTray = Math.floor(Math.random() * NUM_TRAYS_PER_TIER);\n          \n          // Cập nhật thông tin của ô được chọn\n          const tray = newData[randomShelf].tiers[randomTierGroup][randomTierInGroup].trays[randomTray];\n          const newItemCount = Math.floor(Math.random() * (tray.capacity + 1));\n          tray.itemCount = newItemCount;\n          tray.status = calculateStatus(newItemCount, tray.capacity);\n          tray.lastUpdated = new Date().toISOString();\n          \n          return newData;\n        });\n        setLastUpdated(new Date().toISOString());\n      }\n    }, 3000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  // Tính toán thống kê mỗi khi dữ liệu thay đổi\n  useEffect(() => {\n    const newStats = { high: 0, medium: 0, empty: 0 };\n    \n    shelvesData.forEach(shelf => {\n      shelf.tiers.forEach(group => {\n        group.forEach(tier => {\n          tier.trays.forEach(tray => {\n            newStats[tray.status.toLowerCase()]++;\n          });\n        });\n      });\n    });\n    \n    setStats(newStats);\n  }, [shelvesData]);\n\n  const handleTrayClick = (shelfIndex, tierInfo, trayIndex) => {\n    // Thêm check để tránh click vào khu vực không hợp lệ\n    if (!tierInfo || !tierInfo.trays || !tierInfo.trays[trayIndex]) {\n      return;\n    }\n  \n    const tray = tierInfo.trays[trayIndex];\n    \n    setSelectedShelf({\n      shelf: shelfIndex + 1,\n      tier: tierInfo.tier,\n      tray: tray.tray,\n      status: tray.status,\n      capacity: tray.capacity,\n      itemCount: tray.itemCount,\n      lastUpdated: tray.lastUpdated\n    });\n  };\n  // Hàm kiểm tra một hàng (tier) có bất kỳ ô nào phù hợp với bộ lọc không\n  const hasTierMatchingItems = (tier) => {\n    // Nếu không có bộ lọc đang hoạt động, mọi tier đều phù hợp\n    if (filters.tier === 'all' && filters.status === 'all') {\n      return true;\n    }\n    \n    // Kiểm tra xem tầng này có phù hợp với bộ lọc tầng không\n    const matchesTierFilter = filters.tier === 'all' || Number(filters.tier) === tier.tier;\n    \n    // Nếu không phù hợp với bộ lọc tầng, trả về false ngay\n    if (!matchesTierFilter) {\n      return false;\n    }\n    \n    // Kiểm tra xem có bất kỳ khay nào trong tầng này phù hợp với bộ lọc trạng thái\n    const hasMatchingStatus = tier.trays.some(tray => {\n      return filters.status === 'all' || filters.status === tray.status;\n    });\n    \n    return hasMatchingStatus;\n  };\n\n  const handleCloseDetail = () => {\n    setSelectedShelf(null);\n  };\n\n  return (\n    <div className=\"shelf-grid-wrapper\">\n      <StatusBar stats={stats} lastUpdated={lastUpdated} />\n      <div className=\"shelf-grid-container\">\n        {shelvesData.map((shelf, shelfIndex) => (\n          <div key={`shelf-${shelf.shelf}`} className=\"shelf-grid\">\n            <h3>Kệ {shelf.shelf}</h3>\n            {shelf.tiers.map((group, groupIndex) => (\n              <div key={`tier-group-${groupIndex}`} className=\"tier-row-group\">\n                {group.map((tier) => {\n                  // Xác định xem tier này có phần tử phù hợp với bộ lọc không\n                  const hasMatchingItems = hasTierMatchingItems(tier);\n                  \n                  // Class CSS dựa trên kết quả lọc\n                  const isFiltered = filters.status !== 'all' || filters.tier !== 'all';\n                  const tierFilterClass = isFiltered\n                    ? (hasMatchingItems ? 'has-matching-items' : 'no-matching-items')\n                    : '';\n                  \n                  return (\n                    <div \n                      key={`tier-${tier.tier}`} \n                      className={`tier-row ${tierFilterClass}`}\n                      style={{\n                        transition: `all 0.7s cubic-bezier(0.4, 0, 0.2, 1) ${tier.tier * 0.1}s`\n                      }}\n                      data-tier={tier.tier}\n                      data-has-matches={hasMatchingItems.toString()}\n                    >\n                      <div className=\"tier-label\">Tầng {tier.tier}</div>\n                      <div className=\"tray-container\">\n                        {tier.trays.map((tray, trayIndex) => {\n                          // Kiểm tra cụ thể cho mỗi loại bộ lọc\n                          const matchesTier = filters.tier === 'all' || Number(filters.tier) === tier.tier;\n                          const matchesStatus = filters.status === 'all' || filters.status === tray.status;\n                          const isMatching = matchesTier && matchesStatus;\n                          const isFiltered = filters.status !== 'all' || filters.tier !== 'all';\n                          \n                          return (\n                            <div \n                              key={`tray-${tier.tier}-${tray.tray}`} \n                              className={`tray-cell ${isFiltered ? (isMatching ? 'matching-filter' : 'not-matching-filter') : ''} status-${tray.status.toLowerCase()}`}\n                              style={{\n                                transition: `all 0.5s cubic-bezier(0.4, 0, 0.2, 1) ${trayIndex * 0.05}s`\n                              }}\n                              data-tier={tier.tier}\n                              data-tray={tray.tray}\n                              data-status={tray.status}\n                              data-matches={isMatching.toString()}\n                            >\n                              <ShelfItem\n                                tier={tier.tier}\n                                tray={tray.tray}\n                                status={tray.status}\n                                onClick={() => handleTrayClick(shelfIndex, tier, trayIndex)}\n                                isFiltered={hasActiveFilters && isMatching}\n                              />\n                            </div>\n                          );\n                        })}\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n      {selectedShelf && (\n        <ShelfDetail\n          shelf={selectedShelf}\n          onClose={handleCloseDetail}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default ShelfGrid;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}