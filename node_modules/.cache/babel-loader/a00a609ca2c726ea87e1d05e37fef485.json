{"ast":null,"code":"var _jsxFileName = \"C:\\\\Documents\\\\warehouse-dashboard\\\\src\\\\components\\\\ShelfGrid\\\\ShelfGrid.js\",\n  _s = $RefreshSig$();\n// File: ShelfGrid.js\n// Mô tả: Component React hiển thị lưới các kệ hàng trong dashboard quản lý kho.\n// Chức năng: Hiển thị danh sách kệ hàng theo tầng và khay, cho phép chọn từng kệ để xem chi tiết.\nimport React, { useState, useEffect, useRef } from 'react';\nimport './ShelfGrid.css';\nimport ShelfItem from './ShelfItem';\nimport ShelfDetail from '../ShelfDetail/ShelfDetail';\nimport StatusBar from '../StatusBar/StatusBar';\nimport FilterPanel from '../FilterPanel/FilterPanel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ShelfGrid = ({\n  shelves,\n  onShelfClick,\n  filters: externalFilters,\n  onFilterChange\n}) => {\n  _s();\n  const NUM_SHELVES = 4; // Số lượng kệ đồ\n  const NUM_TIERS_PER_SHELF = 4; // Số tầng mỗi kệ\n  const NUM_TRAYS_PER_TIER = 6; // Số ô mỗi tầng\n  const isMounted = useRef(true);\n  const [selectedShelf, setSelectedShelf] = useState(null);\n  const [stats, setStats] = useState({\n    high: 0,\n    medium: 0,\n    empty: 0\n  });\n  const [lastUpdated, setLastUpdated] = useState(new Date().toISOString());\n  const [shelvesData, setShelvesData] = useState(shelves || []);\n\n  // Get filters from props\n  const filters = externalFilters || {\n    tier: 'all',\n    status: 'all'\n  };\n\n  // Update data when shelves prop changes\n  useEffect(() => {\n    if (shelves && isMounted.current) {\n      setShelvesData(shelves);\n\n      // Update stats when data changes\n      const newStats = {\n        high: 0,\n        medium: 0,\n        empty: 0\n      };\n      shelves.forEach(shelf => {\n        shelf.tiers.forEach(group => {\n          group.forEach(tier => {\n            tier.trays.forEach(tray => {\n              newStats[tray.status.toLowerCase()]++;\n            });\n          });\n        });\n      });\n      setStats(newStats);\n      setLastUpdated(new Date().toISOString());\n    }\n  }, [shelves]);\n\n  // Kiểm tra xem có bất kỳ bộ lọc nào đang hoạt động không\n  const hasActiveFilters = filters.status !== 'all' || filters.tier !== 'all';\n\n  // Hàm tính toán trạng thái dựa trên số lượng vật phẩm và sức chứa\n  const calculateStatus = (itemCount, capacity) => {\n    const percentage = itemCount / capacity * 100;\n    let status;\n    if (percentage >= 70) status = 'HIGH';else if (percentage >= 30) status = 'MEDIUM';else status = 'EMPTY';\n    return status;\n  };\n\n  // Cleanup khi component unmount\n  useEffect(() => {\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  // Khởi tạo dữ liệu ban đầu và thiết lập interval cập nhật\n  useEffect(() => {\n    // Tạo dữ liệu mẫu ban đầu\n    const initialData = Array.from({\n      length: NUM_SHELVES\n    }, (_, shelfIndex) => {\n      const tiers = Array.from({\n        length: NUM_TIERS_PER_SHELF / 2\n      }, (_, groupIndex) => {\n        const groupedTiers = [{\n          tier: groupIndex * 2 + 1,\n          trays: Array.from({\n            length: NUM_TRAYS_PER_TIER\n          }, (_, trayIndex) => {\n            const capacity = 100;\n            const itemCount = Math.floor(Math.random() * (capacity + 1));\n            return {\n              tray: trayIndex + 1,\n              status: calculateStatus(itemCount, capacity),\n              capacity,\n              itemCount,\n              lastUpdated: new Date().toISOString()\n            };\n          })\n        }, {\n          tier: groupIndex * 2 + 2,\n          trays: Array.from({\n            length: NUM_TRAYS_PER_TIER\n          }, (_, trayIndex) => {\n            const capacity = 100;\n            const itemCount = Math.floor(Math.random() * (capacity + 1));\n            return {\n              tray: trayIndex + 1,\n              status: calculateStatus(itemCount, capacity),\n              capacity,\n              itemCount,\n              lastUpdated: new Date().toISOString()\n            };\n          })\n        }];\n        return groupedTiers;\n      });\n      return {\n        shelf: shelfIndex + 1,\n        tiers\n      };\n    });\n    setShelvesData(initialData);\n\n    // Thiết lập interval để cập nhật ngẫu nhiên\n    const interval = setInterval(() => {\n      if (isMounted.current) {\n        setShelvesData(prevData => {\n          const newData = JSON.parse(JSON.stringify(prevData));\n\n          // Chọn ngẫu nhiên một ô để cập nhật\n          const randomShelf = Math.floor(Math.random() * NUM_SHELVES);\n          const randomTierGroup = Math.floor(Math.random() * (NUM_TIERS_PER_SHELF / 2));\n          const randomTierInGroup = Math.floor(Math.random() * 2);\n          const randomTray = Math.floor(Math.random() * NUM_TRAYS_PER_TIER);\n\n          // Cập nhật thông tin của ô được chọn\n          const tray = newData[randomShelf].tiers[randomTierGroup][randomTierInGroup].trays[randomTray];\n          const newItemCount = Math.floor(Math.random() * (tray.capacity + 1));\n          tray.itemCount = newItemCount;\n          tray.status = calculateStatus(newItemCount, tray.capacity);\n          tray.lastUpdated = new Date().toISOString();\n          return newData;\n        });\n        setLastUpdated(new Date().toISOString());\n      }\n    }, 3000);\n    return () => clearInterval(interval);\n  }, []);\n\n  // Tính toán thống kê mỗi khi dữ liệu thay đổi\n  useEffect(() => {\n    const newStats = {\n      high: 0,\n      medium: 0,\n      empty: 0\n    };\n    shelvesData.forEach(shelf => {\n      shelf.tiers.forEach(group => {\n        group.forEach(tier => {\n          tier.trays.forEach(tray => {\n            newStats[tray.status.toLowerCase()]++;\n          });\n        });\n      });\n    });\n    setStats(newStats);\n  }, [shelvesData]);\n  const handleTrayClick = (shelfIndex, tierInfo, trayIndex) => {\n    // Thêm check để tránh click vào khu vực không hợp lệ\n    if (!tierInfo || !tierInfo.trays || !tierInfo.trays[trayIndex]) {\n      return;\n    }\n    const tray = tierInfo.trays[trayIndex];\n    setSelectedShelf({\n      shelf: shelfIndex + 1,\n      tier: tierInfo.tier,\n      tray: tray.tray,\n      status: tray.status,\n      capacity: tray.capacity,\n      itemCount: tray.itemCount,\n      lastUpdated: tray.lastUpdated\n    });\n  };\n  // Hàm kiểm tra một hàng (tier) có bất kỳ ô nào phù hợp với bộ lọc không\n  const hasTierMatchingItems = tier => {\n    // Nếu không có bộ lọc đang hoạt động, mọi tier đều phù hợp\n    if (filters.tier === 'all' && filters.status === 'all') {\n      return true;\n    }\n\n    // Kiểm tra xem tầng này có phù hợp với bộ lọc tầng không\n    const matchesTierFilter = filters.tier === 'all' || Number(filters.tier) === tier.tier;\n\n    // Nếu không phù hợp với bộ lọc tầng, trả về false ngay\n    if (!matchesTierFilter) {\n      return false;\n    }\n\n    // Kiểm tra xem có bất kỳ khay nào trong tầng này phù hợp với bộ lọc trạng thái\n    const hasMatchingStatus = tier.trays.some(tray => {\n      return filters.status === 'all' || filters.status === tray.status;\n    });\n    return hasMatchingStatus;\n  };\n  const handleCloseDetail = () => {\n    setSelectedShelf(null);\n  };\n\n  // Xử lý khi bộ lọc thay đổi\n  const handleFilterChange = (type, value, newFilters) => {\n    if (onFilterChange) {\n      onFilterChange(type, value, newFilters);\n    }\n  };\n\n  // Lấy tất cả các tầng độc nhất\n  const getAllTiers = () => {\n    const tiers = new Set();\n    shelvesData.forEach(shelf => {\n      shelf.tiers.forEach(group => {\n        group.forEach(tier => {\n          tiers.add(tier.tier.toString());\n        });\n      });\n    });\n    return Array.from(tiers).sort((a, b) => Number(a) - Number(b));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"shelf-grid-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(StatusBar, {\n      stats: stats,\n      lastUpdated: lastUpdated\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FilterPanel, {\n      tiers: getAllTiers(),\n      statuses: ['HIGH', 'MEDIUM', 'EMPTY'],\n      filters: filters,\n      onFilterChange: handleFilterChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"shelf-grid-container\",\n      children: shelvesData.map((shelf, shelfIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"shelf-grid\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"K\\u1EC7 \", shelf.shelf]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 13\n        }, this), shelf.tiers.map((group, groupIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tier-row-group\",\n          children: group.map(tier => {\n            // Xác định xem tier này có phần tử phù hợp với bộ lọc không\n            const hasMatchingItems = hasTierMatchingItems(tier);\n\n            // Class CSS dựa trên kết quả lọc\n            const isFiltered = filters.status !== 'all' || filters.tier !== 'all';\n            const tierFilterClass = isFiltered ? hasMatchingItems ? 'has-matching-items' : 'no-matching-items' : '';\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `tier-row ${tierFilterClass}`,\n              style: {\n                transition: `all 0.7s cubic-bezier(0.4, 0, 0.2, 1) ${tier.tier * 0.1}s`\n              },\n              \"data-tier\": tier.tier,\n              \"data-has-matches\": hasMatchingItems.toString(),\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"tier-label\",\n                children: [\"T\\u1EA7ng \", tier.tier]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 254,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"tray-container\",\n                children: tier.trays.map((tray, trayIndex) => {\n                  // Kiểm tra cụ thể cho mỗi loại bộ lọc\n                  const matchesTier = filters.tier === 'all' || Number(filters.tier) === tier.tier;\n                  const matchesStatus = filters.status === 'all' || filters.status === tray.status;\n                  const isMatching = matchesTier && matchesStatus;\n                  const isFiltered = filters.status !== 'all' || filters.tier !== 'all';\n                  return /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: `tray-cell ${isFiltered ? isMatching ? 'matching-filter' : 'not-matching-filter' : ''} status-${tray.status.toLowerCase()}`,\n                    style: {\n                      transition: `all 0.5s cubic-bezier(0.4, 0, 0.2, 1) ${trayIndex * 0.05}s`\n                    },\n                    \"data-tier\": tier.tier,\n                    \"data-tray\": tray.tray,\n                    \"data-status\": tray.status,\n                    \"data-matches\": isMatching.toString(),\n                    children: /*#__PURE__*/_jsxDEV(ShelfItem, {\n                      tier: tier.tier,\n                      tray: tray.tray,\n                      status: tray.status,\n                      onClick: () => handleTrayClick(shelfIndex, tier, trayIndex),\n                      isFiltered: hasActiveFilters && isMatching\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 275,\n                      columnNumber: 31\n                    }, this)\n                  }, `tray-${tier.tier}-${tray.tray}`, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 264,\n                    columnNumber: 29\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 255,\n                columnNumber: 23\n              }, this)]\n            }, `tier-${tier.tier}`, true, {\n              fileName: _jsxFileName,\n              lineNumber: 245,\n              columnNumber: 21\n            }, this);\n          })\n        }, `tier-group-${groupIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 15\n        }, this))]\n      }, `shelf-${shelf.shelf}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }, this), selectedShelf && /*#__PURE__*/_jsxDEV(ShelfDetail, {\n      shelf: selectedShelf,\n      onClose: handleCloseDetail\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 220,\n    columnNumber: 5\n  }, this);\n};\n_s(ShelfGrid, \"sllaMFMxFyY/aH8wEj3fB51DG6c=\");\n_c = ShelfGrid;\nexport default ShelfGrid;\nvar _c;\n$RefreshReg$(_c, \"ShelfGrid\");","map":{"version":3,"names":["React","useState","useEffect","useRef","ShelfItem","ShelfDetail","StatusBar","FilterPanel","jsxDEV","_jsxDEV","ShelfGrid","shelves","onShelfClick","filters","externalFilters","onFilterChange","_s","NUM_SHELVES","NUM_TIERS_PER_SHELF","NUM_TRAYS_PER_TIER","isMounted","selectedShelf","setSelectedShelf","stats","setStats","high","medium","empty","lastUpdated","setLastUpdated","Date","toISOString","shelvesData","setShelvesData","tier","status","current","newStats","forEach","shelf","tiers","group","trays","tray","toLowerCase","hasActiveFilters","calculateStatus","itemCount","capacity","percentage","initialData","Array","from","length","_","shelfIndex","groupIndex","groupedTiers","trayIndex","Math","floor","random","interval","setInterval","prevData","newData","JSON","parse","stringify","randomShelf","randomTierGroup","randomTierInGroup","randomTray","newItemCount","clearInterval","handleTrayClick","tierInfo","hasTierMatchingItems","matchesTierFilter","Number","hasMatchingStatus","some","handleCloseDetail","handleFilterChange","type","value","newFilters","getAllTiers","Set","add","toString","sort","a","b","className","children","fileName","_jsxFileName","lineNumber","columnNumber","statuses","map","hasMatchingItems","isFiltered","tierFilterClass","style","transition","matchesTier","matchesStatus","isMatching","onClick","onClose","_c","$RefreshReg$"],"sources":["C:/Documents/warehouse-dashboard/src/components/ShelfGrid/ShelfGrid.js"],"sourcesContent":["// File: ShelfGrid.js\n// Mô tả: Component React hiển thị lưới các kệ hàng trong dashboard quản lý kho.\n// Chức năng: Hiển thị danh sách kệ hàng theo tầng và khay, cho phép chọn từng kệ để xem chi tiết.\nimport React, { useState, useEffect, useRef } from 'react';\nimport './ShelfGrid.css';\nimport ShelfItem from './ShelfItem';\nimport ShelfDetail from '../ShelfDetail/ShelfDetail';\nimport StatusBar from '../StatusBar/StatusBar';\nimport FilterPanel from '../FilterPanel/FilterPanel';\n\nconst ShelfGrid = ({ shelves, onShelfClick, filters: externalFilters, onFilterChange }) => {\n  const NUM_SHELVES = 4; // Số lượng kệ đồ\n  const NUM_TIERS_PER_SHELF = 4; // Số tầng mỗi kệ\n  const NUM_TRAYS_PER_TIER = 6; // Số ô mỗi tầng\n  const isMounted = useRef(true);\n\n  const [selectedShelf, setSelectedShelf] = useState(null);\n  const [stats, setStats] = useState({ high: 0, medium: 0, empty: 0 });\n  const [lastUpdated, setLastUpdated] = useState(new Date().toISOString());\n  const [shelvesData, setShelvesData] = useState(shelves || []);\n  \n  // Get filters from props\n  const filters = externalFilters || { tier: 'all', status: 'all' };\n\n  // Update data when shelves prop changes\n  useEffect(() => {\n    if (shelves && isMounted.current) {\n      setShelvesData(shelves);\n      \n      // Update stats when data changes\n      const newStats = { high: 0, medium: 0, empty: 0 };\n      shelves.forEach(shelf => {\n        shelf.tiers.forEach(group => {\n          group.forEach(tier => {\n            tier.trays.forEach(tray => {\n              newStats[tray.status.toLowerCase()]++;\n            });\n          });\n        });\n      });\n      setStats(newStats);\n      setLastUpdated(new Date().toISOString());\n    }\n  }, [shelves]);\n\n  // Kiểm tra xem có bất kỳ bộ lọc nào đang hoạt động không\n  const hasActiveFilters = filters.status !== 'all' || filters.tier !== 'all';\n  \n  // Hàm tính toán trạng thái dựa trên số lượng vật phẩm và sức chứa\n  const calculateStatus = (itemCount, capacity) => {\n    const percentage = (itemCount / capacity) * 100;\n    let status;\n    if (percentage >= 70) status = 'HIGH';\n    else if (percentage >= 30) status = 'MEDIUM';\n    else status = 'EMPTY';\n    \n    return status;\n  };\n\n  // Cleanup khi component unmount\n  useEffect(() => {\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  // Khởi tạo dữ liệu ban đầu và thiết lập interval cập nhật\n  useEffect(() => {\n    // Tạo dữ liệu mẫu ban đầu\n    const initialData = Array.from({ length: NUM_SHELVES }, (_, shelfIndex) => {\n      const tiers = Array.from({ length: NUM_TIERS_PER_SHELF / 2 }, (_, groupIndex) => {\n        const groupedTiers = [\n          { \n            tier: groupIndex * 2 + 1, \n            trays: Array.from({ length: NUM_TRAYS_PER_TIER }, (_, trayIndex) => {\n              const capacity = 100;\n              const itemCount = Math.floor(Math.random() * (capacity + 1));\n              return {\n                tray: trayIndex + 1,\n                status: calculateStatus(itemCount, capacity),\n                capacity,\n                itemCount,\n                lastUpdated: new Date().toISOString()\n              };\n            })\n          },\n          { \n            tier: groupIndex * 2 + 2, \n            trays: Array.from({ length: NUM_TRAYS_PER_TIER }, (_, trayIndex) => {\n              const capacity = 100;\n              const itemCount = Math.floor(Math.random() * (capacity + 1));\n              return {\n                tray: trayIndex + 1,\n                status: calculateStatus(itemCount, capacity),\n                capacity,\n                itemCount,\n                lastUpdated: new Date().toISOString()\n              };\n            })\n          }\n        ];\n        return groupedTiers;\n      });\n      return { shelf: shelfIndex + 1, tiers };\n    });\n\n    setShelvesData(initialData);\n\n    // Thiết lập interval để cập nhật ngẫu nhiên\n    const interval = setInterval(() => {\n      if (isMounted.current) {\n        setShelvesData(prevData => {\n          const newData = JSON.parse(JSON.stringify(prevData));\n          \n          // Chọn ngẫu nhiên một ô để cập nhật\n          const randomShelf = Math.floor(Math.random() * NUM_SHELVES);\n          const randomTierGroup = Math.floor(Math.random() * (NUM_TIERS_PER_SHELF / 2));\n          const randomTierInGroup = Math.floor(Math.random() * 2);\n          const randomTray = Math.floor(Math.random() * NUM_TRAYS_PER_TIER);\n          \n          // Cập nhật thông tin của ô được chọn\n          const tray = newData[randomShelf].tiers[randomTierGroup][randomTierInGroup].trays[randomTray];\n          const newItemCount = Math.floor(Math.random() * (tray.capacity + 1));\n          tray.itemCount = newItemCount;\n          tray.status = calculateStatus(newItemCount, tray.capacity);\n          tray.lastUpdated = new Date().toISOString();\n          \n          return newData;\n        });\n        setLastUpdated(new Date().toISOString());\n      }\n    }, 3000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  // Tính toán thống kê mỗi khi dữ liệu thay đổi\n  useEffect(() => {\n    const newStats = { high: 0, medium: 0, empty: 0 };\n    \n    shelvesData.forEach(shelf => {\n      shelf.tiers.forEach(group => {\n        group.forEach(tier => {\n          tier.trays.forEach(tray => {\n            newStats[tray.status.toLowerCase()]++;\n          });\n        });\n      });\n    });\n    \n    setStats(newStats);\n  }, [shelvesData]);\n\n  const handleTrayClick = (shelfIndex, tierInfo, trayIndex) => {\n    // Thêm check để tránh click vào khu vực không hợp lệ\n    if (!tierInfo || !tierInfo.trays || !tierInfo.trays[trayIndex]) {\n      return;\n    }\n  \n    const tray = tierInfo.trays[trayIndex];\n    \n    setSelectedShelf({\n      shelf: shelfIndex + 1,\n      tier: tierInfo.tier,\n      tray: tray.tray,\n      status: tray.status,\n      capacity: tray.capacity,\n      itemCount: tray.itemCount,\n      lastUpdated: tray.lastUpdated\n    });\n  };\n  // Hàm kiểm tra một hàng (tier) có bất kỳ ô nào phù hợp với bộ lọc không\n  const hasTierMatchingItems = (tier) => {\n    // Nếu không có bộ lọc đang hoạt động, mọi tier đều phù hợp\n    if (filters.tier === 'all' && filters.status === 'all') {\n      return true;\n    }\n    \n    // Kiểm tra xem tầng này có phù hợp với bộ lọc tầng không\n    const matchesTierFilter = filters.tier === 'all' || Number(filters.tier) === tier.tier;\n    \n    // Nếu không phù hợp với bộ lọc tầng, trả về false ngay\n    if (!matchesTierFilter) {\n      return false;\n    }\n    \n    // Kiểm tra xem có bất kỳ khay nào trong tầng này phù hợp với bộ lọc trạng thái\n    const hasMatchingStatus = tier.trays.some(tray => {\n      return filters.status === 'all' || filters.status === tray.status;\n    });\n    \n    return hasMatchingStatus;\n  };\n\n  const handleCloseDetail = () => {\n    setSelectedShelf(null);\n  };\n\n  // Xử lý khi bộ lọc thay đổi\n  const handleFilterChange = (type, value, newFilters) => {\n    if (onFilterChange) {\n      onFilterChange(type, value, newFilters);\n    }\n  };\n\n  // Lấy tất cả các tầng độc nhất\n  const getAllTiers = () => {\n    const tiers = new Set();\n    shelvesData.forEach(shelf => {\n      shelf.tiers.forEach(group => {\n        group.forEach(tier => {\n          tiers.add(tier.tier.toString());\n        });\n      });\n    });\n    return Array.from(tiers).sort((a, b) => Number(a) - Number(b));\n  };\n\n  return (\n    <div className=\"shelf-grid-wrapper\">\n      <StatusBar stats={stats} lastUpdated={lastUpdated} />\n      <FilterPanel \n        tiers={getAllTiers()}\n        statuses={['HIGH', 'MEDIUM', 'EMPTY']}\n        filters={filters}\n        onFilterChange={handleFilterChange}\n      />\n      <div className=\"shelf-grid-container\">\n        {shelvesData.map((shelf, shelfIndex) => (\n          <div key={`shelf-${shelf.shelf}`} className=\"shelf-grid\">\n            <h3>Kệ {shelf.shelf}</h3>\n            {shelf.tiers.map((group, groupIndex) => (\n              <div key={`tier-group-${groupIndex}`} className=\"tier-row-group\">\n                {group.map((tier) => {\n                  // Xác định xem tier này có phần tử phù hợp với bộ lọc không\n                  const hasMatchingItems = hasTierMatchingItems(tier);\n                  \n                  // Class CSS dựa trên kết quả lọc\n                  const isFiltered = filters.status !== 'all' || filters.tier !== 'all';\n                  const tierFilterClass = isFiltered\n                    ? (hasMatchingItems ? 'has-matching-items' : 'no-matching-items')\n                    : '';\n                  \n                  return (\n                    <div \n                      key={`tier-${tier.tier}`} \n                      className={`tier-row ${tierFilterClass}`}\n                      style={{\n                        transition: `all 0.7s cubic-bezier(0.4, 0, 0.2, 1) ${tier.tier * 0.1}s`\n                      }}\n                      data-tier={tier.tier}\n                      data-has-matches={hasMatchingItems.toString()}\n                    >\n                      <div className=\"tier-label\">Tầng {tier.tier}</div>\n                      <div className=\"tray-container\">\n                        {tier.trays.map((tray, trayIndex) => {\n                          // Kiểm tra cụ thể cho mỗi loại bộ lọc\n                          const matchesTier = filters.tier === 'all' || Number(filters.tier) === tier.tier;\n                          const matchesStatus = filters.status === 'all' || filters.status === tray.status;\n                          const isMatching = matchesTier && matchesStatus;\n                          const isFiltered = filters.status !== 'all' || filters.tier !== 'all';\n                          \n                          return (\n                            <div \n                              key={`tray-${tier.tier}-${tray.tray}`} \n                              className={`tray-cell ${isFiltered ? (isMatching ? 'matching-filter' : 'not-matching-filter') : ''} status-${tray.status.toLowerCase()}`}\n                              style={{\n                                transition: `all 0.5s cubic-bezier(0.4, 0, 0.2, 1) ${trayIndex * 0.05}s`\n                              }}\n                              data-tier={tier.tier}\n                              data-tray={tray.tray}\n                              data-status={tray.status}\n                              data-matches={isMatching.toString()}\n                            >\n                              <ShelfItem\n                                tier={tier.tier}\n                                tray={tray.tray}\n                                status={tray.status}\n                                onClick={() => handleTrayClick(shelfIndex, tier, trayIndex)}\n                                isFiltered={hasActiveFilters && isMatching}\n                              />\n                            </div>\n                          );\n                        })}\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n      {selectedShelf && (\n        <ShelfDetail\n          shelf={selectedShelf}\n          onClose={handleCloseDetail}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default ShelfGrid;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}