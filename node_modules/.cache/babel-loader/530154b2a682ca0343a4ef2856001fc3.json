{"ast":null,"code":"// Giả lập MQTT Client thay vì kết nối thực tế\nclass MockMQTTClient {\n  constructor() {\n    this.topics = new Map();\n    this.isConnected = true;\n    console.log('Sử dụng Mock MQTT Client thay vì kết nối thực tế');\n  }\n  async connect() {\n    // Không cần kết nối thực sự\n    console.log('Mock MQTT: Giả lập kết nối thành công');\n    return Promise.resolve();\n  }\n  async subscribe(topic, handler) {\n    console.log(`Mock MQTT: Subscribe to topic ${topic}`);\n    if (!this.topics.has(topic)) {\n      this.topics.set(topic, []);\n    }\n    const handlers = this.topics.get(topic);\n    handlers.push(handler);\n    this.topics.set(topic, handlers);\n\n    // Giả lập dữ liệu ban đầu sau 1 giây\n    setTimeout(() => {\n      this.simulateInitialData(topic);\n    }, 1000);\n\n    // Thiết lập cập nhật ngẫu nhiên mỗi 10 giây\n    const intervalId = setInterval(() => {\n      this.simulateRandomUpdate(topic);\n    }, 10000);\n\n    // Trả về hàm unsubscribe\n    return () => {\n      console.log(`Mock MQTT: Unsubscribe from topic ${topic}`);\n      const handlers = this.topics.get(topic);\n      if (handlers) {\n        const updatedHandlers = handlers.filter(h => h !== handler);\n        if (updatedHandlers.length === 0) {\n          this.topics.delete(topic);\n          // Xóa interval khi không còn handler nào\n          clearInterval(intervalId);\n        } else {\n          this.topics.set(topic, updatedHandlers);\n        }\n      }\n    };\n  }\n  async publish(topic, message) {\n    console.log(`Mock MQTT: Publishing to ${topic}`, message);\n\n    // Giả lập xử lý message đã được publish\n    setTimeout(() => {\n      const handlers = this.topics.get(topic) || [];\n      const messageStr = typeof message === 'string' ? message : JSON.stringify(message);\n      handlers.forEach(handler => {\n        handler({\n          ...JSON.parse(messageStr),\n          topic\n        });\n      });\n    }, 500);\n    return Promise.resolve();\n  }\n\n  // Phương thức giả lập dữ liệu ban đầu\n  simulateInitialData(topicPattern) {\n    if (topicPattern === 'warehouse/shelf/#') {\n      // Tạo dữ liệu cho tất cả các kệ\n      for (let shelf = 1; shelf <= 5; shelf++) {\n        for (let tier = 1; tier <= 4; tier++) {\n          for (let tray = 1; tray <= 6; tray++) {\n            const topic = `warehouse/shelf/${shelf}/${tier}/${tray}/status`;\n            const data = this.generateShelfData(shelf, tier, tray);\n            const handlers = this.topics.get(topicPattern) || [];\n            handlers.forEach(handler => {\n              handler({\n                ...data,\n                topic\n              });\n            });\n          }\n        }\n      }\n    }\n  }\n\n  // Phương thức giả lập cập nhật ngẫu nhiên\n  simulateRandomUpdate(topicPattern) {\n    if (topicPattern === 'warehouse/shelf/#') {\n      // Luôn cập nhật ít nhất một ô kệ\n      const shelf = Math.floor(Math.random() * 5) + 1;\n      const tier = Math.floor(Math.random() * 4) + 1;\n      const tray = Math.floor(Math.random() * 6) + 1;\n      const topic = `warehouse/shelf/${shelf}/${tier}/${tray}/status`;\n      const data = this.generateShelfData(shelf, tier, tray);\n      console.log(`Mock MQTT: Cập nhật ngẫu nhiên kệ [${shelf}-${tier}-${tray}] -> ${data.status}`);\n      const handlers = this.topics.get(topicPattern) || [];\n      handlers.forEach(handler => {\n        handler({\n          ...data,\n          topic\n        });\n      });\n    }\n  }\n\n  // Tạo dữ liệu ngẫu nhiên cho kệ\n  generateShelfData(shelf, tier, tray) {\n    const capacity = Math.floor(Math.random() * 101);\n    const itemCount = Math.floor(Math.random() * (capacity + 1));\n    let status;\n    if (itemCount >= 80) status = 'HIGH';else if (itemCount >= 30) status = 'MEDIUM';else status = 'EMPTY';\n    return {\n      shelf,\n      tier,\n      tray,\n      status,\n      capacity: 100,\n      itemCount,\n      lastUpdated: new Date().toISOString()\n    };\n  }\n}\n\n// Tạo và xuất instance singleton\nconst mqttClient = new MockMQTTClient();\nexport { mqttClient };\n\n// Các hằng số cấu hình MQTT\nconst MQTT_BROKER_URL = 'ws://localhost:9001'; // WebSocket port cho Mosquitto\nconst MQTT_TOPIC = 'warehouse/shelves/updates';\nlet client = null;\nlet messageCallbacks = new Set();\nlet mockInterval;\n\n// Mock updates cho development (khi không có MQTT broker)\nconst createMockUpdates = callback => {\n  // Giả lập cập nhật ngẫu nhiên mỗi 10 giây\n  mockInterval = setInterval(() => {\n    // Chọn ô kệ ngẫu nhiên\n    const shelf = Math.floor(Math.random() * 5) + 1;\n    const tier = Math.floor(Math.random() * 4) + 1;\n    const tray = Math.floor(Math.random() * 6) + 1;\n\n    // Tạo dữ liệu ngẫu nhiên\n    const itemCount = Math.floor(Math.random() * 100);\n    let status;\n    if (itemCount >= 80) status = 'HIGH';else if (itemCount >= 30) status = 'MEDIUM';else status = 'EMPTY';\n    const mockUpdate = {\n      shelf,\n      tier,\n      tray,\n      itemCount,\n      capacity: 100,\n      status,\n      lastUpdated: new Date().toISOString()\n    };\n    console.log(`Mock update: Kệ ${shelf}, Tầng ${tier}, Ô ${tray} -> ${status}`);\n    callback(mockUpdate);\n  }, 1000); // Giảm xuống 5 giây để thấy kết quả nhanh hơn\n\n  return () => {\n    if (mockInterval) {\n      clearInterval(mockInterval);\n    }\n  };\n};\n\n// Khởi tạo kết nối MQTT\nconst initializeMQTTClient = async () => {\n  if (typeof window !== 'undefined' && !client) {\n    try {\n      // Dynamic import của thư viện MQTT\n      const mqtt = await import('mqtt');\n      client = mqtt.connect(MQTT_BROKER_URL);\n      client.on('connect', () => {\n        console.log('Connected to MQTT broker');\n        client.subscribe(MQTT_TOPIC);\n      });\n      client.on('message', (topic, message) => {\n        try {\n          const update = JSON.parse(message.toString());\n          messageCallbacks.forEach(callback => callback(update));\n        } catch (error) {\n          console.error('Error processing MQTT message:', error);\n        }\n      });\n      client.on('error', error => {\n        console.error('MQTT connection error:', error);\n      });\n    } catch (error) {\n      console.error('Failed to initialize MQTT client:', error);\n      // Fallback to mock updates in case of error\n      return createMockUpdates;\n    }\n  }\n};\n\n// Subscribe để nhận cập nhật kệ hàng\nconst subscribeToShelfUpdates = callback => {\n  // Trong môi trường development hoặc khi không có MQTT, sử dụng mock\n  if (process.env.NODE_ENV === 'development' || true) {\n    console.log('Using mock MQTT updates for development');\n    return createMockUpdates(callback);\n  }\n\n  // Trong production, sử dụng MQTT thật\n  if (!client) {\n    initializeMQTTClient();\n  }\n  messageCallbacks.add(callback);\n\n  // Trả về hàm cleanup\n  return () => {\n    messageCallbacks.delete(callback);\n    if (messageCallbacks.size === 0 && client) {\n      client.end();\n      client = null;\n    }\n  };\n};\nexport { subscribeToShelfUpdates };","map":{"version":3,"names":["MockMQTTClient","constructor","topics","Map","isConnected","console","log","connect","Promise","resolve","subscribe","topic","handler","has","set","handlers","get","push","setTimeout","simulateInitialData","intervalId","setInterval","simulateRandomUpdate","updatedHandlers","filter","h","length","delete","clearInterval","publish","message","messageStr","JSON","stringify","forEach","parse","topicPattern","shelf","tier","tray","data","generateShelfData","Math","floor","random","status","capacity","itemCount","lastUpdated","Date","toISOString","mqttClient","MQTT_BROKER_URL","MQTT_TOPIC","client","messageCallbacks","Set","mockInterval","createMockUpdates","callback","mockUpdate","initializeMQTTClient","window","mqtt","on","update","toString","error","subscribeToShelfUpdates","process","env","NODE_ENV","add","size","end"],"sources":["C:/Documents/warehouse-dashboard/src/utils/mqtt.js"],"sourcesContent":["// Giả lập MQTT Client thay vì kết nối thực tế\r\nclass MockMQTTClient {\r\n  constructor() {\r\n    this.topics = new Map();\r\n    this.isConnected = true;\r\n    console.log('Sử dụng Mock MQTT Client thay vì kết nối thực tế');\r\n  }\r\n\r\n  async connect() {\r\n    // Không cần kết nối thực sự\r\n    console.log('Mock MQTT: Giả lập kết nối thành công');\r\n    return Promise.resolve();\r\n  }\r\n\r\n  async subscribe(topic, handler) {\r\n    console.log(`Mock MQTT: Subscribe to topic ${topic}`);\r\n    \r\n    if (!this.topics.has(topic)) {\r\n      this.topics.set(topic, []);\r\n    }\r\n\r\n    const handlers = this.topics.get(topic);\r\n    handlers.push(handler);\r\n    this.topics.set(topic, handlers);\r\n\r\n    // Giả lập dữ liệu ban đầu sau 1 giây\r\n    setTimeout(() => {\r\n      this.simulateInitialData(topic);\r\n    }, 1000);\r\n\r\n    // Thiết lập cập nhật ngẫu nhiên mỗi 10 giây\r\n    const intervalId = setInterval(() => {\r\n      this.simulateRandomUpdate(topic);\r\n    }, 10000);\r\n\r\n    // Trả về hàm unsubscribe\r\n    return () => {\r\n      console.log(`Mock MQTT: Unsubscribe from topic ${topic}`);\r\n      const handlers = this.topics.get(topic);\r\n      if (handlers) {\r\n        const updatedHandlers = handlers.filter(h => h !== handler);\r\n        if (updatedHandlers.length === 0) {\r\n          this.topics.delete(topic);\r\n          // Xóa interval khi không còn handler nào\r\n          clearInterval(intervalId);\r\n        } else {\r\n          this.topics.set(topic, updatedHandlers);\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  async publish(topic, message) {\r\n    console.log(`Mock MQTT: Publishing to ${topic}`, message);\r\n    \r\n    // Giả lập xử lý message đã được publish\r\n    setTimeout(() => {\r\n      const handlers = this.topics.get(topic) || [];\r\n      const messageStr = typeof message === 'string' \r\n        ? message \r\n        : JSON.stringify(message);\r\n      \r\n      handlers.forEach(handler => {\r\n        handler({\r\n          ...JSON.parse(messageStr),\r\n          topic\r\n        });\r\n      });\r\n    }, 500);\r\n\r\n    return Promise.resolve();\r\n  }\r\n\r\n  // Phương thức giả lập dữ liệu ban đầu\r\n  simulateInitialData(topicPattern) {\r\n    if (topicPattern === 'warehouse/shelf/#') {\r\n      // Tạo dữ liệu cho tất cả các kệ\r\n      for (let shelf = 1; shelf <= 5; shelf++) {\r\n        for (let tier = 1; tier <= 4; tier++) {\r\n          for (let tray = 1; tray <= 6; tray++) {\r\n            const topic = `warehouse/shelf/${shelf}/${tier}/${tray}/status`;\r\n            const data = this.generateShelfData(shelf, tier, tray);\r\n            \r\n            const handlers = this.topics.get(topicPattern) || [];\r\n            handlers.forEach(handler => {\r\n              handler({\r\n                ...data,\r\n                topic\r\n              });\r\n            });\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Phương thức giả lập cập nhật ngẫu nhiên\r\n  simulateRandomUpdate(topicPattern) {\r\n    if (topicPattern === 'warehouse/shelf/#') {\r\n      // Luôn cập nhật ít nhất một ô kệ\r\n      const shelf = Math.floor(Math.random() * 5) + 1;\r\n      const tier = Math.floor(Math.random() * 4) + 1;\r\n      const tray = Math.floor(Math.random() * 6) + 1;\r\n      const topic = `warehouse/shelf/${shelf}/${tier}/${tray}/status`;\r\n      const data = this.generateShelfData(shelf, tier, tray);\r\n      \r\n      console.log(`Mock MQTT: Cập nhật ngẫu nhiên kệ [${shelf}-${tier}-${tray}] -> ${data.status}`);\r\n      \r\n      const handlers = this.topics.get(topicPattern) || [];\r\n      handlers.forEach(handler => {\r\n        handler({\r\n          ...data,\r\n          topic\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  // Tạo dữ liệu ngẫu nhiên cho kệ\r\n  generateShelfData(shelf, tier, tray) {\r\n    const capacity = Math.floor(Math.random() * 101);\r\n    const itemCount = Math.floor(Math.random() * (capacity + 1));\r\n    let status;\r\n    \r\n    if (itemCount >= 80) status = 'HIGH';\r\n    else if (itemCount >= 30) status = 'MEDIUM';\r\n    else status = 'EMPTY';\r\n    \r\n    return {\r\n      shelf,\r\n      tier,\r\n      tray,\r\n      status,\r\n      capacity: 100,\r\n      itemCount,\r\n      lastUpdated: new Date().toISOString()\r\n    };\r\n  }\r\n}\r\n\r\n// Tạo và xuất instance singleton\r\nconst mqttClient = new MockMQTTClient();\r\nexport { mqttClient };\r\n\r\n// Các hằng số cấu hình MQTT\r\nconst MQTT_BROKER_URL = 'ws://localhost:9001'; // WebSocket port cho Mosquitto\r\nconst MQTT_TOPIC = 'warehouse/shelves/updates';\r\n\r\nlet client = null;\r\nlet messageCallbacks = new Set();\r\nlet mockInterval;\r\n\r\n// Mock updates cho development (khi không có MQTT broker)\r\nconst createMockUpdates = (callback) => {\r\n    // Giả lập cập nhật ngẫu nhiên mỗi 10 giây\r\n    mockInterval = setInterval(() => {\r\n        // Chọn ô kệ ngẫu nhiên\r\n        const shelf = Math.floor(Math.random() * 5) + 1;\r\n        const tier = Math.floor(Math.random() * 4) + 1;\r\n        const tray = Math.floor(Math.random() * 6) + 1;\r\n        \r\n        // Tạo dữ liệu ngẫu nhiên\r\n        const itemCount = Math.floor(Math.random() * 100);\r\n        let status;\r\n        if (itemCount >= 80) status = 'HIGH';\r\n        else if (itemCount >= 30) status = 'MEDIUM';\r\n        else status = 'EMPTY';\r\n        \r\n        const mockUpdate = {\r\n            shelf,\r\n            tier,\r\n            tray,\r\n            itemCount,\r\n            capacity: 100,\r\n            status,\r\n            lastUpdated: new Date().toISOString()\r\n        };\r\n        \r\n        console.log(`Mock update: Kệ ${shelf}, Tầng ${tier}, Ô ${tray} -> ${status}`);\r\n        callback(mockUpdate);\r\n    }, 1000); // Giảm xuống 5 giây để thấy kết quả nhanh hơn\r\n\r\n    return () => {\r\n        if (mockInterval) {\r\n            clearInterval(mockInterval);\r\n        }\r\n    };\r\n};\r\n\r\n// Khởi tạo kết nối MQTT\r\nconst initializeMQTTClient = async () => {\r\n    if (typeof window !== 'undefined' && !client) {\r\n        try {\r\n            // Dynamic import của thư viện MQTT\r\n            const mqtt = await import('mqtt');\r\n            client = mqtt.connect(MQTT_BROKER_URL);\r\n\r\n            client.on('connect', () => {\r\n                console.log('Connected to MQTT broker');\r\n                client.subscribe(MQTT_TOPIC);\r\n            });\r\n\r\n            client.on('message', (topic, message) => {\r\n                try {\r\n                    const update = JSON.parse(message.toString());\r\n                    messageCallbacks.forEach(callback => callback(update));\r\n                } catch (error) {\r\n                    console.error('Error processing MQTT message:', error);\r\n                }\r\n            });\r\n\r\n            client.on('error', (error) => {\r\n                console.error('MQTT connection error:', error);\r\n            });\r\n        } catch (error) {\r\n            console.error('Failed to initialize MQTT client:', error);\r\n            // Fallback to mock updates in case of error\r\n            return createMockUpdates;\r\n        }\r\n    }\r\n};\r\n\r\n// Subscribe để nhận cập nhật kệ hàng\r\nconst subscribeToShelfUpdates = (callback) => {\r\n    // Trong môi trường development hoặc khi không có MQTT, sử dụng mock\r\n    if (process.env.NODE_ENV === 'development' || true) {\r\n        console.log('Using mock MQTT updates for development');\r\n        return createMockUpdates(callback);\r\n    }\r\n\r\n    // Trong production, sử dụng MQTT thật\r\n    if (!client) {\r\n        initializeMQTTClient();\r\n    }\r\n\r\n    messageCallbacks.add(callback);\r\n\r\n    // Trả về hàm cleanup\r\n    return () => {\r\n        messageCallbacks.delete(callback);\r\n        if (messageCallbacks.size === 0 && client) {\r\n            client.end();\r\n            client = null;\r\n        }\r\n    };\r\n};\r\n\r\nexport { subscribeToShelfUpdates };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}