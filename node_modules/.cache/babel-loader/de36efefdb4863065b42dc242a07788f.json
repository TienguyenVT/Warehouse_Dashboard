{"ast":null,"code":"// File: ShelfGrid.js\n// Mô tả: Component React hiển thị lưới các kệ hàng trong dashboard quản lý kho.\n// Chức năng: Hiển thị danh sách kệ hàng theo tầng và khay, cho phép chọn từng kệ để xem chi tiết.\nimport React,{useState,useEffect}from'react';import'./ShelfGrid.css';import ShelfItem from'./ShelfItem';import ShelfDetail from'../ShelfDetail/ShelfDetail';import StatusBar from'../StatusBar/StatusBar';import FilterPanel from'../FilterPanel/FilterPanel';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ShelfGrid=_ref=>{let{shelves,onShelfClick}=_ref;const NUM_SHELVES=4;// Số lượng kệ đồ\nconst NUM_TIERS_PER_SHELF=4;// Số tầng mỗi kệ\nconst NUM_TRAYS_PER_TIER=6;// Số ô mỗi tầng\nconst[selectedShelf,setSelectedShelf]=useState(null);const[stats,setStats]=useState({high:0,medium:0,empty:0});const[lastUpdated,setLastUpdated]=useState(new Date().toISOString());const[shelvesData,setShelvesData]=useState([]);const[filters,setFilters]=useState({tier:'all',status:'all'});// Hàm tính toán trạng thái dựa trên số lượng vật phẩm và sức chứa\nconst calculateStatus=(itemCount,capacity)=>{const percentage=itemCount/capacity*100;if(percentage>=80)return'HIGH';if(percentage>=15)return'MEDIUM';if(percentage>=0)return'EMPTY';};// Khởi tạo dữ liệu ban đầu và thiết lập interval cập nhật\nuseEffect(()=>{// Tạo dữ liệu mẫu ban đầu\nconst initialData=Array.from({length:NUM_SHELVES},(_,shelfIndex)=>{const tiers=Array.from({length:NUM_TIERS_PER_SHELF/2},(_,groupIndex)=>{const groupedTiers=[{tier:groupIndex*2+1,trays:Array.from({length:NUM_TRAYS_PER_TIER},(_,trayIndex)=>{const capacity=100;const itemCount=Math.floor(Math.random()*(capacity+1));return{tray:trayIndex+1,status:calculateStatus(itemCount,capacity),capacity,itemCount,lastUpdated:new Date().toISOString()};})},{tier:groupIndex*2+2,trays:Array.from({length:NUM_TRAYS_PER_TIER},(_,trayIndex)=>{const capacity=100;const itemCount=Math.floor(Math.random()*(capacity+1));return{tray:trayIndex+1,status:calculateStatus(itemCount,capacity),capacity,itemCount,lastUpdated:new Date().toISOString()};})}];return groupedTiers;});return{shelf:shelfIndex+1,tiers};});setShelvesData(initialData);// Thiết lập interval để cập nhật ngẫu nhiên\nconst interval=setInterval(()=>{setShelvesData(prevData=>{const newData=JSON.parse(JSON.stringify(prevData));// Chọn ngẫu nhiên một ô để cập nhật\nconst randomShelf=Math.floor(Math.random()*NUM_SHELVES);const randomTierGroup=Math.floor(Math.random()*(NUM_TIERS_PER_SHELF/2));const randomTierInGroup=Math.floor(Math.random()*2);const randomTray=Math.floor(Math.random()*NUM_TRAYS_PER_TIER);// Cập nhật thông tin của ô được chọn\nconst tray=newData[randomShelf].tiers[randomTierGroup][randomTierInGroup].trays[randomTray];const newItemCount=Math.floor(Math.random()*(tray.capacity+1));tray.itemCount=newItemCount;tray.status=calculateStatus(newItemCount,tray.capacity);tray.lastUpdated=new Date().toISOString();return newData;});setLastUpdated(new Date().toISOString());},3000);return()=>clearInterval(interval);},[]);// Tính toán thống kê mỗi khi dữ liệu thay đổi\nuseEffect(()=>{const newStats={high:0,medium:0,empty:0};shelvesData.forEach(shelf=>{shelf.tiers.forEach(group=>{group.forEach(tier=>{tier.trays.forEach(tray=>{newStats[tray.status.toLowerCase()]++;});});});});setStats(newStats);},[shelvesData]);const handleTrayClick=(shelfIndex,tierInfo,trayIndex)=>{// Thêm check để tránh click vào khu vực không hợp lệ\nif(!tierInfo||!tierInfo.trays||!tierInfo.trays[trayIndex]){return;}const tray=tierInfo.trays[trayIndex];setSelectedShelf({shelf:shelfIndex+1,tier:tierInfo.tier,tray:tray.tray,status:tray.status,capacity:tray.capacity,itemCount:tray.itemCount,lastUpdated:tray.lastUpdated});};// Hàm kiểm tra một ô có phù hợp với bộ lọc hay không\nconst isItemMatchingFilters=(tierNumber,status)=>{const tierMatch=filters.tier==='all'||Number(filters.tier)===tierNumber;const statusMatch=filters.status==='all'||filters.status===status;return tierMatch&&statusMatch;};// Hàm kiểm tra một hàng (tier) có bất kỳ ô nào phù hợp với bộ lọc không\nconst hasTierMatchingItems=tier=>{return tier.trays.some(tray=>isItemMatchingFilters(tier.tier,tray.status));};const handleCloseDetail=()=>{setSelectedShelf(null);};return/*#__PURE__*/_jsxs(\"div\",{className:\"shelf-grid-wrapper\",children:[/*#__PURE__*/_jsx(StatusBar,{stats:stats,lastUpdated:lastUpdated}),/*#__PURE__*/_jsx(\"div\",{className:\"shelf-grid-container\",children:shelvesData.map((shelf,shelfIndex)=>/*#__PURE__*/_jsxs(\"div\",{className:\"shelf-grid\",children:[/*#__PURE__*/_jsxs(\"h3\",{children:[\"K\\u1EC7 \",shelf.shelf]}),shelf.tiers.map((group,groupIndex)=>/*#__PURE__*/_jsx(\"div\",{className:\"tier-row-group\",children:group.map(tier=>{const hasMatchingItems=hasTierMatchingItems(tier);return/*#__PURE__*/_jsxs(\"div\",{className:\"tier-row \".concat(hasMatchingItems?'has-matching-items':'no-matching-items'),children:[/*#__PURE__*/_jsxs(\"div\",{className:\"tier-label\",children:[\"T\\u1EA7ng \",tier.tier]}),/*#__PURE__*/_jsx(\"div\",{className:\"tray-container\",children:tier.trays.map((tray,trayIndex)=>{const isMatching=isItemMatchingFilters(tier.tier,tray.status);return/*#__PURE__*/_jsx(\"div\",{className:\"tray-cell \".concat(isMatching?'matching-filter':'not-matching-filter'),children:/*#__PURE__*/_jsx(ShelfItem,{tier:tier.tier,tray:tray.tray,status:tray.status,onClick:()=>handleTrayClick(shelfIndex,tier,trayIndex),isFiltered:isMatching})},\"tray-\".concat(tier.tier,\"-\").concat(tray.tray));})})]},\"tier-\".concat(tier.tier));})},\"tier-group-\".concat(groupIndex)))]},\"shelf-\".concat(shelf.shelf)))}),selectedShelf&&/*#__PURE__*/_jsx(ShelfDetail,{shelf:selectedShelf,onClose:handleCloseDetail})]});};export default ShelfGrid;","map":{"version":3,"names":["React","useState","useEffect","ShelfItem","ShelfDetail","StatusBar","FilterPanel","jsx","_jsx","jsxs","_jsxs","ShelfGrid","_ref","shelves","onShelfClick","NUM_SHELVES","NUM_TIERS_PER_SHELF","NUM_TRAYS_PER_TIER","selectedShelf","setSelectedShelf","stats","setStats","high","medium","empty","lastUpdated","setLastUpdated","Date","toISOString","shelvesData","setShelvesData","filters","setFilters","tier","status","calculateStatus","itemCount","capacity","percentage","initialData","Array","from","length","_","shelfIndex","tiers","groupIndex","groupedTiers","trays","trayIndex","Math","floor","random","tray","shelf","interval","setInterval","prevData","newData","JSON","parse","stringify","randomShelf","randomTierGroup","randomTierInGroup","randomTray","newItemCount","clearInterval","newStats","forEach","group","toLowerCase","handleTrayClick","tierInfo","isItemMatchingFilters","tierNumber","tierMatch","Number","statusMatch","hasTierMatchingItems","some","handleCloseDetail","className","children","map","hasMatchingItems","concat","isMatching","onClick","isFiltered","onClose"],"sources":["C:/Documents/warehouse-dashboard/src/components/ShelfGrid/ShelfGrid.js"],"sourcesContent":["// File: ShelfGrid.js\n// Mô tả: Component React hiển thị lưới các kệ hàng trong dashboard quản lý kho.\n// Chức năng: Hiển thị danh sách kệ hàng theo tầng và khay, cho phép chọn từng kệ để xem chi tiết.\nimport React, { useState, useEffect } from 'react';\nimport './ShelfGrid.css';\nimport ShelfItem from './ShelfItem';\nimport ShelfDetail from '../ShelfDetail/ShelfDetail';\nimport StatusBar from '../StatusBar/StatusBar';\nimport FilterPanel from '../FilterPanel/FilterPanel';\n\nconst ShelfGrid = ({ shelves, onShelfClick }) => {\n  const NUM_SHELVES = 4; // Số lượng kệ đồ\n  const NUM_TIERS_PER_SHELF = 4; // Số tầng mỗi kệ\n  const NUM_TRAYS_PER_TIER = 6; // Số ô mỗi tầng\n\n  const [selectedShelf, setSelectedShelf] = useState(null);\n  const [stats, setStats] = useState({ high: 0, medium: 0, empty: 0 });\n  const [lastUpdated, setLastUpdated] = useState(new Date().toISOString());\n  const [shelvesData, setShelvesData] = useState([]);\n  const [filters, setFilters] = useState({\n    tier: 'all',\n    status: 'all'\n  });\n\n  // Hàm tính toán trạng thái dựa trên số lượng vật phẩm và sức chứa\n  const calculateStatus = (itemCount, capacity) => {\n    const percentage = (itemCount / capacity) * 100;\n    if (percentage >= 80) return 'HIGH';\n    if (percentage >= 15) return 'MEDIUM';\n    if (percentage >=0) return 'EMPTY';\n  };\n\n  // Khởi tạo dữ liệu ban đầu và thiết lập interval cập nhật\n  useEffect(() => {\n    // Tạo dữ liệu mẫu ban đầu\n    const initialData = Array.from({ length: NUM_SHELVES }, (_, shelfIndex) => {\n      const tiers = Array.from({ length: NUM_TIERS_PER_SHELF / 2 }, (_, groupIndex) => {\n        const groupedTiers = [\n          { \n            tier: groupIndex * 2 + 1, \n            trays: Array.from({ length: NUM_TRAYS_PER_TIER }, (_, trayIndex) => {\n              const capacity = 100;\n              const itemCount = Math.floor(Math.random() * (capacity + 1));\n              return {\n                tray: trayIndex + 1,\n                status: calculateStatus(itemCount, capacity),\n                capacity,\n                itemCount,\n                lastUpdated: new Date().toISOString()\n              };\n            })\n          },\n          { \n            tier: groupIndex * 2 + 2, \n            trays: Array.from({ length: NUM_TRAYS_PER_TIER }, (_, trayIndex) => {\n              const capacity = 100;\n              const itemCount = Math.floor(Math.random() * (capacity + 1));\n              return {\n                tray: trayIndex + 1,\n                status: calculateStatus(itemCount, capacity),\n                capacity,\n                itemCount,\n                lastUpdated: new Date().toISOString()\n              };\n            })\n          }\n        ];\n        return groupedTiers;\n      });\n      return { shelf: shelfIndex + 1, tiers };\n    });\n\n    setShelvesData(initialData);\n\n    // Thiết lập interval để cập nhật ngẫu nhiên\n    const interval = setInterval(() => {\n      setShelvesData(prevData => {\n        const newData = JSON.parse(JSON.stringify(prevData));\n        \n        // Chọn ngẫu nhiên một ô để cập nhật\n        const randomShelf = Math.floor(Math.random() * NUM_SHELVES);\n        const randomTierGroup = Math.floor(Math.random() * (NUM_TIERS_PER_SHELF / 2));\n        const randomTierInGroup = Math.floor(Math.random() * 2);\n        const randomTray = Math.floor(Math.random() * NUM_TRAYS_PER_TIER);\n        \n        // Cập nhật thông tin của ô được chọn\n        const tray = newData[randomShelf].tiers[randomTierGroup][randomTierInGroup].trays[randomTray];\n        const newItemCount = Math.floor(Math.random() * (tray.capacity + 1));\n        tray.itemCount = newItemCount;\n        tray.status = calculateStatus(newItemCount, tray.capacity);\n        tray.lastUpdated = new Date().toISOString();\n        \n        return newData;\n      });\n      setLastUpdated(new Date().toISOString());\n    }, 3000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  // Tính toán thống kê mỗi khi dữ liệu thay đổi\n  useEffect(() => {\n    const newStats = { high: 0, medium: 0, empty: 0 };\n    \n    shelvesData.forEach(shelf => {\n      shelf.tiers.forEach(group => {\n        group.forEach(tier => {\n          tier.trays.forEach(tray => {\n            newStats[tray.status.toLowerCase()]++;\n          });\n        });\n      });\n    });\n    \n    setStats(newStats);\n  }, [shelvesData]);\n\n  const handleTrayClick = (shelfIndex, tierInfo, trayIndex) => {\n    // Thêm check để tránh click vào khu vực không hợp lệ\n    if (!tierInfo || !tierInfo.trays || !tierInfo.trays[trayIndex]) {\n      return;\n    }\n  \n    const tray = tierInfo.trays[trayIndex];\n    \n    setSelectedShelf({\n      shelf: shelfIndex + 1,\n      tier: tierInfo.tier,\n      tray: tray.tray,\n      status: tray.status,\n      capacity: tray.capacity,\n      itemCount: tray.itemCount,\n      lastUpdated: tray.lastUpdated\n    });\n  };\n\n  // Hàm kiểm tra một ô có phù hợp với bộ lọc hay không\n  const isItemMatchingFilters = (tierNumber, status) => {\n    const tierMatch = filters.tier === 'all' || Number(filters.tier) === tierNumber;\n    const statusMatch = filters.status === 'all' || filters.status === status;\n    return tierMatch && statusMatch;\n  };\n\n  // Hàm kiểm tra một hàng (tier) có bất kỳ ô nào phù hợp với bộ lọc không\n  const hasTierMatchingItems = (tier) => {\n    return tier.trays.some(tray => isItemMatchingFilters(tier.tier, tray.status));\n  };\n\n  const handleCloseDetail = () => {\n    setSelectedShelf(null);\n  };\n\n  return (\n    <div className=\"shelf-grid-wrapper\">\n      <StatusBar stats={stats} lastUpdated={lastUpdated} />\n      <div className=\"shelf-grid-container\">\n        {shelvesData.map((shelf, shelfIndex) => (\n          <div key={`shelf-${shelf.shelf}`} className=\"shelf-grid\">\n            <h3>Kệ {shelf.shelf}</h3>\n            {shelf.tiers.map((group, groupIndex) => (\n              <div key={`tier-group-${groupIndex}`} className=\"tier-row-group\">\n                {group.map((tier) => {\n                  const hasMatchingItems = hasTierMatchingItems(tier);\n                  return (\n                    <div \n                      key={`tier-${tier.tier}`} \n                      className={`tier-row ${hasMatchingItems ? 'has-matching-items' : 'no-matching-items'}`}\n                    >\n                      <div className=\"tier-label\">Tầng {tier.tier}</div>\n                      <div className=\"tray-container\">\n                        {tier.trays.map((tray, trayIndex) => {\n                          const isMatching = isItemMatchingFilters(tier.tier, tray.status);\n                          return (\n                            <div \n                              key={`tray-${tier.tier}-${tray.tray}`} \n                              className={`tray-cell ${isMatching ? 'matching-filter' : 'not-matching-filter'}`}\n                            >\n                              <ShelfItem\n                                tier={tier.tier}\n                                tray={tray.tray}\n                                status={tray.status}\n                                onClick={() => handleTrayClick(shelfIndex, tier, trayIndex)}\n                                isFiltered={isMatching}\n                              />\n                            </div>\n                          );\n                        })}\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n      {selectedShelf && (\n        <ShelfDetail\n          shelf={selectedShelf}\n          onClose={handleCloseDetail}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default ShelfGrid;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}