{"ast":null,"code":"var __extends = this && this.t || function () {\n  var extendStatics = function (t, r) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (t, r) {\n      t.__proto__ = r;\n    } || function (t, r) {\n      for (var e in r) if (Object.prototype.hasOwnProperty.call(r, e)) t[e] = r[e];\n    };\n    return extendStatics(t, r);\n  };\n  return function (t, r) {\n    if (typeof r !== \"function\" && r !== null) throw new TypeError(\"Class extends value \" + String(r) + \" is not a constructor or null\");\n    extendStatics(t, r);\n    function __() {\n      this.constructor = t;\n    }\n    t.prototype = r === null ? Object.create(r) : (__.prototype = r.prototype, new __());\n  };\n}();\nvar __generator = this && this.i || function (t, r) {\n  var e = {\n      label: 0,\n      sent: function () {\n        if (s[0] & 1) throw s[1];\n        return s[1];\n      },\n      trys: [],\n      ops: []\n    },\n    n,\n    i,\n    s,\n    a;\n  return a = {\n    next: verb(0),\n    throw: verb(1),\n    return: verb(2)\n  }, typeof Symbol === \"function\" && (a[Symbol.iterator] = function () {\n    return this;\n  }), a;\n  function verb(t) {\n    return function (r) {\n      return step([t, r]);\n    };\n  }\n  function step(a) {\n    if (n) throw new TypeError(\"Generator is already executing.\");\n    while (e) try {\n      if (n = 1, i && (s = a[0] & 2 ? i[\"return\"] : a[0] ? i[\"throw\"] || ((s = i[\"return\"]) && s.call(i), 0) : i.next) && !(s = s.call(i, a[1])).done) return s;\n      if (i = 0, s) a = [a[0] & 2, s.value];\n      switch (a[0]) {\n        case 0:\n        case 1:\n          s = a;\n          break;\n        case 4:\n          e.label++;\n          return {\n            value: a[1],\n            done: false\n          };\n        case 5:\n          e.label++;\n          i = a[1];\n          a = [0];\n          continue;\n        case 7:\n          a = e.ops.pop();\n          e.trys.pop();\n          continue;\n        default:\n          if (!(s = e.trys, s = s.length > 0 && s[s.length - 1]) && (a[0] === 6 || a[0] === 2)) {\n            e = 0;\n            continue;\n          }\n          if (a[0] === 3 && (!s || a[1] > s[0] && a[1] < s[3])) {\n            e.label = a[1];\n            break;\n          }\n          if (a[0] === 6 && e.label < s[1]) {\n            e.label = s[1];\n            s = a;\n            break;\n          }\n          if (s && e.label < s[2]) {\n            e.label = s[2];\n            e.ops.push(a);\n            break;\n          }\n          if (s[2]) e.ops.pop();\n          e.trys.pop();\n          continue;\n      }\n      a = r.call(t, e);\n    } catch (t) {\n      a = [6, t];\n      i = 0;\n    } finally {\n      n = s = 0;\n    }\n    if (a[0] & 5) throw a[1];\n    return {\n      value: a[0] ? a[1] : void 0,\n      done: true\n    };\n  }\n};\nimport { HashContainer, HashContainerIterator } from \"./Base\";\nimport { throwIteratorAccessError } from \"../../utils/throwError\";\nvar HashSetIterator = function (t) {\n  __extends(HashSetIterator, t);\n  function HashSetIterator(r, e, n, i) {\n    var s = t.call(this, r, e, i) || this;\n    s.container = n;\n    return s;\n  }\n  Object.defineProperty(HashSetIterator.prototype, \"pointer\", {\n    get: function () {\n      if (this.o === this.h) {\n        throwIteratorAccessError();\n      }\n      return this.o.u;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  HashSetIterator.prototype.copy = function () {\n    return new HashSetIterator(this.o, this.h, this.container, this.iteratorType);\n  };\n  return HashSetIterator;\n}(HashContainerIterator);\nvar HashSet = function (t) {\n  __extends(HashSet, t);\n  function HashSet(r) {\n    if (r === void 0) {\n      r = [];\n    }\n    var e = t.call(this) || this;\n    var n = e;\n    r.forEach(function (t) {\n      n.insert(t);\n    });\n    return e;\n  }\n  HashSet.prototype.begin = function () {\n    return new HashSetIterator(this.H, this.h, this);\n  };\n  HashSet.prototype.end = function () {\n    return new HashSetIterator(this.h, this.h, this);\n  };\n  HashSet.prototype.rBegin = function () {\n    return new HashSetIterator(this.l, this.h, this, 1);\n  };\n  HashSet.prototype.rEnd = function () {\n    return new HashSetIterator(this.h, this.h, this, 1);\n  };\n  HashSet.prototype.front = function () {\n    return this.H.u;\n  };\n  HashSet.prototype.back = function () {\n    return this.l.u;\n  };\n  HashSet.prototype.insert = function (t, r) {\n    return this.v(t, undefined, r);\n  };\n  HashSet.prototype.getElementByPos = function (t) {\n    if (t < 0 || t > this.M - 1) {\n      throw new RangeError();\n    }\n    var r = this.H;\n    while (t--) {\n      r = r.m;\n    }\n    return r.u;\n  };\n  HashSet.prototype.find = function (t, r) {\n    var e = this.g(t, r);\n    return new HashSetIterator(e, this.h, this);\n  };\n  HashSet.prototype.forEach = function (t) {\n    var r = 0;\n    var e = this.H;\n    while (e !== this.h) {\n      t(e.u, r++, this);\n      e = e.m;\n    }\n  };\n  HashSet.prototype[Symbol.iterator] = function () {\n    return function () {\n      var t;\n      return __generator(this, function (r) {\n        switch (r.label) {\n          case 0:\n            t = this.H;\n            r.label = 1;\n          case 1:\n            if (!(t !== this.h)) return [3, 3];\n            return [4, t.u];\n          case 2:\n            r.sent();\n            t = t.m;\n            return [3, 1];\n          case 3:\n            return [2];\n        }\n      });\n    }.bind(this)();\n  };\n  return HashSet;\n}(HashContainer);\nexport default HashSet;","map":{"version":3,"sources":["container/HashContainer/HashSet.js","../../src/container/HashContainer/HashSet.ts"],"names":["__extends","this","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","__generator","thisArg","body","_","label","sent","t","trys","ops","f","y","g","next","verb","throw","return","Symbol","iterator","n","v","step","op","done","value","pop","length","push","e","_this","get","enumerable","configurable","node","_a","HashContainer","HashContainerIterator","throwIteratorAccessError","RangeError","header","container","iteratorType","_super","HashSetIterator","_node","_header","_key","self","forEach","el","insert","HashSet","_head","_tail","key","isObject","_set","undefined","pos","_length","_next","_findElementNode","callback","index","bind"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { HashContainer, HashContainerIterator } from \"./Base\";\nimport $checkWithinAccessParams from \"../../utils/checkParams.macro\";\nimport { throwIteratorAccessError } from \"../../utils/throwError\";\nvar HashSetIterator = /** @class */ (function (_super) {\n    __extends(HashSetIterator, _super);\n    function HashSetIterator(node, header, container, iteratorType) {\n        var _this = _super.call(this, node, header, iteratorType) || this;\n        _this.container = container;\n        return _this;\n    }\n    Object.defineProperty(HashSetIterator.prototype, \"pointer\", {\n        get: function () {\n            if (this._node === this._header) {\n                throwIteratorAccessError();\n            }\n            return this._node._key;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    HashSetIterator.prototype.copy = function () {\n        return new HashSetIterator(this._node, this._header, this.container, this.iteratorType);\n    };\n    return HashSetIterator;\n}(HashContainerIterator));\nvar HashSet = /** @class */ (function (_super) {\n    __extends(HashSet, _super);\n    function HashSet(container) {\n        if (container === void 0) { container = []; }\n        var _this = _super.call(this) || this;\n        var self = _this;\n        container.forEach(function (el) {\n            self.insert(el);\n        });\n        return _this;\n    }\n    HashSet.prototype.begin = function () {\n        return new HashSetIterator(this._head, this._header, this);\n    };\n    HashSet.prototype.end = function () {\n        return new HashSetIterator(this._header, this._header, this);\n    };\n    HashSet.prototype.rBegin = function () {\n        return new HashSetIterator(this._tail, this._header, this, 1 /* IteratorType.REVERSE */);\n    };\n    HashSet.prototype.rEnd = function () {\n        return new HashSetIterator(this._header, this._header, this, 1 /* IteratorType.REVERSE */);\n    };\n    HashSet.prototype.front = function () {\n        return this._head._key;\n    };\n    HashSet.prototype.back = function () {\n        return this._tail._key;\n    };\n    /**\n     * @description Insert element to set.\n     * @param key - The key want to insert.\n     * @param isObject - Tell us if the type of inserted key is `object` to improve efficiency.<br/>\n     *                   If a `undefined` value is passed in, the type will be automatically judged.\n     * @returns The size of container after inserting.\n     */\n    HashSet.prototype.insert = function (key, isObject) {\n        return this._set(key, undefined, isObject);\n    };\n    HashSet.prototype.getElementByPos = function (pos) {\n        if (pos < 0 || pos > this._length - 1) {\n            throw new RangeError();\n        }\n        var node = this._head;\n        while (pos--) {\n            node = node._next;\n        }\n        return node._key;\n    };\n    /**\n     * @description Check key if exist in container.\n     * @param key - The element you want to search.\n     * @param isObject - Tell us if the type of inserted key is `object` to improve efficiency.<br/>\n     *                   If a `undefined` value is passed in, the type will be automatically judged.\n     * @returns An iterator pointing to the element if found, or super end if not found.\n     */\n    HashSet.prototype.find = function (key, isObject) {\n        var node = this._findElementNode(key, isObject);\n        return new HashSetIterator(node, this._header, this);\n    };\n    HashSet.prototype.forEach = function (callback) {\n        var index = 0;\n        var node = this._head;\n        while (node !== this._header) {\n            callback(node._key, index++, this);\n            node = node._next;\n        }\n    };\n    HashSet.prototype[Symbol.iterator] = function () {\n        return function () {\n            var node;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        node = this._head;\n                        _a.label = 1;\n                    case 1:\n                        if (!(node !== this._header)) return [3 /*break*/, 3];\n                        return [4 /*yield*/, node._key];\n                    case 2:\n                        _a.sent();\n                        node = node._next;\n                        return [3 /*break*/, 1];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        }.bind(this)();\n    };\n    return HashSet;\n}(HashContainer));\nexport default HashSet;\n","import { initContainer, IteratorType } from '@/container/ContainerBase';\nimport { HashContainer, HashContainerIterator, HashLinkNode } from '@/container/HashContainer/Base';\nimport $checkWithinAccessParams from '@/utils/checkParams.macro';\nimport { throwIteratorAccessError } from '@/utils/throwError';\n\nclass HashSetIterator<K> extends HashContainerIterator<K, undefined> {\n  readonly container: HashSet<K>;\n  constructor(\n    node: HashLinkNode<K, undefined>,\n    header: HashLinkNode<K, undefined>,\n    container: HashSet<K>,\n    iteratorType?: IteratorType\n  ) {\n    super(node, header, iteratorType);\n    this.container = container;\n  }\n  get pointer() {\n    if (this._node === this._header) {\n      throwIteratorAccessError();\n    }\n    return this._node._key;\n  }\n  copy() {\n    return new HashSetIterator<K>(this._node, this._header, this.container, this.iteratorType);\n  }\n  // @ts-ignore\n  equals(iter: HashSetIterator<K>): boolean;\n}\n\nexport type { HashSetIterator };\n\nclass HashSet<K> extends HashContainer<K, undefined> {\n  constructor(container: initContainer<K> = []) {\n    super();\n    const self = this;\n    container.forEach(function (el) {\n      self.insert(el);\n    });\n  }\n  begin() {\n    return new HashSetIterator<K>(this._head, this._header, this);\n  }\n  end() {\n    return new HashSetIterator<K>(this._header, this._header, this);\n  }\n  rBegin() {\n    return new HashSetIterator<K>(this._tail, this._header, this, IteratorType.REVERSE);\n  }\n  rEnd() {\n    return new HashSetIterator<K>(this._header, this._header, this, IteratorType.REVERSE);\n  }\n  front(): K | undefined {\n    return this._head._key;\n  }\n  back(): K | undefined {\n    return this._tail._key;\n  }\n  /**\n   * @description Insert element to set.\n   * @param key - The key want to insert.\n   * @param isObject - Tell us if the type of inserted key is `object` to improve efficiency.<br/>\n   *                   If a `undefined` value is passed in, the type will be automatically judged.\n   * @returns The size of container after inserting.\n   */\n  insert(key: K, isObject?: boolean) {\n    return this._set(key, undefined, isObject);\n  }\n  getElementByPos(pos: number) {\n    $checkWithinAccessParams!(pos, 0, this._length - 1);\n    let node = this._head;\n    while (pos--) {\n      node = node._next;\n    }\n    return node._key;\n  }\n  /**\n   * @description Check key if exist in container.\n   * @param key - The element you want to search.\n   * @param isObject - Tell us if the type of inserted key is `object` to improve efficiency.<br/>\n   *                   If a `undefined` value is passed in, the type will be automatically judged.\n   * @returns An iterator pointing to the element if found, or super end if not found.\n   */\n  find(key: K, isObject?: boolean) {\n    const node = this._findElementNode(key, isObject);\n    return new HashSetIterator<K>(node, this._header, this);\n  }\n  forEach(callback: (element: K, index: number, container: HashSet<K>) => void) {\n    let index = 0;\n    let node = this._head;\n    while (node !== this._header) {\n      callback(node._key, index++, this);\n      node = node._next;\n    }\n  }\n  [Symbol.iterator]() {\n    return function * (this: HashSet<K>) {\n      let node = this._head;\n      while (node !== this._header) {\n        yield node._key;\n        node = node._next;\n      }\n    }.bind(this)();\n  }\n}\n\nexport default HashSet;\n"]},"metadata":{},"sourceType":"module"}