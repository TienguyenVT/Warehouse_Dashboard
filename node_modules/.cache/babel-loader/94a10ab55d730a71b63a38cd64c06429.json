{"ast":null,"code":"var _jsxFileName = \"C:\\\\Documents\\\\warehouse-dashboard\\\\src\\\\components\\\\ShelfGrid\\\\ShelfGrid.js\",\n  _s = $RefreshSig$();\n// File: ShelfGrid.js\n// Mô tả: Component React hiển thị lưới các kệ hàng trong dashboard quản lý kho.\n// Chức năng: Hiển thị danh sách kệ hàng theo tầng và khay, cho phép chọn từng kệ để xem chi tiết.\nimport React, { useState, useEffect } from 'react';\nimport './ShelfGrid.css';\nimport ShelfItem from './ShelfItem';\nimport ShelfDetail from '../ShelfDetail/ShelfDetail';\nimport StatusBar from '../StatusBar/StatusBar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ShelfGrid = ({\n  shelves,\n  onShelfClick\n}) => {\n  _s();\n  const NUM_SHELVES = 4; // Số lượng kệ đồ\n  const NUM_TIERS_PER_SHELF = 4; // Số tầng mỗi kệ\n  const NUM_TRAYS_PER_TIER = 6; // Số ô mỗi tầng\n\n  const [selectedShelf, setSelectedShelf] = useState(null);\n  const [stats, setStats] = useState({\n    high: 0,\n    medium: 0,\n    empty: 0\n  });\n  const [lastUpdated, setLastUpdated] = useState(new Date().toISOString());\n  const [shelvesData, setShelvesData] = useState([]);\n\n  // Hàm tính toán trạng thái dựa trên số lượng vật phẩm và sức chứa\n  const calculateStatus = (itemCount, capacity) => {\n    const percentage = itemCount / capacity * 100;\n    if (percentage >= 80) return 'HIGH';\n    if (percentage >= 15) return 'MEDIUM';\n    if (percentage >= 0) return 'EMPTY';\n  };\n\n  // Khởi tạo dữ liệu ban đầu và thiết lập interval cập nhật\n  useEffect(() => {\n    // Tạo dữ liệu mẫu ban đầu\n    const initialData = Array.from({\n      length: NUM_SHELVES\n    }, (_, shelfIndex) => {\n      const tiers = Array.from({\n        length: NUM_TIERS_PER_SHELF / 2\n      }, (_, groupIndex) => {\n        const groupedTiers = [{\n          tier: groupIndex * 2 + 1,\n          trays: Array.from({\n            length: NUM_TRAYS_PER_TIER\n          }, (_, trayIndex) => {\n            const capacity = 100;\n            const itemCount = Math.floor(Math.random() * (capacity + 1)); // Số lượng ngẫu nhiên từ 0 đến capacity\n            return {\n              tray: trayIndex + 1,\n              status: calculateStatus(itemCount, capacity),\n              capacity,\n              itemCount,\n              lastUpdated: new Date().toISOString()\n            };\n          })\n        }, {\n          tier: groupIndex * 2 + 2,\n          trays: Array.from({\n            length: NUM_TRAYS_PER_TIER\n          }, (_, trayIndex) => {\n            const capacity = 100;\n            const itemCount = Math.floor(Math.random() * (capacity + 1));\n            return {\n              tray: trayIndex + 1,\n              status: calculateStatus(itemCount, capacity),\n              capacity,\n              itemCount,\n              lastUpdated: new Date().toISOString()\n            };\n          })\n        }];\n        return groupedTiers;\n      });\n      return {\n        shelf: shelfIndex + 1,\n        tiers\n      };\n    });\n    setShelvesData(initialData);\n\n    // Thiết lập interval để cập nhật ngẫu nhiên\n    const interval = setInterval(() => {\n      setShelvesData(prevData => {\n        const newData = JSON.parse(JSON.stringify(prevData));\n\n        // Chọn ngẫu nhiên một ô để cập nhật\n        const randomShelf = Math.floor(Math.random() * NUM_SHELVES);\n        const randomTierGroup = Math.floor(Math.random() * (NUM_TIERS_PER_SHELF / 2));\n        const randomTierInGroup = Math.floor(Math.random() * 2);\n        const randomTray = Math.floor(Math.random() * NUM_TRAYS_PER_TIER);\n\n        // Cập nhật thông tin của ô được chọn\n        const tray = newData[randomShelf].tiers[randomTierGroup][randomTierInGroup].trays[randomTray];\n        const newItemCount = Math.floor(Math.random() * (tray.capacity + 1));\n        tray.itemCount = newItemCount;\n        tray.status = calculateStatus(newItemCount, tray.capacity);\n        tray.lastUpdated = new Date().toISOString();\n        return newData;\n      });\n      setLastUpdated(new Date().toISOString());\n    }, 3000); // Cập nhật mỗi 3 giây\n\n    return () => clearInterval(interval);\n  }, []);\n\n  // Tính toán thống kê mỗi khi dữ liệu thay đổi\n  useEffect(() => {\n    const newStats = {\n      high: 0,\n      medium: 0,\n      empty: 0\n    };\n    shelvesData.forEach(shelf => {\n      shelf.tiers.forEach(group => {\n        group.forEach(tier => {\n          tier.trays.forEach(tray => {\n            newStats[tray.status.toLowerCase()]++;\n          });\n        });\n      });\n    });\n    setStats(newStats);\n  }, [shelvesData]);\n  const handleTrayClick = (shelfIndex, groupIndex, trayIndex) => {\n    // groupIndex là index của nhóm 2 tầng (0 = tầng 1-2, 1 = tầng 3-4)\n    // Xác định tier trong nhóm dựa vào vị trí tầng (0 hoặc 1)\n    const tierGroup = shelvesData[shelfIndex].tiers[Math.floor(groupIndex / 2)];\n    const tier = tierGroup[groupIndex % 2];\n    const tray = tier.trays[trayIndex];\n    setSelectedShelf({\n      shelf: shelfIndex + 1,\n      tier: tier.tier,\n      tray: tray.tray,\n      status: tray.status,\n      capacity: tray.capacity,\n      itemCount: tray.itemCount,\n      lastUpdated: tray.lastUpdated\n    });\n  };\n  const handleCloseDetail = () => {\n    setSelectedShelf(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"shelf-grid-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(StatusBar, {\n      stats: stats,\n      lastUpdated: lastUpdated\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"shelf-grid-container\",\n      children: shelvesData.map((shelf, shelfIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"shelf-grid\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"K\\u1EC7 \", shelf.shelf]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 13\n        }, this), shelf.tiers.map((group, groupIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tier-row-group\",\n          children: group.map((tier, tierIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tier-row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"tier-label\",\n              children: [\"T\\u1EA7ng \", tier.tier]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"tray-container\",\n              children: tier.trays.map((tray, trayIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"tray-cell\",\n                children: /*#__PURE__*/_jsxDEV(ShelfItem, {\n                  tier: tier.tier,\n                  tray: tray.tray,\n                  status: tray.status,\n                  onClick: () => handleTrayClick(shelfIndex, groupIndex, trayIndex)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 148,\n                  columnNumber: 27\n                }, this)\n              }, `tray-${tier.tier}-${tray.tray}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 147,\n                columnNumber: 25\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 21\n            }, this)]\n          }, `tier-${tier.tier}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 19\n          }, this))\n        }, `tier-group-${groupIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 15\n        }, this))]\n      }, `shelf-${shelf.shelf}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), selectedShelf && /*#__PURE__*/_jsxDEV(ShelfDetail, {\n      shelf: selectedShelf,\n      onClose: handleCloseDetail\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n};\n_s(ShelfGrid, \"lOc8NjknENXGKPvSsU5RKcFzL0g=\");\n_c = ShelfGrid;\nexport default ShelfGrid;\nvar _c;\n$RefreshReg$(_c, \"ShelfGrid\");","map":{"version":3,"names":["React","useState","useEffect","ShelfItem","ShelfDetail","StatusBar","jsxDEV","_jsxDEV","ShelfGrid","shelves","onShelfClick","_s","NUM_SHELVES","NUM_TIERS_PER_SHELF","NUM_TRAYS_PER_TIER","selectedShelf","setSelectedShelf","stats","setStats","high","medium","empty","lastUpdated","setLastUpdated","Date","toISOString","shelvesData","setShelvesData","calculateStatus","itemCount","capacity","percentage","initialData","Array","from","length","_","shelfIndex","tiers","groupIndex","groupedTiers","tier","trays","trayIndex","Math","floor","random","tray","status","shelf","interval","setInterval","prevData","newData","JSON","parse","stringify","randomShelf","randomTierGroup","randomTierInGroup","randomTray","newItemCount","clearInterval","newStats","forEach","group","toLowerCase","handleTrayClick","tierGroup","handleCloseDetail","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","tierIndex","onClick","onClose","_c","$RefreshReg$"],"sources":["C:/Documents/warehouse-dashboard/src/components/ShelfGrid/ShelfGrid.js"],"sourcesContent":["// File: ShelfGrid.js\r\n// Mô tả: Component React hiển thị lưới các kệ hàng trong dashboard quản lý kho.\r\n// Chức năng: Hiển thị danh sách kệ hàng theo tầng và khay, cho phép chọn từng kệ để xem chi tiết.\r\nimport React, { useState, useEffect } from 'react';\r\nimport './ShelfGrid.css';\r\nimport ShelfItem from './ShelfItem';\r\nimport ShelfDetail from '../ShelfDetail/ShelfDetail';\r\nimport StatusBar from '../StatusBar/StatusBar';\r\n\r\nconst ShelfGrid = ({ shelves, onShelfClick }) => {\r\n  const NUM_SHELVES = 4; // Số lượng kệ đồ\r\n  const NUM_TIERS_PER_SHELF = 4; // Số tầng mỗi kệ\r\n  const NUM_TRAYS_PER_TIER = 6; // Số ô mỗi tầng\r\n\r\n  const [selectedShelf, setSelectedShelf] = useState(null);\r\n  const [stats, setStats] = useState({ high: 0, medium: 0, empty: 0 });\r\n  const [lastUpdated, setLastUpdated] = useState(new Date().toISOString());\r\n  const [shelvesData, setShelvesData] = useState([]);\r\n\r\n  // Hàm tính toán trạng thái dựa trên số lượng vật phẩm và sức chứa\r\n  const calculateStatus = (itemCount, capacity) => {\r\n    const percentage = (itemCount / capacity) * 100;\r\n    if (percentage >= 80) return 'HIGH';\r\n    if (percentage >= 15) return 'MEDIUM';\r\n    if (percentage >=0) return 'EMPTY';\r\n  };\r\n\r\n  // Khởi tạo dữ liệu ban đầu và thiết lập interval cập nhật\r\n  useEffect(() => {\r\n    // Tạo dữ liệu mẫu ban đầu\r\n    const initialData = Array.from({ length: NUM_SHELVES }, (_, shelfIndex) => {\r\n      const tiers = Array.from({ length: NUM_TIERS_PER_SHELF / 2 }, (_, groupIndex) => {\r\n        const groupedTiers = [\r\n          { \r\n            tier: groupIndex * 2 + 1, \r\n            trays: Array.from({ length: NUM_TRAYS_PER_TIER }, (_, trayIndex) => {\r\n              const capacity = 100;\r\n              const itemCount = Math.floor(Math.random() * (capacity + 1)); // Số lượng ngẫu nhiên từ 0 đến capacity\r\n              return {\r\n                tray: trayIndex + 1,\r\n                status: calculateStatus(itemCount, capacity),\r\n                capacity,\r\n                itemCount,\r\n                lastUpdated: new Date().toISOString()\r\n              };\r\n            })\r\n          },\r\n          { \r\n            tier: groupIndex * 2 + 2, \r\n            trays: Array.from({ length: NUM_TRAYS_PER_TIER }, (_, trayIndex) => {\r\n              const capacity = 100;\r\n              const itemCount = Math.floor(Math.random() * (capacity + 1));\r\n              return {\r\n                tray: trayIndex + 1,\r\n                status: calculateStatus(itemCount, capacity),\r\n                capacity,\r\n                itemCount,\r\n                lastUpdated: new Date().toISOString()\r\n              };\r\n            })\r\n          }\r\n        ];\r\n        return groupedTiers;\r\n      });\r\n      return { shelf: shelfIndex + 1, tiers };\r\n    });\r\n\r\n    setShelvesData(initialData);\r\n\r\n    // Thiết lập interval để cập nhật ngẫu nhiên\r\n    const interval = setInterval(() => {\r\n      setShelvesData(prevData => {\r\n        const newData = JSON.parse(JSON.stringify(prevData));\r\n        \r\n        // Chọn ngẫu nhiên một ô để cập nhật\r\n        const randomShelf = Math.floor(Math.random() * NUM_SHELVES);\r\n        const randomTierGroup = Math.floor(Math.random() * (NUM_TIERS_PER_SHELF / 2));\r\n        const randomTierInGroup = Math.floor(Math.random() * 2);\r\n        const randomTray = Math.floor(Math.random() * NUM_TRAYS_PER_TIER);\r\n        \r\n        // Cập nhật thông tin của ô được chọn\r\n        const tray = newData[randomShelf].tiers[randomTierGroup][randomTierInGroup].trays[randomTray];\r\n        const newItemCount = Math.floor(Math.random() * (tray.capacity + 1));\r\n        tray.itemCount = newItemCount;\r\n        tray.status = calculateStatus(newItemCount, tray.capacity);\r\n        tray.lastUpdated = new Date().toISOString();\r\n        \r\n        return newData;\r\n      });\r\n      setLastUpdated(new Date().toISOString());\r\n    }, 3000); // Cập nhật mỗi 3 giây\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  // Tính toán thống kê mỗi khi dữ liệu thay đổi\r\n  useEffect(() => {\r\n    const newStats = { high: 0, medium: 0, empty: 0 };\r\n    \r\n    shelvesData.forEach(shelf => {\r\n      shelf.tiers.forEach(group => {\r\n        group.forEach(tier => {\r\n          tier.trays.forEach(tray => {\r\n            newStats[tray.status.toLowerCase()]++;\r\n          });\r\n        });\r\n      });\r\n    });\r\n    \r\n    setStats(newStats);\r\n  }, [shelvesData]);  const handleTrayClick = (shelfIndex, groupIndex, trayIndex) => {\r\n    // groupIndex là index của nhóm 2 tầng (0 = tầng 1-2, 1 = tầng 3-4)\r\n    // Xác định tier trong nhóm dựa vào vị trí tầng (0 hoặc 1)\r\n    const tierGroup = shelvesData[shelfIndex].tiers[Math.floor(groupIndex / 2)];\r\n    const tier = tierGroup[groupIndex % 2];\r\n    const tray = tier.trays[trayIndex];\r\n    \r\n    setSelectedShelf({\r\n      shelf: shelfIndex + 1,\r\n      tier: tier.tier,\r\n      tray: tray.tray,\r\n      status: tray.status,\r\n      capacity: tray.capacity,\r\n      itemCount: tray.itemCount,\r\n      lastUpdated: tray.lastUpdated\r\n    });\r\n  };\r\n\r\n  const handleCloseDetail = () => {\r\n    setSelectedShelf(null);\r\n  };\r\n\r\n  return (\r\n    <div className=\"shelf-grid-wrapper\">\r\n      <StatusBar stats={stats} lastUpdated={lastUpdated} />\r\n      <div className=\"shelf-grid-container\">\r\n        {shelvesData.map((shelf, shelfIndex) => (\r\n          <div key={`shelf-${shelf.shelf}`} className=\"shelf-grid\">\r\n            <h3>Kệ {shelf.shelf}</h3>\r\n            {shelf.tiers.map((group, groupIndex) => (\r\n              <div key={`tier-group-${groupIndex}`} className=\"tier-row-group\">\r\n                {group.map((tier, tierIndex) => (\r\n                  <div key={`tier-${tier.tier}`} className=\"tier-row\">\r\n                    <div className=\"tier-label\">Tầng {tier.tier}</div>\r\n                    <div className=\"tray-container\">\r\n                      {tier.trays.map((tray, trayIndex) => (\r\n                        <div key={`tray-${tier.tier}-${tray.tray}`} className=\"tray-cell\">\r\n                          <ShelfItem\r\n                            tier={tier.tier}\r\n                            tray={tray.tray}\r\n                            status={tray.status}\r\n                            onClick={() => handleTrayClick(shelfIndex, groupIndex, trayIndex)}\r\n                          />\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      {selectedShelf && (\r\n        <ShelfDetail\r\n          shelf={selectedShelf}\r\n          onClose={handleCloseDetail}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ShelfGrid;"],"mappings":";;AAAA;AACA;AACA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,iBAAiB;AACxB,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,WAAW,MAAM,4BAA4B;AACpD,OAAOC,SAAS,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,SAAS,GAAGA,CAAC;EAAEC,OAAO;EAAEC;AAAa,CAAC,KAAK;EAAAC,EAAA;EAC/C,MAAMC,WAAW,GAAG,CAAC,CAAC,CAAC;EACvB,MAAMC,mBAAmB,GAAG,CAAC,CAAC,CAAC;EAC/B,MAAMC,kBAAkB,GAAG,CAAC,CAAC,CAAC;;EAE9B,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACgB,KAAK,EAAEC,QAAQ,CAAC,GAAGjB,QAAQ,CAAC;IAAEkB,IAAI,EAAE,CAAC;IAAEC,MAAM,EAAE,CAAC;IAAEC,KAAK,EAAE;EAAE,CAAC,CAAC;EACpE,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGtB,QAAQ,CAAC,IAAIuB,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAAC;EACxE,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAG1B,QAAQ,CAAC,EAAE,CAAC;;EAElD;EACA,MAAM2B,eAAe,GAAGA,CAACC,SAAS,EAAEC,QAAQ,KAAK;IAC/C,MAAMC,UAAU,GAAIF,SAAS,GAAGC,QAAQ,GAAI,GAAG;IAC/C,IAAIC,UAAU,IAAI,EAAE,EAAE,OAAO,MAAM;IACnC,IAAIA,UAAU,IAAI,EAAE,EAAE,OAAO,QAAQ;IACrC,IAAIA,UAAU,IAAG,CAAC,EAAE,OAAO,OAAO;EACpC,CAAC;;EAED;EACA7B,SAAS,CAAC,MAAM;IACd;IACA,MAAM8B,WAAW,GAAGC,KAAK,CAACC,IAAI,CAAC;MAAEC,MAAM,EAAEvB;IAAY,CAAC,EAAE,CAACwB,CAAC,EAAEC,UAAU,KAAK;MACzE,MAAMC,KAAK,GAAGL,KAAK,CAACC,IAAI,CAAC;QAAEC,MAAM,EAAEtB,mBAAmB,GAAG;MAAE,CAAC,EAAE,CAACuB,CAAC,EAAEG,UAAU,KAAK;QAC/E,MAAMC,YAAY,GAAG,CACnB;UACEC,IAAI,EAAEF,UAAU,GAAG,CAAC,GAAG,CAAC;UACxBG,KAAK,EAAET,KAAK,CAACC,IAAI,CAAC;YAAEC,MAAM,EAAErB;UAAmB,CAAC,EAAE,CAACsB,CAAC,EAAEO,SAAS,KAAK;YAClE,MAAMb,QAAQ,GAAG,GAAG;YACpB,MAAMD,SAAS,GAAGe,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIhB,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YAC9D,OAAO;cACLiB,IAAI,EAAEJ,SAAS,GAAG,CAAC;cACnBK,MAAM,EAAEpB,eAAe,CAACC,SAAS,EAAEC,QAAQ,CAAC;cAC5CA,QAAQ;cACRD,SAAS;cACTP,WAAW,EAAE,IAAIE,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;YACtC,CAAC;UACH,CAAC;QACH,CAAC,EACD;UACEgB,IAAI,EAAEF,UAAU,GAAG,CAAC,GAAG,CAAC;UACxBG,KAAK,EAAET,KAAK,CAACC,IAAI,CAAC;YAAEC,MAAM,EAAErB;UAAmB,CAAC,EAAE,CAACsB,CAAC,EAAEO,SAAS,KAAK;YAClE,MAAMb,QAAQ,GAAG,GAAG;YACpB,MAAMD,SAAS,GAAGe,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIhB,QAAQ,GAAG,CAAC,CAAC,CAAC;YAC5D,OAAO;cACLiB,IAAI,EAAEJ,SAAS,GAAG,CAAC;cACnBK,MAAM,EAAEpB,eAAe,CAACC,SAAS,EAAEC,QAAQ,CAAC;cAC5CA,QAAQ;cACRD,SAAS;cACTP,WAAW,EAAE,IAAIE,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;YACtC,CAAC;UACH,CAAC;QACH,CAAC,CACF;QACD,OAAOe,YAAY;MACrB,CAAC,CAAC;MACF,OAAO;QAAES,KAAK,EAAEZ,UAAU,GAAG,CAAC;QAAEC;MAAM,CAAC;IACzC,CAAC,CAAC;IAEFX,cAAc,CAACK,WAAW,CAAC;;IAE3B;IACA,MAAMkB,QAAQ,GAAGC,WAAW,CAAC,MAAM;MACjCxB,cAAc,CAACyB,QAAQ,IAAI;QACzB,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACJ,QAAQ,CAAC,CAAC;;QAEpD;QACA,MAAMK,WAAW,GAAGb,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGlC,WAAW,CAAC;QAC3D,MAAM8C,eAAe,GAAGd,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIjC,mBAAmB,GAAG,CAAC,CAAC,CAAC;QAC7E,MAAM8C,iBAAiB,GAAGf,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;QACvD,MAAMc,UAAU,GAAGhB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGhC,kBAAkB,CAAC;;QAEjE;QACA,MAAMiC,IAAI,GAAGM,OAAO,CAACI,WAAW,CAAC,CAACnB,KAAK,CAACoB,eAAe,CAAC,CAACC,iBAAiB,CAAC,CAACjB,KAAK,CAACkB,UAAU,CAAC;QAC7F,MAAMC,YAAY,GAAGjB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIC,IAAI,CAACjB,QAAQ,GAAG,CAAC,CAAC,CAAC;QACpEiB,IAAI,CAAClB,SAAS,GAAGgC,YAAY;QAC7Bd,IAAI,CAACC,MAAM,GAAGpB,eAAe,CAACiC,YAAY,EAAEd,IAAI,CAACjB,QAAQ,CAAC;QAC1DiB,IAAI,CAACzB,WAAW,GAAG,IAAIE,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;QAE3C,OAAO4B,OAAO;MAChB,CAAC,CAAC;MACF9B,cAAc,CAAC,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAAC;IAC1C,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;;IAEV,OAAO,MAAMqC,aAAa,CAACZ,QAAQ,CAAC;EACtC,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAhD,SAAS,CAAC,MAAM;IACd,MAAM6D,QAAQ,GAAG;MAAE5C,IAAI,EAAE,CAAC;MAAEC,MAAM,EAAE,CAAC;MAAEC,KAAK,EAAE;IAAE,CAAC;IAEjDK,WAAW,CAACsC,OAAO,CAACf,KAAK,IAAI;MAC3BA,KAAK,CAACX,KAAK,CAAC0B,OAAO,CAACC,KAAK,IAAI;QAC3BA,KAAK,CAACD,OAAO,CAACvB,IAAI,IAAI;UACpBA,IAAI,CAACC,KAAK,CAACsB,OAAO,CAACjB,IAAI,IAAI;YACzBgB,QAAQ,CAAChB,IAAI,CAACC,MAAM,CAACkB,WAAW,CAAC,CAAC,CAAC,EAAE;UACvC,CAAC,CAAC;QACJ,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC,CAAC;IAEFhD,QAAQ,CAAC6C,QAAQ,CAAC;EACpB,CAAC,EAAE,CAACrC,WAAW,CAAC,CAAC;EAAG,MAAMyC,eAAe,GAAGA,CAAC9B,UAAU,EAAEE,UAAU,EAAEI,SAAS,KAAK;IACjF;IACA;IACA,MAAMyB,SAAS,GAAG1C,WAAW,CAACW,UAAU,CAAC,CAACC,KAAK,CAACM,IAAI,CAACC,KAAK,CAACN,UAAU,GAAG,CAAC,CAAC,CAAC;IAC3E,MAAME,IAAI,GAAG2B,SAAS,CAAC7B,UAAU,GAAG,CAAC,CAAC;IACtC,MAAMQ,IAAI,GAAGN,IAAI,CAACC,KAAK,CAACC,SAAS,CAAC;IAElC3B,gBAAgB,CAAC;MACfiC,KAAK,EAAEZ,UAAU,GAAG,CAAC;MACrBI,IAAI,EAAEA,IAAI,CAACA,IAAI;MACfM,IAAI,EAAEA,IAAI,CAACA,IAAI;MACfC,MAAM,EAAED,IAAI,CAACC,MAAM;MACnBlB,QAAQ,EAAEiB,IAAI,CAACjB,QAAQ;MACvBD,SAAS,EAAEkB,IAAI,CAAClB,SAAS;MACzBP,WAAW,EAAEyB,IAAI,CAACzB;IACpB,CAAC,CAAC;EACJ,CAAC;EAED,MAAM+C,iBAAiB,GAAGA,CAAA,KAAM;IAC9BrD,gBAAgB,CAAC,IAAI,CAAC;EACxB,CAAC;EAED,oBACET,OAAA;IAAK+D,SAAS,EAAC,oBAAoB;IAAAC,QAAA,gBACjChE,OAAA,CAACF,SAAS;MAACY,KAAK,EAAEA,KAAM;MAACK,WAAW,EAAEA;IAAY;MAAAkD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACrDpE,OAAA;MAAK+D,SAAS,EAAC,sBAAsB;MAAAC,QAAA,EAClC7C,WAAW,CAACkD,GAAG,CAAC,CAAC3B,KAAK,EAAEZ,UAAU,kBACjC9B,OAAA;QAAkC+D,SAAS,EAAC,YAAY;QAAAC,QAAA,gBACtDhE,OAAA;UAAAgE,QAAA,GAAI,UAAG,EAACtB,KAAK,CAACA,KAAK;QAAA;UAAAuB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,EACxB1B,KAAK,CAACX,KAAK,CAACsC,GAAG,CAAC,CAACX,KAAK,EAAE1B,UAAU,kBACjChC,OAAA;UAAsC+D,SAAS,EAAC,gBAAgB;UAAAC,QAAA,EAC7DN,KAAK,CAACW,GAAG,CAAC,CAACnC,IAAI,EAAEoC,SAAS,kBACzBtE,OAAA;YAA+B+D,SAAS,EAAC,UAAU;YAAAC,QAAA,gBACjDhE,OAAA;cAAK+D,SAAS,EAAC,YAAY;cAAAC,QAAA,GAAC,YAAK,EAAC9B,IAAI,CAACA,IAAI;YAAA;cAAA+B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,eAClDpE,OAAA;cAAK+D,SAAS,EAAC,gBAAgB;cAAAC,QAAA,EAC5B9B,IAAI,CAACC,KAAK,CAACkC,GAAG,CAAC,CAAC7B,IAAI,EAAEJ,SAAS,kBAC9BpC,OAAA;gBAA4C+D,SAAS,EAAC,WAAW;gBAAAC,QAAA,eAC/DhE,OAAA,CAACJ,SAAS;kBACRsC,IAAI,EAAEA,IAAI,CAACA,IAAK;kBAChBM,IAAI,EAAEA,IAAI,CAACA,IAAK;kBAChBC,MAAM,EAAED,IAAI,CAACC,MAAO;kBACpB8B,OAAO,EAAEA,CAAA,KAAMX,eAAe,CAAC9B,UAAU,EAAEE,UAAU,EAAEI,SAAS;gBAAE;kBAAA6B,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACnE;cAAC,GANM,QAAQlC,IAAI,CAACA,IAAI,IAAIM,IAAI,CAACA,IAAI,EAAE;gBAAAyB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAOrC,CACN;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACC,CAAC;UAAA,GAbE,QAAQlC,IAAI,CAACA,IAAI,EAAE;YAAA+B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAcxB,CACN;QAAC,GAjBM,cAAcpC,UAAU,EAAE;UAAAiC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAkB/B,CACN,CAAC;MAAA,GAtBM,SAAS1B,KAAK,CAACA,KAAK,EAAE;QAAAuB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAuB3B,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,EACL5D,aAAa,iBACZR,OAAA,CAACH,WAAW;MACV6C,KAAK,EAAElC,aAAc;MACrBgE,OAAO,EAAEV;IAAkB;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5B,CACF;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAChE,EAAA,CAlKIH,SAAS;AAAAwE,EAAA,GAATxE,SAAS;AAoKf,eAAeA,SAAS;AAAC,IAAAwE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}