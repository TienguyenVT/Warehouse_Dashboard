{"ast":null,"code":"// Giả lập một backend service\nconst users = [];\n\n// Mock credentials\nconst MOCK_USERS = [{\n  username: 'admin',\n  password: 'admin123',\n  role: 'admin'\n}, {\n  username: 'user',\n  password: 'user123',\n  role: 'user'\n}];\nexport const authService = {\n  register: async userData => {\n    // Kiểm tra xem username hoặc email đã tồn tại chưa\n    const existingUser = users.find(user => user.username === userData.username || user.email === userData.email);\n    if (existingUser) {\n      throw new Error('Tên người dùng hoặc email đã tồn tại');\n    }\n\n    // Trong thực tế, mật khẩu nên được hash trước khi lưu\n    const newUser = {\n      ...userData,\n      id: Date.now().toString(),\n      createdAt: new Date().toISOString()\n    };\n    users.push(newUser);\n    return {\n      success: true,\n      user: {\n        ...newUser,\n        password: undefined\n      }\n    };\n  },\n  login: async (username, password) => {\n    // Trong thực tế, cần kiểm tra hash của mật khẩu\n    const user = users.find(u => u.username === username && u.password === password);\n    if (!user) {\n      throw new Error('Tên đăng nhập hoặc mật khẩu không đúng');\n    }\n    return {\n      success: true,\n      user: {\n        ...user,\n        password: undefined\n      },\n      token: 'fake-jwt-token' // Trong thực tế, đây sẽ là JWT token thật\n    };\n  }\n};\n\n// Mock login function\nexport const loginUser = async (username, password) => {\n  // Giả lập độ trễ của network request\n  await new Promise(resolve => setTimeout(resolve, 500));\n  const user = MOCK_USERS.find(u => u.username === username && u.password === password);\n  if (user) {\n    // Tạo mock token\n    const token = btoa(JSON.stringify({\n      userId: username,\n      timestamp: Date.now()\n    }));\n    return {\n      success: true,\n      user: {\n        username: user.username,\n        role: user.role\n      },\n      token\n    };\n  }\n  throw new Error('Thông tin đăng nhập không chính xác');\n};\n\n// Mock logout function\nexport const logoutUser = async () => {\n  await new Promise(resolve => setTimeout(resolve, 200));\n  // Xóa thông tin đăng nhập khỏi localStorage\n  localStorage.removeItem('authToken');\n  localStorage.removeItem('user');\n};\n\n// Mock verify token function\nexport const verifyToken = async token => {\n  await new Promise(resolve => setTimeout(resolve, 200));\n  try {\n    const decodedToken = JSON.parse(atob(token));\n    const now = Date.now();\n    // Token hết hạn sau 24 giờ\n    if (now - decodedToken.timestamp > 24 * 60 * 60 * 1000) {\n      throw new Error('Token đã hết hạn');\n    }\n    return true;\n  } catch {\n    throw new Error('Token không hợp lệ');\n  }\n};","map":{"version":3,"names":["users","MOCK_USERS","username","password","role","authService","register","userData","existingUser","find","user","email","Error","newUser","id","Date","now","toString","createdAt","toISOString","push","success","undefined","login","u","token","loginUser","Promise","resolve","setTimeout","btoa","JSON","stringify","userId","timestamp","logoutUser","localStorage","removeItem","verifyToken","decodedToken","parse","atob"],"sources":["C:/Documents/warehouse-dashboard/src/utils/auth.js"],"sourcesContent":["// Giả lập một backend service\r\nconst users = [];\r\n\r\n// Mock credentials\r\nconst MOCK_USERS = [\r\n    { username: 'admin', password: 'admin123', role: 'admin' },\r\n    { username: 'user', password: 'user123', role: 'user' }\r\n];\r\n\r\nexport const authService = {\r\n    register: async (userData) => {\r\n        // Kiểm tra xem username hoặc email đã tồn tại chưa\r\n        const existingUser = users.find(\r\n            user => user.username === userData.username || user.email === userData.email\r\n        );\r\n\r\n        if (existingUser) {\r\n            throw new Error('Tên người dùng hoặc email đã tồn tại');\r\n        }\r\n\r\n        // Trong thực tế, mật khẩu nên được hash trước khi lưu\r\n        const newUser = {\r\n            ...userData,\r\n            id: Date.now().toString(),\r\n            createdAt: new Date().toISOString()\r\n        };\r\n\r\n        users.push(newUser);\r\n        return { success: true, user: { ...newUser, password: undefined } };\r\n    },\r\n\r\n    login: async (username, password) => {\r\n        // Trong thực tế, cần kiểm tra hash của mật khẩu\r\n        const user = users.find(\r\n            u => u.username === username && u.password === password\r\n        );\r\n\r\n        if (!user) {\r\n            throw new Error('Tên đăng nhập hoặc mật khẩu không đúng');\r\n        }\r\n\r\n        return { \r\n            success: true, \r\n            user: { ...user, password: undefined },\r\n            token: 'fake-jwt-token' // Trong thực tế, đây sẽ là JWT token thật\r\n        };\r\n    }\r\n};\r\n\r\n// Mock login function\r\nexport const loginUser = async (username, password) => {\r\n    // Giả lập độ trễ của network request\r\n    await new Promise(resolve => setTimeout(resolve, 500));\r\n\r\n    const user = MOCK_USERS.find(\r\n        u => u.username === username && u.password === password\r\n    );\r\n\r\n    if (user) {\r\n        // Tạo mock token\r\n        const token = btoa(JSON.stringify({ userId: username, timestamp: Date.now() }));\r\n        return {\r\n            success: true,\r\n            user: { username: user.username, role: user.role },\r\n            token\r\n        };\r\n    }\r\n\r\n    throw new Error('Thông tin đăng nhập không chính xác');\r\n};\r\n\r\n// Mock logout function\r\nexport const logoutUser = async () => {\r\n    await new Promise(resolve => setTimeout(resolve, 200));\r\n    // Xóa thông tin đăng nhập khỏi localStorage\r\n    localStorage.removeItem('authToken');\r\n    localStorage.removeItem('user');\r\n};\r\n\r\n// Mock verify token function\r\nexport const verifyToken = async (token) => {\r\n    await new Promise(resolve => setTimeout(resolve, 200));\r\n    try {\r\n        const decodedToken = JSON.parse(atob(token));\r\n        const now = Date.now();\r\n        // Token hết hạn sau 24 giờ\r\n        if (now - decodedToken.timestamp > 24 * 60 * 60 * 1000) {\r\n            throw new Error('Token đã hết hạn');\r\n        }\r\n        return true;\r\n    } catch {\r\n        throw new Error('Token không hợp lệ');\r\n    }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}