{"ast":null,"code":"var _jsxFileName = \"C:\\\\Documents\\\\warehouse-dashboard\\\\src\\\\components\\\\ShelfGrid\\\\ShelfGrid.js\",\n  _s = $RefreshSig$();\n// File: ShelfGrid.js\n// Mô tả: Component React hiển thị lưới các kệ hàng trong dashboard quản lý kho.\n// Chức năng: Hiển thị danh sách kệ hàng theo tầng và khay, cho phép chọn từng kệ để xem chi tiết.\nimport React, { useState, useEffect } from 'react';\nimport './ShelfGrid.css';\nimport ShelfItem from './ShelfItem';\nimport ShelfDetail from '../ShelfDetail/ShelfDetail';\nimport StatusBar from '../StatusBar/StatusBar';\nimport FilterPanel from '../FilterPanel/FilterPanel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ShelfGrid = ({\n  shelves,\n  onShelfClick\n}) => {\n  _s();\n  const NUM_SHELVES = 4; // Số lượng kệ đồ\n  const NUM_TIERS_PER_SHELF = 4; // Số tầng mỗi kệ\n  const NUM_TRAYS_PER_TIER = 6; // Số ô mỗi tầng\n\n  const [selectedShelf, setSelectedShelf] = useState(null);\n  const [stats, setStats] = useState({\n    high: 0,\n    medium: 0,\n    empty: 0\n  });\n  const [lastUpdated, setLastUpdated] = useState(new Date().toISOString());\n  const [shelvesData, setShelvesData] = useState([]);\n  const [filters, setFilters] = useState({\n    tier: 'all',\n    status: 'all'\n  });\n\n  // Hàm tính toán trạng thái dựa trên số lượng vật phẩm và sức chứa\n  const calculateStatus = (itemCount, capacity) => {\n    const percentage = itemCount / capacity * 100;\n    if (percentage >= 80) return 'HIGH';\n    if (percentage >= 15) return 'MEDIUM';\n    if (percentage >= 0) return 'EMPTY';\n  };\n\n  // Lấy danh sách tất cả các tầng có trong dữ liệu\n  const getAllTiers = () => {\n    const tiersSet = new Set();\n    shelvesData.forEach(shelf => {\n      shelf.tiers.forEach(group => {\n        group.forEach(tier => {\n          if (tier.tier) {\n            tiersSet.add(tier.tier);\n          }\n        });\n      });\n    });\n    return Array.from(tiersSet).sort((a, b) => a - b);\n  };\n\n  // Khởi tạo dữ liệu ban đầu và thiết lập interval cập nhật\n  useEffect(() => {\n    // Tạo dữ liệu mẫu ban đầu\n    const initialData = Array.from({\n      length: NUM_SHELVES\n    }, (_, shelfIndex) => {\n      const tiers = Array.from({\n        length: NUM_TIERS_PER_SHELF / 2\n      }, (_, groupIndex) => {\n        const groupedTiers = [{\n          tier: groupIndex * 2 + 1,\n          trays: Array.from({\n            length: NUM_TRAYS_PER_TIER\n          }, (_, trayIndex) => {\n            const capacity = 100;\n            const itemCount = Math.floor(Math.random() * (capacity + 1)); // Số lượng ngẫu nhiên từ 0 đến capacity\n            return {\n              tray: trayIndex + 1,\n              status: calculateStatus(itemCount, capacity),\n              capacity,\n              itemCount,\n              lastUpdated: new Date().toISOString()\n            };\n          })\n        }, {\n          tier: groupIndex * 2 + 2,\n          trays: Array.from({\n            length: NUM_TRAYS_PER_TIER\n          }, (_, trayIndex) => {\n            const capacity = 100;\n            const itemCount = Math.floor(Math.random() * (capacity + 1));\n            return {\n              tray: trayIndex + 1,\n              status: calculateStatus(itemCount, capacity),\n              capacity,\n              itemCount,\n              lastUpdated: new Date().toISOString()\n            };\n          })\n        }];\n        return groupedTiers;\n      });\n      return {\n        shelf: shelfIndex + 1,\n        tiers\n      };\n    });\n    setShelvesData(initialData);\n\n    // Thiết lập interval để cập nhật ngẫu nhiên\n    const interval = setInterval(() => {\n      setShelvesData(prevData => {\n        const newData = JSON.parse(JSON.stringify(prevData));\n\n        // Chọn ngẫu nhiên một ô để cập nhật\n        const randomShelf = Math.floor(Math.random() * NUM_SHELVES);\n        const randomTierGroup = Math.floor(Math.random() * (NUM_TIERS_PER_SHELF / 2));\n        const randomTierInGroup = Math.floor(Math.random() * 2);\n        const randomTray = Math.floor(Math.random() * NUM_TRAYS_PER_TIER);\n\n        // Cập nhật thông tin của ô được chọn\n        const tray = newData[randomShelf].tiers[randomTierGroup][randomTierInGroup].trays[randomTray];\n        const newItemCount = Math.floor(Math.random() * (tray.capacity + 1));\n        tray.itemCount = newItemCount;\n        tray.status = calculateStatus(newItemCount, tray.capacity);\n        tray.lastUpdated = new Date().toISOString();\n        return newData;\n      });\n      setLastUpdated(new Date().toISOString());\n    }, 3000); // Cập nhật mỗi 3 giây\n\n    return () => clearInterval(interval);\n  }, []);\n\n  // Tính toán thống kê mỗi khi dữ liệu thay đổi\n  useEffect(() => {\n    const newStats = {\n      high: 0,\n      medium: 0,\n      empty: 0\n    };\n    shelvesData.forEach(shelf => {\n      shelf.tiers.forEach(group => {\n        group.forEach(tier => {\n          tier.trays.forEach(tray => {\n            newStats[tray.status.toLowerCase()]++;\n          });\n        });\n      });\n    });\n    setStats(newStats);\n  }, [shelvesData]);\n  const handleTrayClick = (shelfIndex, tierInfo, trayIndex) => {\n    const tray = tierInfo.trays[trayIndex];\n    setSelectedShelf({\n      shelf: shelfIndex + 1,\n      tier: tierInfo.tier,\n      tray: tray.tray,\n      status: tray.status,\n      capacity: tray.capacity,\n      itemCount: tray.itemCount,\n      lastUpdated: tray.lastUpdated\n    });\n  };\n\n  // Xử lý thay đổi bộ lọc\n  const handleFilterChange = (filterType, value, newFilters) => {\n    if (filterType === 'reset') {\n      setFilters(newFilters);\n    } else {\n      setFilters(prev => ({\n        ...prev,\n        [filterType]: value\n      }));\n    }\n  };\n  const handleCloseDetail = () => {\n    setSelectedShelf(null);\n  };\n\n  // Hàm kiểm tra xem một item có phù hợp với bộ lọc không\n  const isItemFiltered = (tier, status) => {\n    const tierMatch = filters.tier === 'all' || filters.tier === tier.toString();\n    const statusMatch = filters.status === 'all' || filters.status === status;\n    return tierMatch && statusMatch;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"shelf-grid-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(StatusBar, {\n      stats: stats,\n      lastUpdated: lastUpdated\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"shelf-grid-container\",\n      children: shelvesData.map((shelf, shelfIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"shelf-grid\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"K\\u1EC7 \", shelf.shelf]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 13\n        }, this), shelf.tiers.map((group, groupIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tier-row-group\",\n          children: group.map((tier, tierIndex) => {\n            const isTierFiltered = tier.trays.some(tray => isItemFiltered(tier.tier, tray.status));\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `tier-row ${isTierFiltered ? 'filtered-in' : 'filtered-out'}`,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"tier-label\",\n                children: [\"T\\u1EA7ng \", tier.tier]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 187,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"tray-container\",\n                children: tier.trays.map((tray, trayIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"tray-cell\",\n                  children: /*#__PURE__*/_jsxDEV(ShelfItem, {\n                    tier: tier.tier,\n                    tray: tray.tray,\n                    status: tray.status,\n                    onClick: () => handleTrayClick(shelfIndex, tier, trayIndex),\n                    isFiltered: isItemFiltered(tier.tier, tray.status)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 194,\n                    columnNumber: 29\n                  }, this)\n                }, `tray-${tier.tier}-${tray.tray}`, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 190,\n                  columnNumber: 27\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 188,\n                columnNumber: 23\n              }, this)]\n            }, `tier-${tier.tier}`, true, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 21\n            }, this);\n          })\n        }, `tier-group-${groupIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 15\n        }, this))]\n      }, `shelf-${shelf.shelf}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), selectedShelf && /*#__PURE__*/_jsxDEV(ShelfDetail, {\n      shelf: selectedShelf,\n      onClose: handleCloseDetail\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 5\n  }, this);\n};\n_s(ShelfGrid, \"er6e1jtC54gwYRR5Og5X8GPJqGQ=\");\n_c = ShelfGrid;\nexport default ShelfGrid;\nvar _c;\n$RefreshReg$(_c, \"ShelfGrid\");","map":{"version":3,"names":["React","useState","useEffect","ShelfItem","ShelfDetail","StatusBar","FilterPanel","jsxDEV","_jsxDEV","ShelfGrid","shelves","onShelfClick","_s","NUM_SHELVES","NUM_TIERS_PER_SHELF","NUM_TRAYS_PER_TIER","selectedShelf","setSelectedShelf","stats","setStats","high","medium","empty","lastUpdated","setLastUpdated","Date","toISOString","shelvesData","setShelvesData","filters","setFilters","tier","status","calculateStatus","itemCount","capacity","percentage","getAllTiers","tiersSet","Set","forEach","shelf","tiers","group","add","Array","from","sort","a","b","initialData","length","_","shelfIndex","groupIndex","groupedTiers","trays","trayIndex","Math","floor","random","tray","interval","setInterval","prevData","newData","JSON","parse","stringify","randomShelf","randomTierGroup","randomTierInGroup","randomTray","newItemCount","clearInterval","newStats","toLowerCase","handleTrayClick","tierInfo","handleFilterChange","filterType","value","newFilters","prev","handleCloseDetail","isItemFiltered","tierMatch","toString","statusMatch","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","tierIndex","isTierFiltered","some","onClick","isFiltered","onClose","_c","$RefreshReg$"],"sources":["C:/Documents/warehouse-dashboard/src/components/ShelfGrid/ShelfGrid.js"],"sourcesContent":["// File: ShelfGrid.js\r\n// Mô tả: Component React hiển thị lưới các kệ hàng trong dashboard quản lý kho.\r\n// Chức năng: Hiển thị danh sách kệ hàng theo tầng và khay, cho phép chọn từng kệ để xem chi tiết.\r\nimport React, { useState, useEffect } from 'react';\r\nimport './ShelfGrid.css';\r\nimport ShelfItem from './ShelfItem';\r\nimport ShelfDetail from '../ShelfDetail/ShelfDetail';\r\nimport StatusBar from '../StatusBar/StatusBar';\r\nimport FilterPanel from '../FilterPanel/FilterPanel';\r\n\r\nconst ShelfGrid = ({ shelves, onShelfClick }) => {\r\n  const NUM_SHELVES = 4; // Số lượng kệ đồ\r\n  const NUM_TIERS_PER_SHELF = 4; // Số tầng mỗi kệ\r\n  const NUM_TRAYS_PER_TIER = 6; // Số ô mỗi tầng\r\n\r\n  const [selectedShelf, setSelectedShelf] = useState(null);\r\n  const [stats, setStats] = useState({ high: 0, medium: 0, empty: 0 });\r\n  const [lastUpdated, setLastUpdated] = useState(new Date().toISOString());\r\n  const [shelvesData, setShelvesData] = useState([]);\r\n  const [filters, setFilters] = useState({\r\n    tier: 'all',\r\n    status: 'all'\r\n  });\r\n\r\n  // Hàm tính toán trạng thái dựa trên số lượng vật phẩm và sức chứa\r\n  const calculateStatus = (itemCount, capacity) => {\r\n    const percentage = (itemCount / capacity) * 100;\r\n    if (percentage >= 80) return 'HIGH';\r\n    if (percentage >= 15) return 'MEDIUM';\r\n    if (percentage >=0) return 'EMPTY';\r\n  };\r\n\r\n  // Lấy danh sách tất cả các tầng có trong dữ liệu\r\n  const getAllTiers = () => {\r\n    const tiersSet = new Set();\r\n    shelvesData.forEach(shelf => {\r\n      shelf.tiers.forEach(group => {\r\n        group.forEach(tier => {\r\n          if (tier.tier) {\r\n            tiersSet.add(tier.tier);\r\n          }\r\n        });\r\n      });\r\n    });\r\n    return Array.from(tiersSet).sort((a, b) => a - b);\r\n  };\r\n\r\n  // Khởi tạo dữ liệu ban đầu và thiết lập interval cập nhật\r\n  useEffect(() => {\r\n    // Tạo dữ liệu mẫu ban đầu\r\n    const initialData = Array.from({ length: NUM_SHELVES }, (_, shelfIndex) => {\r\n      const tiers = Array.from({ length: NUM_TIERS_PER_SHELF / 2 }, (_, groupIndex) => {\r\n        const groupedTiers = [\r\n          { \r\n            tier: groupIndex * 2 + 1, \r\n            trays: Array.from({ length: NUM_TRAYS_PER_TIER }, (_, trayIndex) => {\r\n              const capacity = 100;\r\n              const itemCount = Math.floor(Math.random() * (capacity + 1)); // Số lượng ngẫu nhiên từ 0 đến capacity\r\n              return {\r\n                tray: trayIndex + 1,\r\n                status: calculateStatus(itemCount, capacity),\r\n                capacity,\r\n                itemCount,\r\n                lastUpdated: new Date().toISOString()\r\n              };\r\n            })\r\n          },\r\n          { \r\n            tier: groupIndex * 2 + 2, \r\n            trays: Array.from({ length: NUM_TRAYS_PER_TIER }, (_, trayIndex) => {\r\n              const capacity = 100;\r\n              const itemCount = Math.floor(Math.random() * (capacity + 1));\r\n              return {\r\n                tray: trayIndex + 1,\r\n                status: calculateStatus(itemCount, capacity),\r\n                capacity,\r\n                itemCount,\r\n                lastUpdated: new Date().toISOString()\r\n              };\r\n            })\r\n          }\r\n        ];\r\n        return groupedTiers;\r\n      });\r\n      return { shelf: shelfIndex + 1, tiers };\r\n    });\r\n\r\n    setShelvesData(initialData);\r\n\r\n    // Thiết lập interval để cập nhật ngẫu nhiên\r\n    const interval = setInterval(() => {\r\n      setShelvesData(prevData => {\r\n        const newData = JSON.parse(JSON.stringify(prevData));\r\n        \r\n        // Chọn ngẫu nhiên một ô để cập nhật\r\n        const randomShelf = Math.floor(Math.random() * NUM_SHELVES);\r\n        const randomTierGroup = Math.floor(Math.random() * (NUM_TIERS_PER_SHELF / 2));\r\n        const randomTierInGroup = Math.floor(Math.random() * 2);\r\n        const randomTray = Math.floor(Math.random() * NUM_TRAYS_PER_TIER);\r\n        \r\n        // Cập nhật thông tin của ô được chọn\r\n        const tray = newData[randomShelf].tiers[randomTierGroup][randomTierInGroup].trays[randomTray];\r\n        const newItemCount = Math.floor(Math.random() * (tray.capacity + 1));\r\n        tray.itemCount = newItemCount;\r\n        tray.status = calculateStatus(newItemCount, tray.capacity);\r\n        tray.lastUpdated = new Date().toISOString();\r\n        \r\n        return newData;\r\n      });\r\n      setLastUpdated(new Date().toISOString());\r\n    }, 3000); // Cập nhật mỗi 3 giây\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  // Tính toán thống kê mỗi khi dữ liệu thay đổi\r\n  useEffect(() => {\r\n    const newStats = { high: 0, medium: 0, empty: 0 };\r\n    \r\n    shelvesData.forEach(shelf => {\r\n      shelf.tiers.forEach(group => {\r\n        group.forEach(tier => {\r\n          tier.trays.forEach(tray => {\r\n            newStats[tray.status.toLowerCase()]++;\r\n          });\r\n        });\r\n      });\r\n    });\r\n    \r\n    setStats(newStats);\r\n  }, [shelvesData]);  const handleTrayClick = (shelfIndex, tierInfo, trayIndex) => {\r\n  const tray = tierInfo.trays[trayIndex];\r\n  \r\n  setSelectedShelf({\r\n    shelf: shelfIndex + 1,\r\n    tier: tierInfo.tier,\r\n    tray: tray.tray,\r\n    status: tray.status,\r\n    capacity: tray.capacity,\r\n    itemCount: tray.itemCount,\r\n    lastUpdated: tray.lastUpdated\r\n  });\r\n};\r\n\r\n  // Xử lý thay đổi bộ lọc\r\n  const handleFilterChange = (filterType, value, newFilters) => {\r\n    if (filterType === 'reset') {\r\n      setFilters(newFilters);\r\n    } else {\r\n      setFilters(prev => ({\r\n        ...prev,\r\n        [filterType]: value\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleCloseDetail = () => {\r\n    setSelectedShelf(null);\r\n  };\r\n\r\n  // Hàm kiểm tra xem một item có phù hợp với bộ lọc không\r\n  const isItemFiltered = (tier, status) => {\r\n    const tierMatch = filters.tier === 'all' || filters.tier === tier.toString();\r\n    const statusMatch = filters.status === 'all' || filters.status === status;\r\n    return tierMatch && statusMatch;\r\n  };\r\n\r\n  return (\r\n    <div className=\"shelf-grid-wrapper\">\r\n      <StatusBar stats={stats} lastUpdated={lastUpdated} />\r\n      <div className=\"shelf-grid-container\">\r\n        {shelvesData.map((shelf, shelfIndex) => (\r\n          <div key={`shelf-${shelf.shelf}`} className=\"shelf-grid\">\r\n            <h3>Kệ {shelf.shelf}</h3>\r\n            {shelf.tiers.map((group, groupIndex) => (\r\n              <div key={`tier-group-${groupIndex}`} className=\"tier-row-group\">\r\n                {group.map((tier, tierIndex) => {\r\n                  const isTierFiltered = tier.trays.some(tray => \r\n                    isItemFiltered(tier.tier, tray.status)\r\n                  );\r\n                  \r\n                  return (\r\n                    <div \r\n                      key={`tier-${tier.tier}`} \r\n                      className={`tier-row ${isTierFiltered ? 'filtered-in' : 'filtered-out'}`}\r\n                    >\r\n                      <div className=\"tier-label\">Tầng {tier.tier}</div>\r\n                      <div className=\"tray-container\">\r\n                        {tier.trays.map((tray, trayIndex) => (\r\n                          <div \r\n                            key={`tray-${tier.tier}-${tray.tray}`} \r\n                            className=\"tray-cell\"\r\n                          >\r\n                            <ShelfItem\r\n                              tier={tier.tier}\r\n                              tray={tray.tray}\r\n                              status={tray.status}\r\n                              onClick={() => handleTrayClick(shelfIndex, tier, trayIndex)}\r\n                              isFiltered={isItemFiltered(tier.tier, tray.status)}\r\n                            />\r\n                          </div>\r\n                        ))}\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      {selectedShelf && (\r\n        <ShelfDetail\r\n          shelf={selectedShelf}\r\n          onClose={handleCloseDetail}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ShelfGrid;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}