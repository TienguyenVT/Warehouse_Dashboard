{"ast":null,"code":"var _jsxFileName = \"C:\\\\Documents\\\\warehouse-dashboard\\\\src\\\\components\\\\ShelfGrid\\\\ShelfGrid.js\",\n  _s = $RefreshSig$();\n// File: ShelfGrid.js\n// Mô tả: Component React hiển thị lưới các kệ hàng trong dashboard quản lý kho.\n// Chức năng: Hiển thị danh sách kệ hàng theo tầng và khay, cho phép chọn từng kệ để xem chi tiết.\nimport React, { useState, useEffect } from 'react';\nimport './ShelfGrid.css';\nimport ShelfItem from './ShelfItem';\nimport ShelfDetail from '../ShelfDetail/ShelfDetail';\nimport StatusBar from '../StatusBar/StatusBar';\nimport FilterPanel from '../FilterPanel/FilterPanel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ShelfGrid = ({\n  shelves,\n  onShelfClick\n}) => {\n  _s();\n  const NUM_SHELVES = 4; // Số lượng kệ đồ\n  const NUM_TIERS_PER_SHELF = 4; // Số tầng mỗi kệ\n  const NUM_TRAYS_PER_TIER = 6; // Số ô mỗi tầng\n\n  const [selectedShelf, setSelectedShelf] = useState(null);\n  const [stats, setStats] = useState({\n    high: 0,\n    medium: 0,\n    empty: 0\n  });\n  const [lastUpdated, setLastUpdated] = useState(new Date().toISOString());\n  const [shelvesData, setShelvesData] = useState([]);\n  const [filters, setFilters] = useState({\n    tier: 'all',\n    status: 'all'\n  });\n\n  // Hàm tính toán trạng thái dựa trên số lượng vật phẩm và sức chứa\n  const calculateStatus = (itemCount, capacity) => {\n    const percentage = itemCount / capacity * 100;\n    if (percentage >= 70) return 'HIGH';\n    if (percentage >= 30) return 'MEDIUM';\n    return 'EMPTY';\n  };\n\n  // Khởi tạo dữ liệu ban đầu và thiết lập interval cập nhật\n  useEffect(() => {\n    // Tạo dữ liệu mẫu ban đầu\n    const initialData = Array.from({\n      length: NUM_SHELVES\n    }, (_, shelfIndex) => {\n      const tiers = Array.from({\n        length: NUM_TIERS_PER_SHELF / 2\n      }, (_, groupIndex) => {\n        const groupedTiers = [{\n          tier: groupIndex * 2 + 1,\n          trays: Array.from({\n            length: NUM_TRAYS_PER_TIER\n          }, (_, trayIndex) => {\n            const capacity = 100;\n            const itemCount = Math.floor(Math.random() * (capacity + 1));\n            return {\n              tray: trayIndex + 1,\n              status: calculateStatus(itemCount, capacity),\n              capacity,\n              itemCount,\n              lastUpdated: new Date().toISOString()\n            };\n          })\n        }, {\n          tier: groupIndex * 2 + 2,\n          trays: Array.from({\n            length: NUM_TRAYS_PER_TIER\n          }, (_, trayIndex) => {\n            const capacity = 100;\n            const itemCount = Math.floor(Math.random() * (capacity + 1));\n            return {\n              tray: trayIndex + 1,\n              status: calculateStatus(itemCount, capacity),\n              capacity,\n              itemCount,\n              lastUpdated: new Date().toISOString()\n            };\n          })\n        }];\n        return groupedTiers;\n      });\n      return {\n        shelf: shelfIndex + 1,\n        tiers\n      };\n    });\n    setShelvesData(initialData);\n\n    // Thiết lập interval để cập nhật ngẫu nhiên\n    const interval = setInterval(() => {\n      setShelvesData(prevData => {\n        const newData = JSON.parse(JSON.stringify(prevData));\n\n        // Chọn ngẫu nhiên một ô để cập nhật\n        const randomShelf = Math.floor(Math.random() * NUM_SHELVES);\n        const randomTierGroup = Math.floor(Math.random() * (NUM_TIERS_PER_SHELF / 2));\n        const randomTierInGroup = Math.floor(Math.random() * 2);\n        const randomTray = Math.floor(Math.random() * NUM_TRAYS_PER_TIER);\n\n        // Cập nhật thông tin của ô được chọn\n        const tray = newData[randomShelf].tiers[randomTierGroup][randomTierInGroup].trays[randomTray];\n        const newItemCount = Math.floor(Math.random() * (tray.capacity + 1));\n        tray.itemCount = newItemCount;\n        tray.status = calculateStatus(newItemCount, tray.capacity);\n        tray.lastUpdated = new Date().toISOString();\n        return newData;\n      });\n      setLastUpdated(new Date().toISOString());\n    }, 3000);\n    return () => clearInterval(interval);\n  }, []);\n\n  // Tính toán thống kê mỗi khi dữ liệu thay đổi\n  useEffect(() => {\n    const newStats = {\n      high: 0,\n      medium: 0,\n      empty: 0\n    };\n    shelvesData.forEach(shelf => {\n      shelf.tiers.forEach(group => {\n        group.forEach(tier => {\n          tier.trays.forEach(tray => {\n            newStats[tray.status.toLowerCase()]++;\n          });\n        });\n      });\n    });\n    setStats(newStats);\n  }, [shelvesData]);\n  const handleTrayClick = (shelfIndex, tierInfo, trayIndex) => {\n    // Thêm check để tránh click vào khu vực không hợp lệ\n    if (!tierInfo || !tierInfo.trays || !tierInfo.trays[trayIndex]) {\n      return;\n    }\n    const tray = tierInfo.trays[trayIndex];\n    setSelectedShelf({\n      shelf: shelfIndex + 1,\n      tier: tierInfo.tier,\n      tray: tray.tray,\n      status: tray.status,\n      capacity: tray.capacity,\n      itemCount: tray.itemCount,\n      lastUpdated: tray.lastUpdated\n    });\n  };\n  // Hàm kiểm tra một ô có phù hợp với bộ lọc hay không\n  const isItemMatchingFilters = (tierNumber, trayStatus) => {\n    // Kiểm tra match với tầng đã chọn\n    const tierMatch = filters.tier === 'all' || Number(filters.tier) === tierNumber;\n\n    // Kiểm tra match với trạng thái đã chọn\n    const statusMatch = filters.status === 'all' || filters.status === trayStatus;\n    return tierMatch && statusMatch;\n  };\n\n  // Hàm kiểm tra một hàng (tier) có bất kỳ ô nào phù hợp với bộ lọc không\n  const hasTierMatchingItems = tier => {\n    return tier.trays.some(tray => {\n      return isItemMatchingFilters(tier.tier, tray.status);\n    });\n  };\n  const handleCloseDetail = () => {\n    setSelectedShelf(null);\n  };\n\n  // Kiểm tra xem tier có phù hợp với bộ lọc không\n  const isTierVisible = tier => {\n    return tier.trays.some(tray => tray.isVisible !== false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"shelf-grid-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(StatusBar, {\n      stats: stats,\n      lastUpdated: lastUpdated\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"shelf-grid-container\",\n      children: shelvesData.map((shelf, shelfIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"shelf-grid\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"K\\u1EC7 \", shelf.shelf]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 13\n        }, this), shelf.tiers.map((group, groupIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tier-row-group\",\n          children: group.map(tier => {\n            const hasMatchingItems = hasTierMatchingItems(tier);\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `tier-row ${hasMatchingItems ? 'has-matching-items' : 'no-matching-items'}`,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"tier-label\",\n                children: [\"T\\u1EA7ng \", tier.tier]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 180,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"tray-container\",\n                children: tier.trays.map((tray, trayIndex) => {\n                  const isMatching = isItemMatchingFilters(tier.tier, tray.status);\n                  return /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: `tray-cell ${isMatching ? 'matching-filter' : 'not-matching-filter'}`,\n                    children: /*#__PURE__*/_jsxDEV(ShelfItem, {\n                      tier: tier.tier,\n                      tray: tray.tray,\n                      status: tray.status,\n                      onClick: () => handleTrayClick(shelfIndex, tier, trayIndex)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 189,\n                      columnNumber: 31\n                    }, this)\n                  }, `tray-${tier.tier}-${tray.tray}`, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 185,\n                    columnNumber: 29\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 23\n              }, this)]\n            }, `tier-${tier.tier}`, true, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 21\n            }, this);\n          })\n        }, `tier-group-${groupIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 15\n        }, this))]\n      }, `shelf-${shelf.shelf}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), selectedShelf && /*#__PURE__*/_jsxDEV(ShelfDetail, {\n      shelf: selectedShelf,\n      onClose: handleCloseDetail\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }, this);\n};\n_s(ShelfGrid, \"er6e1jtC54gwYRR5Og5X8GPJqGQ=\");\n_c = ShelfGrid;\nexport default ShelfGrid;\nvar _c;\n$RefreshReg$(_c, \"ShelfGrid\");","map":{"version":3,"names":["React","useState","useEffect","ShelfItem","ShelfDetail","StatusBar","FilterPanel","jsxDEV","_jsxDEV","ShelfGrid","shelves","onShelfClick","_s","NUM_SHELVES","NUM_TIERS_PER_SHELF","NUM_TRAYS_PER_TIER","selectedShelf","setSelectedShelf","stats","setStats","high","medium","empty","lastUpdated","setLastUpdated","Date","toISOString","shelvesData","setShelvesData","filters","setFilters","tier","status","calculateStatus","itemCount","capacity","percentage","initialData","Array","from","length","_","shelfIndex","tiers","groupIndex","groupedTiers","trays","trayIndex","Math","floor","random","tray","shelf","interval","setInterval","prevData","newData","JSON","parse","stringify","randomShelf","randomTierGroup","randomTierInGroup","randomTray","newItemCount","clearInterval","newStats","forEach","group","toLowerCase","handleTrayClick","tierInfo","isItemMatchingFilters","tierNumber","trayStatus","tierMatch","Number","statusMatch","hasTierMatchingItems","some","handleCloseDetail","isTierVisible","isVisible","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","hasMatchingItems","isMatching","onClick","onClose","_c","$RefreshReg$"],"sources":["C:/Documents/warehouse-dashboard/src/components/ShelfGrid/ShelfGrid.js"],"sourcesContent":["// File: ShelfGrid.js\r\n// Mô tả: Component React hiển thị lưới các kệ hàng trong dashboard quản lý kho.\r\n// Chức năng: Hiển thị danh sách kệ hàng theo tầng và khay, cho phép chọn từng kệ để xem chi tiết.\r\nimport React, { useState, useEffect } from 'react';\r\nimport './ShelfGrid.css';\r\nimport ShelfItem from './ShelfItem';\r\nimport ShelfDetail from '../ShelfDetail/ShelfDetail';\r\nimport StatusBar from '../StatusBar/StatusBar';\r\nimport FilterPanel from '../FilterPanel/FilterPanel';\r\n\r\nconst ShelfGrid = ({ shelves, onShelfClick }) => {\r\n  const NUM_SHELVES = 4; // Số lượng kệ đồ\r\n  const NUM_TIERS_PER_SHELF = 4; // Số tầng mỗi kệ\r\n  const NUM_TRAYS_PER_TIER = 6; // Số ô mỗi tầng\r\n\r\n  const [selectedShelf, setSelectedShelf] = useState(null);\r\n  const [stats, setStats] = useState({ high: 0, medium: 0, empty: 0 });\r\n  const [lastUpdated, setLastUpdated] = useState(new Date().toISOString());\r\n  const [shelvesData, setShelvesData] = useState([]);\r\n  const [filters, setFilters] = useState({\r\n    tier: 'all',\r\n    status: 'all'\r\n  });\r\n\r\n  // Hàm tính toán trạng thái dựa trên số lượng vật phẩm và sức chứa\r\n  const calculateStatus = (itemCount, capacity) => {\r\n    const percentage = (itemCount / capacity) * 100;\r\n    if (percentage >= 70) return 'HIGH';\r\n    if (percentage >= 30) return 'MEDIUM';\r\n    return 'EMPTY';\r\n  };\r\n\r\n  // Khởi tạo dữ liệu ban đầu và thiết lập interval cập nhật\r\n  useEffect(() => {\r\n    // Tạo dữ liệu mẫu ban đầu\r\n    const initialData = Array.from({ length: NUM_SHELVES }, (_, shelfIndex) => {\r\n      const tiers = Array.from({ length: NUM_TIERS_PER_SHELF / 2 }, (_, groupIndex) => {\r\n        const groupedTiers = [\r\n          { \r\n            tier: groupIndex * 2 + 1, \r\n            trays: Array.from({ length: NUM_TRAYS_PER_TIER }, (_, trayIndex) => {\r\n              const capacity = 100;\r\n              const itemCount = Math.floor(Math.random() * (capacity + 1));\r\n              return {\r\n                tray: trayIndex + 1,\r\n                status: calculateStatus(itemCount, capacity),\r\n                capacity,\r\n                itemCount,\r\n                lastUpdated: new Date().toISOString()\r\n              };\r\n            })\r\n          },\r\n          { \r\n            tier: groupIndex * 2 + 2, \r\n            trays: Array.from({ length: NUM_TRAYS_PER_TIER }, (_, trayIndex) => {\r\n              const capacity = 100;\r\n              const itemCount = Math.floor(Math.random() * (capacity + 1));\r\n              return {\r\n                tray: trayIndex + 1,\r\n                status: calculateStatus(itemCount, capacity),\r\n                capacity,\r\n                itemCount,\r\n                lastUpdated: new Date().toISOString()\r\n              };\r\n            })\r\n          }\r\n        ];\r\n        return groupedTiers;\r\n      });\r\n      return { shelf: shelfIndex + 1, tiers };\r\n    });\r\n\r\n    setShelvesData(initialData);\r\n\r\n    // Thiết lập interval để cập nhật ngẫu nhiên\r\n    const interval = setInterval(() => {\r\n      setShelvesData(prevData => {\r\n        const newData = JSON.parse(JSON.stringify(prevData));\r\n        \r\n        // Chọn ngẫu nhiên một ô để cập nhật\r\n        const randomShelf = Math.floor(Math.random() * NUM_SHELVES);\r\n        const randomTierGroup = Math.floor(Math.random() * (NUM_TIERS_PER_SHELF / 2));\r\n        const randomTierInGroup = Math.floor(Math.random() * 2);\r\n        const randomTray = Math.floor(Math.random() * NUM_TRAYS_PER_TIER);\r\n        \r\n        // Cập nhật thông tin của ô được chọn\r\n        const tray = newData[randomShelf].tiers[randomTierGroup][randomTierInGroup].trays[randomTray];\r\n        const newItemCount = Math.floor(Math.random() * (tray.capacity + 1));\r\n        tray.itemCount = newItemCount;\r\n        tray.status = calculateStatus(newItemCount, tray.capacity);\r\n        tray.lastUpdated = new Date().toISOString();\r\n        \r\n        return newData;\r\n      });\r\n      setLastUpdated(new Date().toISOString());\r\n    }, 3000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  // Tính toán thống kê mỗi khi dữ liệu thay đổi\r\n  useEffect(() => {\r\n    const newStats = { high: 0, medium: 0, empty: 0 };\r\n    \r\n    shelvesData.forEach(shelf => {\r\n      shelf.tiers.forEach(group => {\r\n        group.forEach(tier => {\r\n          tier.trays.forEach(tray => {\r\n            newStats[tray.status.toLowerCase()]++;\r\n          });\r\n        });\r\n      });\r\n    });\r\n    \r\n    setStats(newStats);\r\n  }, [shelvesData]);\r\n\r\n  const handleTrayClick = (shelfIndex, tierInfo, trayIndex) => {\r\n    // Thêm check để tránh click vào khu vực không hợp lệ\r\n    if (!tierInfo || !tierInfo.trays || !tierInfo.trays[trayIndex]) {\r\n      return;\r\n    }\r\n  \r\n    const tray = tierInfo.trays[trayIndex];\r\n    \r\n    setSelectedShelf({\r\n      shelf: shelfIndex + 1,\r\n      tier: tierInfo.tier,\r\n      tray: tray.tray,\r\n      status: tray.status,\r\n      capacity: tray.capacity,\r\n      itemCount: tray.itemCount,\r\n      lastUpdated: tray.lastUpdated\r\n    });\r\n  };\r\n  // Hàm kiểm tra một ô có phù hợp với bộ lọc hay không\r\n  const isItemMatchingFilters = (tierNumber, trayStatus) => {\r\n    // Kiểm tra match với tầng đã chọn\r\n    const tierMatch = filters.tier === 'all' || Number(filters.tier) === tierNumber;\r\n    \r\n    // Kiểm tra match với trạng thái đã chọn\r\n    const statusMatch = filters.status === 'all' || \r\n                      filters.status === trayStatus;\r\n\r\n    return tierMatch && statusMatch;\r\n  };\r\n\r\n  // Hàm kiểm tra một hàng (tier) có bất kỳ ô nào phù hợp với bộ lọc không\r\n  const hasTierMatchingItems = (tier) => {\r\n    return tier.trays.some(tray => {\r\n      return isItemMatchingFilters(tier.tier, tray.status);\r\n    });\r\n  };\r\n\r\n  const handleCloseDetail = () => {\r\n    setSelectedShelf(null);\r\n  };\r\n\r\n  // Kiểm tra xem tier có phù hợp với bộ lọc không\r\n  const isTierVisible = (tier) => {\r\n    return tier.trays.some(tray => tray.isVisible !== false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"shelf-grid-wrapper\">\r\n      <StatusBar stats={stats} lastUpdated={lastUpdated} />\r\n      <div className=\"shelf-grid-container\">\r\n        {shelvesData.map((shelf, shelfIndex) => (\r\n          <div key={`shelf-${shelf.shelf}`} className=\"shelf-grid\">\r\n            <h3>Kệ {shelf.shelf}</h3>\r\n            {shelf.tiers.map((group, groupIndex) => (\r\n              <div key={`tier-group-${groupIndex}`} className=\"tier-row-group\">\r\n                {group.map((tier) => {\r\n                  const hasMatchingItems = hasTierMatchingItems(tier);\r\n                  return (\r\n                    <div \r\n                      key={`tier-${tier.tier}`} \r\n                      className={`tier-row ${hasMatchingItems ? 'has-matching-items' : 'no-matching-items'}`}\r\n                    >\r\n                      <div className=\"tier-label\">Tầng {tier.tier}</div>\r\n                      <div className=\"tray-container\">\r\n                        {tier.trays.map((tray, trayIndex) => {\r\n                          const isMatching = isItemMatchingFilters(tier.tier, tray.status);\r\n                          return (\r\n                            <div \r\n                              key={`tray-${tier.tier}-${tray.tray}`} \r\n                              className={`tray-cell ${isMatching ? 'matching-filter' : 'not-matching-filter'}`}\r\n                            >\r\n                              <ShelfItem\r\n                                tier={tier.tier}\r\n                                tray={tray.tray}\r\n                                status={tray.status}\r\n                                onClick={() => handleTrayClick(shelfIndex, tier, trayIndex)}\r\n                              />\r\n                            </div>\r\n                          );\r\n                        })}\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      {selectedShelf && (\r\n        <ShelfDetail\r\n          shelf={selectedShelf}\r\n          onClose={handleCloseDetail}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ShelfGrid;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}