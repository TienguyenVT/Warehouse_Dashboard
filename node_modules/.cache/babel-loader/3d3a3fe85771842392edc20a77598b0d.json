{"ast":null,"code":"var __extends = this && this.t || function () {\n  var extendStatics = function (r, t) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (r, t) {\n      r.__proto__ = t;\n    } || function (r, t) {\n      for (var e in t) if (Object.prototype.hasOwnProperty.call(t, e)) r[e] = t[e];\n    };\n    return extendStatics(r, t);\n  };\n  return function (r, t) {\n    if (typeof t !== \"function\" && t !== null) throw new TypeError(\"Class extends value \" + String(t) + \" is not a constructor or null\");\n    extendStatics(r, t);\n    function __() {\n      this.constructor = r;\n    }\n    r.prototype = t === null ? Object.create(t) : (__.prototype = t.prototype, new __());\n  };\n}();\nimport { ContainerIterator } from \"../../ContainerBase\";\nimport { throwIteratorAccessError } from \"../../../utils/throwError\";\nvar TreeIterator = function (r) {\n  __extends(TreeIterator, r);\n  function TreeIterator(t, e, i) {\n    var n = r.call(this, i) || this;\n    n.o = t;\n    n.h = e;\n    if (n.iteratorType === 0) {\n      n.pre = function () {\n        if (this.o === this.h.K) {\n          throwIteratorAccessError();\n        }\n        this.o = this.o.L();\n        return this;\n      };\n      n.next = function () {\n        if (this.o === this.h) {\n          throwIteratorAccessError();\n        }\n        this.o = this.o.m();\n        return this;\n      };\n    } else {\n      n.pre = function () {\n        if (this.o === this.h.N) {\n          throwIteratorAccessError();\n        }\n        this.o = this.o.m();\n        return this;\n      };\n      n.next = function () {\n        if (this.o === this.h) {\n          throwIteratorAccessError();\n        }\n        this.o = this.o.L();\n        return this;\n      };\n    }\n    return n;\n  }\n  Object.defineProperty(TreeIterator.prototype, \"index\", {\n    get: function () {\n      var r = this.o;\n      var t = this.h.rr;\n      if (r === this.h) {\n        if (t) {\n          return t.tr - 1;\n        }\n        return 0;\n      }\n      var e = 0;\n      if (r.K) {\n        e += r.K.tr;\n      }\n      while (r !== t) {\n        var i = r.rr;\n        if (r === i.N) {\n          e += 1;\n          if (i.K) {\n            e += i.K.tr;\n          }\n        }\n        r = i;\n      }\n      return e;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return TreeIterator;\n}(ContainerIterator);\nexport default TreeIterator;","map":{"version":3,"sources":["container/TreeContainer/Base/TreeIterator.js","../../src/container/TreeContainer/Base/TreeIterator.ts"],"names":["__extends","this","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","_this","get","enumerable","configurable","ContainerIterator","throwIteratorAccessError","node","header","iteratorType","_super","_node","_header","pre","_left","_pre","next","_next","_right","TreeIterator","root","_parent","_subTreeSize","index"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { ContainerIterator } from \"../../ContainerBase\";\nimport { throwIteratorAccessError } from \"../../../utils/throwError\";\nvar TreeIterator = /** @class */ (function (_super) {\n    __extends(TreeIterator, _super);\n    /**\n     * @internal\n     */\n    function TreeIterator(node, header, iteratorType) {\n        var _this = _super.call(this, iteratorType) || this;\n        _this._node = node;\n        _this._header = header;\n        if (_this.iteratorType === 0 /* IteratorType.NORMAL */) {\n            _this.pre = function () {\n                if (this._node === this._header._left) {\n                    throwIteratorAccessError();\n                }\n                this._node = this._node._pre();\n                return this;\n            };\n            _this.next = function () {\n                if (this._node === this._header) {\n                    throwIteratorAccessError();\n                }\n                this._node = this._node._next();\n                return this;\n            };\n        }\n        else {\n            _this.pre = function () {\n                if (this._node === this._header._right) {\n                    throwIteratorAccessError();\n                }\n                this._node = this._node._next();\n                return this;\n            };\n            _this.next = function () {\n                if (this._node === this._header) {\n                    throwIteratorAccessError();\n                }\n                this._node = this._node._pre();\n                return this;\n            };\n        }\n        return _this;\n    }\n    Object.defineProperty(TreeIterator.prototype, \"index\", {\n        /**\n         * @description Get the sequential index of the iterator in the tree container.<br/>\n         *              <strong>Note:</strong>\n         *              This function only takes effect when the specified tree container `enableIndex = true`.\n         * @returns The index subscript of the node in the tree.\n         * @example\n         * const st = new OrderedSet([1, 2, 3], true);\n         * console.log(st.begin().next().index);  // 1\n         */\n        get: function () {\n            var _node = this._node;\n            var root = this._header._parent;\n            if (_node === this._header) {\n                if (root) {\n                    return root._subTreeSize - 1;\n                }\n                return 0;\n            }\n            var index = 0;\n            if (_node._left) {\n                index += _node._left._subTreeSize;\n            }\n            while (_node !== root) {\n                var _parent = _node._parent;\n                if (_node === _parent._right) {\n                    index += 1;\n                    if (_parent._left) {\n                        index += _parent._left._subTreeSize;\n                    }\n                }\n                _node = _parent;\n            }\n            return index;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return TreeIterator;\n}(ContainerIterator));\nexport default TreeIterator;\n","import { TreeNode } from './TreeNode';\nimport type { TreeNodeEnableIndex } from './TreeNode';\nimport { ContainerIterator, IteratorType } from '@/container/ContainerBase';\nimport TreeContainer from '@/container/TreeContainer/Base/index';\nimport { throwIteratorAccessError } from '@/utils/throwError';\n\nabstract class TreeIterator<K, V> extends ContainerIterator<K | [K, V]> {\n  abstract readonly container: TreeContainer<K, V>;\n  /**\n   * @internal\n   */\n  _node: TreeNode<K, V>;\n  /**\n   * @internal\n   */\n  protected _header: TreeNode<K, V>;\n  /**\n   * @internal\n   */\n  protected constructor(\n    node: TreeNode<K, V>,\n    header: TreeNode<K, V>,\n    iteratorType?: IteratorType\n  ) {\n    super(iteratorType);\n    this._node = node;\n    this._header = header;\n    if (this.iteratorType === IteratorType.NORMAL) {\n      this.pre = function () {\n        if (this._node === this._header._left) {\n          throwIteratorAccessError();\n        }\n        this._node = this._node._pre();\n        return this;\n      };\n\n      this.next = function () {\n        if (this._node === this._header) {\n          throwIteratorAccessError();\n        }\n        this._node = this._node._next();\n        return this;\n      };\n    } else {\n      this.pre = function () {\n        if (this._node === this._header._right) {\n          throwIteratorAccessError();\n        }\n        this._node = this._node._next();\n        return this;\n      };\n\n      this.next = function () {\n        if (this._node === this._header) {\n          throwIteratorAccessError();\n        }\n        this._node = this._node._pre();\n        return this;\n      };\n    }\n  }\n  /**\n   * @description Get the sequential index of the iterator in the tree container.<br/>\n   *              <strong>Note:</strong>\n   *              This function only takes effect when the specified tree container `enableIndex = true`.\n   * @returns The index subscript of the node in the tree.\n   * @example\n   * const st = new OrderedSet([1, 2, 3], true);\n   * console.log(st.begin().next().index);  // 1\n   */\n  get index() {\n    let _node = this._node as TreeNodeEnableIndex<K, V>;\n    const root = this._header._parent as TreeNodeEnableIndex<K, V>;\n    if (_node === this._header) {\n      if (root) {\n        return root._subTreeSize - 1;\n      }\n      return 0;\n    }\n    let index = 0;\n    if (_node._left) {\n      index += (_node._left as TreeNodeEnableIndex<K, V>)._subTreeSize;\n    }\n    while (_node !== root) {\n      const _parent = _node._parent as TreeNodeEnableIndex<K, V>;\n      if (_node === _parent._right) {\n        index += 1;\n        if (_parent._left) {\n          index += (_parent._left as TreeNodeEnableIndex<K, V>)._subTreeSize;\n        }\n      }\n      _node = _parent;\n    }\n    return index;\n  }\n  // @ts-ignore\n  pre(): this;\n  // @ts-ignore\n  next(): this;\n}\n\nexport default TreeIterator;\n"]},"metadata":{},"sourceType":"module"}