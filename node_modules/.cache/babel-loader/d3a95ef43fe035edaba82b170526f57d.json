{"ast":null,"code":"var _jsxFileName = \"C:\\\\Documents\\\\warehouse-dashboard\\\\src\\\\components\\\\ShelfGrid\\\\ShelfGrid.js\",\n  _s = $RefreshSig$();\n// File: ShelfGrid.js\n// Mô tả: Component React hiển thị lưới các kệ hàng trong dashboard quản lý kho.\n// Chức năng: Hiển thị danh sách kệ hàng theo tầng và khay, cho phép chọn từng kệ để xem chi tiết.\nimport React, { useState, useEffect, useRef } from 'react';\nimport './ShelfGrid.css';\nimport ShelfItem from './ShelfItem';\nimport ShelfDetail from '../ShelfDetail/ShelfDetail';\nimport StatusBar from '../StatusBar/StatusBar';\nimport FilterPanel from '../FilterPanel/FilterPanel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ShelfGrid = ({\n  shelves,\n  onShelfClick\n}) => {\n  _s();\n  const NUM_SHELVES = 4; // Số lượng kệ đồ\n  const NUM_TIERS_PER_SHELF = 4; // Số tầng mỗi kệ\n  const NUM_TRAYS_PER_TIER = 6; // Số ô mỗi tầng\n  const isMounted = useRef(true);\n  const [selectedShelf, setSelectedShelf] = useState(null);\n  const [stats, setStats] = useState({\n    high: 0,\n    medium: 0,\n    empty: 0\n  });\n  const [lastUpdated, setLastUpdated] = useState(new Date().toISOString());\n  const [shelvesData, setShelvesData] = useState([]);\n  const [filters, setFilters] = useState({\n    tier: 'all',\n    status: 'all'\n  });\n\n  // Kiểm tra xem có bất kỳ bộ lọc nào đang hoạt động không\n  const hasActiveFilters = filters.status !== 'all' || filters.tier !== 'all';\n\n  // Hàm tính toán trạng thái dựa trên số lượng vật phẩm và sức chứa\n  const calculateStatus = (itemCount, capacity) => {\n    const percentage = itemCount / capacity * 100;\n    let status;\n    if (percentage >= 70) status = 'HIGH';else if (percentage >= 30) status = 'MEDIUM';else status = 'EMPTY';\n    return status;\n  };\n\n  // Cleanup khi component unmount\n  useEffect(() => {\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  // Khởi tạo dữ liệu ban đầu và thiết lập interval cập nhật\n  useEffect(() => {\n    // Tạo dữ liệu mẫu ban đầu\n    const initialData = Array.from({\n      length: NUM_SHELVES\n    }, (_, shelfIndex) => {\n      const tiers = Array.from({\n        length: NUM_TIERS_PER_SHELF / 2\n      }, (_, groupIndex) => {\n        const groupedTiers = [{\n          tier: groupIndex * 2 + 1,\n          trays: Array.from({\n            length: NUM_TRAYS_PER_TIER\n          }, (_, trayIndex) => {\n            const capacity = 100;\n            const itemCount = Math.floor(Math.random() * (capacity + 1));\n            return {\n              tray: trayIndex + 1,\n              status: calculateStatus(itemCount, capacity),\n              capacity,\n              itemCount,\n              lastUpdated: new Date().toISOString()\n            };\n          })\n        }, {\n          tier: groupIndex * 2 + 2,\n          trays: Array.from({\n            length: NUM_TRAYS_PER_TIER\n          }, (_, trayIndex) => {\n            const capacity = 100;\n            const itemCount = Math.floor(Math.random() * (capacity + 1));\n            return {\n              tray: trayIndex + 1,\n              status: calculateStatus(itemCount, capacity),\n              capacity,\n              itemCount,\n              lastUpdated: new Date().toISOString()\n            };\n          })\n        }];\n        return groupedTiers;\n      });\n      return {\n        shelf: shelfIndex + 1,\n        tiers\n      };\n    });\n    setShelvesData(initialData);\n\n    // Thiết lập interval để cập nhật ngẫu nhiên\n    const interval = setInterval(() => {\n      if (isMounted.current) {\n        setShelvesData(prevData => {\n          const newData = JSON.parse(JSON.stringify(prevData));\n\n          // Chọn ngẫu nhiên một ô để cập nhật\n          const randomShelf = Math.floor(Math.random() * NUM_SHELVES);\n          const randomTierGroup = Math.floor(Math.random() * (NUM_TIERS_PER_SHELF / 2));\n          const randomTierInGroup = Math.floor(Math.random() * 2);\n          const randomTray = Math.floor(Math.random() * NUM_TRAYS_PER_TIER);\n\n          // Cập nhật thông tin của ô được chọn\n          const tray = newData[randomShelf].tiers[randomTierGroup][randomTierInGroup].trays[randomTray];\n          const newItemCount = Math.floor(Math.random() * (tray.capacity + 1));\n          tray.itemCount = newItemCount;\n          tray.status = calculateStatus(newItemCount, tray.capacity);\n          tray.lastUpdated = new Date().toISOString();\n          return newData;\n        });\n        setLastUpdated(new Date().toISOString());\n      }\n    }, 3000);\n    return () => clearInterval(interval);\n  }, []);\n\n  // Tính toán thống kê mỗi khi dữ liệu thay đổi\n  useEffect(() => {\n    const newStats = {\n      high: 0,\n      medium: 0,\n      empty: 0\n    };\n    shelvesData.forEach(shelf => {\n      shelf.tiers.forEach(group => {\n        group.forEach(tier => {\n          tier.trays.forEach(tray => {\n            newStats[tray.status.toLowerCase()]++;\n          });\n        });\n      });\n    });\n    setStats(newStats);\n  }, [shelvesData]);\n  const handleTrayClick = (shelfIndex, tierInfo, trayIndex) => {\n    // Thêm check để tránh click vào khu vực không hợp lệ\n    if (!tierInfo || !tierInfo.trays || !tierInfo.trays[trayIndex]) {\n      return;\n    }\n    const tray = tierInfo.trays[trayIndex];\n    setSelectedShelf({\n      shelf: shelfIndex + 1,\n      tier: tierInfo.tier,\n      tray: tray.tray,\n      status: tray.status,\n      capacity: tray.capacity,\n      itemCount: tray.itemCount,\n      lastUpdated: tray.lastUpdated\n    });\n  };\n  // Hàm kiểm tra một hàng (tier) có bất kỳ ô nào phù hợp với bộ lọc không\n  const hasTierMatchingItems = tier => {\n    // Nếu không có bộ lọc đang hoạt động, mọi tier đều phù hợp\n    if (filters.tier === 'all' && filters.status === 'all') {\n      return true;\n    }\n\n    // Kiểm tra xem tầng này có phù hợp với bộ lọc tầng không\n    const matchesTierFilter = filters.tier === 'all' || Number(filters.tier) === tier.tier;\n\n    // Nếu không phù hợp với bộ lọc tầng, trả về false ngay\n    if (!matchesTierFilter) {\n      return false;\n    }\n\n    // Kiểm tra xem có bất kỳ khay nào trong tầng này phù hợp với bộ lọc trạng thái\n    const hasMatchingStatus = tier.trays.some(tray => {\n      return filters.status === 'all' || filters.status === tray.status;\n    });\n    return hasMatchingStatus;\n  };\n  const handleCloseDetail = () => {\n    setSelectedShelf(null);\n  };\n\n  // Xử lý khi bộ lọc thay đổi\n  const handleFilterChange = newFilters => {\n    setFilters(newFilters);\n  };\n\n  // Lấy tất cả các tầng độc nhất\n  const getAllTiers = () => {\n    const tiers = new Set();\n    shelvesData.forEach(shelf => {\n      shelf.tiers.forEach(group => {\n        group.forEach(tier => {\n          tiers.add(tier.tier.toString());\n        });\n      });\n    });\n    return Array.from(tiers).sort((a, b) => Number(a) - Number(b));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"shelf-grid-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(StatusBar, {\n      stats: stats,\n      lastUpdated: lastUpdated\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FilterPanel, {\n      tiers: getAllTiers(),\n      statuses: ['HIGH', 'MEDIUM', 'EMPTY'],\n      filters: filters,\n      onFilterChange: handleFilterChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"shelf-grid-container\",\n      children: shelvesData.map((shelf, shelfIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"shelf-grid\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"K\\u1EC7 \", shelf.shelf]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 13\n        }, this), shelf.tiers.map((group, groupIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tier-row-group\",\n          children: group.map(tier => {\n            // Xác định xem tier này có phần tử phù hợp với bộ lọc không\n            const hasMatchingItems = hasTierMatchingItems(tier);\n\n            // Class CSS dựa trên kết quả lọc\n            const isFiltered = filters.status !== 'all' || filters.tier !== 'all';\n            const tierFilterClass = isFiltered ? hasMatchingItems ? 'has-matching-items' : 'no-matching-items' : '';\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `tier-row ${tierFilterClass}`,\n              style: {\n                transition: `all 0.7s cubic-bezier(0.4, 0, 0.2, 1) ${tier.tier * 0.1}s`\n              },\n              \"data-tier\": tier.tier,\n              \"data-has-matches\": hasMatchingItems.toString(),\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"tier-label\",\n                children: [\"T\\u1EA7ng \", tier.tier]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 232,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"tray-container\",\n                children: tier.trays.map((tray, trayIndex) => {\n                  // Kiểm tra cụ thể cho mỗi loại bộ lọc\n                  const matchesTier = filters.tier === 'all' || Number(filters.tier) === tier.tier;\n                  const matchesStatus = filters.status === 'all' || filters.status === tray.status;\n                  const isMatching = matchesTier && matchesStatus;\n                  const isFiltered = filters.status !== 'all' || filters.tier !== 'all';\n                  return /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: `tray-cell ${isFiltered ? isMatching ? 'matching-filter' : 'not-matching-filter' : ''} status-${tray.status.toLowerCase()}`,\n                    style: {\n                      transition: `all 0.5s cubic-bezier(0.4, 0, 0.2, 1) ${trayIndex * 0.05}s`\n                    },\n                    \"data-tier\": tier.tier,\n                    \"data-tray\": tray.tray,\n                    \"data-status\": tray.status,\n                    \"data-matches\": isMatching.toString(),\n                    children: /*#__PURE__*/_jsxDEV(ShelfItem, {\n                      tier: tier.tier,\n                      tray: tray.tray,\n                      status: tray.status,\n                      onClick: () => handleTrayClick(shelfIndex, tier, trayIndex),\n                      isFiltered: hasActiveFilters && isMatching\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 253,\n                      columnNumber: 31\n                    }, this)\n                  }, `tray-${tier.tier}-${tray.tray}`, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 242,\n                    columnNumber: 29\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 233,\n                columnNumber: 23\n              }, this)]\n            }, `tier-${tier.tier}`, true, {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 21\n            }, this);\n          })\n        }, `tier-group-${groupIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 15\n        }, this))]\n      }, `shelf-${shelf.shelf}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this), selectedShelf && /*#__PURE__*/_jsxDEV(ShelfDetail, {\n      shelf: selectedShelf,\n      onClose: handleCloseDetail\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 198,\n    columnNumber: 5\n  }, this);\n};\n_s(ShelfGrid, \"L3vocTN1tJ93R7pXeH/4d5te6YY=\");\n_c = ShelfGrid;\nexport default ShelfGrid;\nvar _c;\n$RefreshReg$(_c, \"ShelfGrid\");","map":{"version":3,"names":["React","useState","useEffect","useRef","ShelfItem","ShelfDetail","StatusBar","FilterPanel","jsxDEV","_jsxDEV","ShelfGrid","shelves","onShelfClick","_s","NUM_SHELVES","NUM_TIERS_PER_SHELF","NUM_TRAYS_PER_TIER","isMounted","selectedShelf","setSelectedShelf","stats","setStats","high","medium","empty","lastUpdated","setLastUpdated","Date","toISOString","shelvesData","setShelvesData","filters","setFilters","tier","status","hasActiveFilters","calculateStatus","itemCount","capacity","percentage","current","initialData","Array","from","length","_","shelfIndex","tiers","groupIndex","groupedTiers","trays","trayIndex","Math","floor","random","tray","shelf","interval","setInterval","prevData","newData","JSON","parse","stringify","randomShelf","randomTierGroup","randomTierInGroup","randomTray","newItemCount","clearInterval","newStats","forEach","group","toLowerCase","handleTrayClick","tierInfo","hasTierMatchingItems","matchesTierFilter","Number","hasMatchingStatus","some","handleCloseDetail","handleFilterChange","newFilters","getAllTiers","Set","add","toString","sort","a","b","className","children","fileName","_jsxFileName","lineNumber","columnNumber","statuses","onFilterChange","map","hasMatchingItems","isFiltered","tierFilterClass","style","transition","matchesTier","matchesStatus","isMatching","onClick","onClose","_c","$RefreshReg$"],"sources":["C:/Documents/warehouse-dashboard/src/components/ShelfGrid/ShelfGrid.js"],"sourcesContent":["// File: ShelfGrid.js\n// Mô tả: Component React hiển thị lưới các kệ hàng trong dashboard quản lý kho.\n// Chức năng: Hiển thị danh sách kệ hàng theo tầng và khay, cho phép chọn từng kệ để xem chi tiết.\nimport React, { useState, useEffect, useRef } from 'react';\nimport './ShelfGrid.css';\nimport ShelfItem from './ShelfItem';\nimport ShelfDetail from '../ShelfDetail/ShelfDetail';\nimport StatusBar from '../StatusBar/StatusBar';\nimport FilterPanel from '../FilterPanel/FilterPanel';\n\nconst ShelfGrid = ({ shelves, onShelfClick }) => {\n  const NUM_SHELVES = 4; // Số lượng kệ đồ\n  const NUM_TIERS_PER_SHELF = 4; // Số tầng mỗi kệ\n  const NUM_TRAYS_PER_TIER = 6; // Số ô mỗi tầng\n  const isMounted = useRef(true);\n\n  const [selectedShelf, setSelectedShelf] = useState(null);\n  const [stats, setStats] = useState({ high: 0, medium: 0, empty: 0 });\n  const [lastUpdated, setLastUpdated] = useState(new Date().toISOString());\n  const [shelvesData, setShelvesData] = useState([]);\n  const [filters, setFilters] = useState({\n    tier: 'all',\n    status: 'all'\n  });\n\n  // Kiểm tra xem có bất kỳ bộ lọc nào đang hoạt động không\n  const hasActiveFilters = filters.status !== 'all' || filters.tier !== 'all';\n  \n  // Hàm tính toán trạng thái dựa trên số lượng vật phẩm và sức chứa\n  const calculateStatus = (itemCount, capacity) => {\n    const percentage = (itemCount / capacity) * 100;\n    let status;\n    if (percentage >= 70) status = 'HIGH';\n    else if (percentage >= 30) status = 'MEDIUM';\n    else status = 'EMPTY';\n    \n    return status;\n  };\n\n  // Cleanup khi component unmount\n  useEffect(() => {\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  // Khởi tạo dữ liệu ban đầu và thiết lập interval cập nhật\n  useEffect(() => {\n    // Tạo dữ liệu mẫu ban đầu\n    const initialData = Array.from({ length: NUM_SHELVES }, (_, shelfIndex) => {\n      const tiers = Array.from({ length: NUM_TIERS_PER_SHELF / 2 }, (_, groupIndex) => {\n        const groupedTiers = [\n          { \n            tier: groupIndex * 2 + 1, \n            trays: Array.from({ length: NUM_TRAYS_PER_TIER }, (_, trayIndex) => {\n              const capacity = 100;\n              const itemCount = Math.floor(Math.random() * (capacity + 1));\n              return {\n                tray: trayIndex + 1,\n                status: calculateStatus(itemCount, capacity),\n                capacity,\n                itemCount,\n                lastUpdated: new Date().toISOString()\n              };\n            })\n          },\n          { \n            tier: groupIndex * 2 + 2, \n            trays: Array.from({ length: NUM_TRAYS_PER_TIER }, (_, trayIndex) => {\n              const capacity = 100;\n              const itemCount = Math.floor(Math.random() * (capacity + 1));\n              return {\n                tray: trayIndex + 1,\n                status: calculateStatus(itemCount, capacity),\n                capacity,\n                itemCount,\n                lastUpdated: new Date().toISOString()\n              };\n            })\n          }\n        ];\n        return groupedTiers;\n      });\n      return { shelf: shelfIndex + 1, tiers };\n    });\n\n    setShelvesData(initialData);\n\n    // Thiết lập interval để cập nhật ngẫu nhiên\n    const interval = setInterval(() => {\n      if (isMounted.current) {\n        setShelvesData(prevData => {\n          const newData = JSON.parse(JSON.stringify(prevData));\n          \n          // Chọn ngẫu nhiên một ô để cập nhật\n          const randomShelf = Math.floor(Math.random() * NUM_SHELVES);\n          const randomTierGroup = Math.floor(Math.random() * (NUM_TIERS_PER_SHELF / 2));\n          const randomTierInGroup = Math.floor(Math.random() * 2);\n          const randomTray = Math.floor(Math.random() * NUM_TRAYS_PER_TIER);\n          \n          // Cập nhật thông tin của ô được chọn\n          const tray = newData[randomShelf].tiers[randomTierGroup][randomTierInGroup].trays[randomTray];\n          const newItemCount = Math.floor(Math.random() * (tray.capacity + 1));\n          tray.itemCount = newItemCount;\n          tray.status = calculateStatus(newItemCount, tray.capacity);\n          tray.lastUpdated = new Date().toISOString();\n          \n          return newData;\n        });\n        setLastUpdated(new Date().toISOString());\n      }\n    }, 3000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  // Tính toán thống kê mỗi khi dữ liệu thay đổi\n  useEffect(() => {\n    const newStats = { high: 0, medium: 0, empty: 0 };\n    \n    shelvesData.forEach(shelf => {\n      shelf.tiers.forEach(group => {\n        group.forEach(tier => {\n          tier.trays.forEach(tray => {\n            newStats[tray.status.toLowerCase()]++;\n          });\n        });\n      });\n    });\n    \n    setStats(newStats);\n  }, [shelvesData]);\n\n  const handleTrayClick = (shelfIndex, tierInfo, trayIndex) => {\n    // Thêm check để tránh click vào khu vực không hợp lệ\n    if (!tierInfo || !tierInfo.trays || !tierInfo.trays[trayIndex]) {\n      return;\n    }\n  \n    const tray = tierInfo.trays[trayIndex];\n    \n    setSelectedShelf({\n      shelf: shelfIndex + 1,\n      tier: tierInfo.tier,\n      tray: tray.tray,\n      status: tray.status,\n      capacity: tray.capacity,\n      itemCount: tray.itemCount,\n      lastUpdated: tray.lastUpdated\n    });\n  };\n  // Hàm kiểm tra một hàng (tier) có bất kỳ ô nào phù hợp với bộ lọc không\n  const hasTierMatchingItems = (tier) => {\n    // Nếu không có bộ lọc đang hoạt động, mọi tier đều phù hợp\n    if (filters.tier === 'all' && filters.status === 'all') {\n      return true;\n    }\n    \n    // Kiểm tra xem tầng này có phù hợp với bộ lọc tầng không\n    const matchesTierFilter = filters.tier === 'all' || Number(filters.tier) === tier.tier;\n    \n    // Nếu không phù hợp với bộ lọc tầng, trả về false ngay\n    if (!matchesTierFilter) {\n      return false;\n    }\n    \n    // Kiểm tra xem có bất kỳ khay nào trong tầng này phù hợp với bộ lọc trạng thái\n    const hasMatchingStatus = tier.trays.some(tray => {\n      return filters.status === 'all' || filters.status === tray.status;\n    });\n    \n    return hasMatchingStatus;\n  };\n\n  const handleCloseDetail = () => {\n    setSelectedShelf(null);\n  };\n\n  // Xử lý khi bộ lọc thay đổi\n  const handleFilterChange = (newFilters) => {\n    setFilters(newFilters);\n  };\n\n  // Lấy tất cả các tầng độc nhất\n  const getAllTiers = () => {\n    const tiers = new Set();\n    shelvesData.forEach(shelf => {\n      shelf.tiers.forEach(group => {\n        group.forEach(tier => {\n          tiers.add(tier.tier.toString());\n        });\n      });\n    });\n    return Array.from(tiers).sort((a, b) => Number(a) - Number(b));\n  };\n\n  return (\n    <div className=\"shelf-grid-wrapper\">\n      <StatusBar stats={stats} lastUpdated={lastUpdated} />\n      <FilterPanel \n        tiers={getAllTiers()}\n        statuses={['HIGH', 'MEDIUM', 'EMPTY']}\n        filters={filters}\n        onFilterChange={handleFilterChange}\n      />\n      <div className=\"shelf-grid-container\">\n        {shelvesData.map((shelf, shelfIndex) => (\n          <div key={`shelf-${shelf.shelf}`} className=\"shelf-grid\">\n            <h3>Kệ {shelf.shelf}</h3>\n            {shelf.tiers.map((group, groupIndex) => (\n              <div key={`tier-group-${groupIndex}`} className=\"tier-row-group\">\n                {group.map((tier) => {\n                  // Xác định xem tier này có phần tử phù hợp với bộ lọc không\n                  const hasMatchingItems = hasTierMatchingItems(tier);\n                  \n                  // Class CSS dựa trên kết quả lọc\n                  const isFiltered = filters.status !== 'all' || filters.tier !== 'all';\n                  const tierFilterClass = isFiltered\n                    ? (hasMatchingItems ? 'has-matching-items' : 'no-matching-items')\n                    : '';\n                  \n                  return (\n                    <div \n                      key={`tier-${tier.tier}`} \n                      className={`tier-row ${tierFilterClass}`}\n                      style={{\n                        transition: `all 0.7s cubic-bezier(0.4, 0, 0.2, 1) ${tier.tier * 0.1}s`\n                      }}\n                      data-tier={tier.tier}\n                      data-has-matches={hasMatchingItems.toString()}\n                    >\n                      <div className=\"tier-label\">Tầng {tier.tier}</div>\n                      <div className=\"tray-container\">\n                        {tier.trays.map((tray, trayIndex) => {\n                          // Kiểm tra cụ thể cho mỗi loại bộ lọc\n                          const matchesTier = filters.tier === 'all' || Number(filters.tier) === tier.tier;\n                          const matchesStatus = filters.status === 'all' || filters.status === tray.status;\n                          const isMatching = matchesTier && matchesStatus;\n                          const isFiltered = filters.status !== 'all' || filters.tier !== 'all';\n                          \n                          return (\n                            <div \n                              key={`tray-${tier.tier}-${tray.tray}`} \n                              className={`tray-cell ${isFiltered ? (isMatching ? 'matching-filter' : 'not-matching-filter') : ''} status-${tray.status.toLowerCase()}`}\n                              style={{\n                                transition: `all 0.5s cubic-bezier(0.4, 0, 0.2, 1) ${trayIndex * 0.05}s`\n                              }}\n                              data-tier={tier.tier}\n                              data-tray={tray.tray}\n                              data-status={tray.status}\n                              data-matches={isMatching.toString()}\n                            >\n                              <ShelfItem\n                                tier={tier.tier}\n                                tray={tray.tray}\n                                status={tray.status}\n                                onClick={() => handleTrayClick(shelfIndex, tier, trayIndex)}\n                                isFiltered={hasActiveFilters && isMatching}\n                              />\n                            </div>\n                          );\n                        })}\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n      {selectedShelf && (\n        <ShelfDetail\n          shelf={selectedShelf}\n          onClose={handleCloseDetail}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default ShelfGrid;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}