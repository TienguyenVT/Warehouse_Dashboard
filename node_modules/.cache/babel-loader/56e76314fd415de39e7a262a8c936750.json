{"ast":null,"code":"// Giả lập một backend service\nconst users = [{\n  username: 'admin',\n  password: 'admin123',\n  role: 'admin'\n}, {\n  username: 'user',\n  password: 'user123',\n  role: 'user'\n}];\n\n// Mock JWT token generation\nconst generateToken = user => {\n  return `mock-jwt-token-${user.username}-${Date.now()}`;\n};\nexport const authService = {\n  register: async userData => {\n    // Kiểm tra xem username đã tồn tại chưa\n    const existingUser = users.find(user => user.username === userData.username);\n    if (existingUser) {\n      throw new Error('Tên người dùng đã tồn tại');\n    }\n\n    // Trong thực tế, mật khẩu nên được hash trước khi lưu\n    const newUser = {\n      ...userData,\n      id: Date.now().toString(),\n      createdAt: new Date().toISOString()\n    };\n    users.push(newUser);\n    return {\n      success: true,\n      user: {\n        ...newUser,\n        password: undefined\n      }\n    };\n  },\n  login: async (username, password) => {\n    return loginUser(username, password);\n  }\n};\nexport const loginUser = async (username, password) => {\n  // Tìm user trong danh sách\n  const user = users.find(u => u.username === username && u.password === password);\n  if (!user) {\n    throw new Error('Tên đăng nhập hoặc mật khẩu không đúng');\n  }\n\n  // Tạo token\n  const token = generateToken(user);\n  return {\n    success: true,\n    user: {\n      ...user,\n      password: undefined\n    },\n    token\n  };\n};\n\n// Mock logout function\nexport const logoutUser = async () => {\n  await new Promise(resolve => setTimeout(resolve, 200));\n  // Xóa thông tin đăng nhập khỏi localStorage\n  localStorage.removeItem('authToken');\n  localStorage.removeItem('user');\n};\nexport const verifyToken = async token => {\n  // Trong thực tế, đây sẽ là logic verify JWT token\n  // Ở đây chúng ta chỉ kiểm tra xem token có tồn tại không\n  if (!token) {\n    throw new Error('Token không hợp lệ');\n  }\n  return true;\n};","map":{"version":3,"names":["users","username","password","role","generateToken","user","Date","now","authService","register","userData","existingUser","find","Error","newUser","id","toString","createdAt","toISOString","push","success","undefined","login","loginUser","u","token","logoutUser","Promise","resolve","setTimeout","localStorage","removeItem","verifyToken"],"sources":["C:/Documents/warehouse-dashboard/src/utils/auth.js"],"sourcesContent":["// Giả lập một backend service\r\nconst users = [\r\n    { username: 'admin', password: 'admin123', role: 'admin' },\r\n    { username: 'user', password: 'user123', role: 'user' }\r\n];\r\n\r\n// Mock JWT token generation\r\nconst generateToken = (user) => {\r\n    return `mock-jwt-token-${user.username}-${Date.now()}`;\r\n};\r\n\r\nexport const authService = {\r\n    register: async (userData) => {\r\n        // Kiểm tra xem username đã tồn tại chưa\r\n        const existingUser = users.find(\r\n            user => user.username === userData.username\r\n        );\r\n\r\n        if (existingUser) {\r\n            throw new Error('Tên người dùng đã tồn tại');\r\n        }\r\n\r\n        // Trong thực tế, mật khẩu nên được hash trước khi lưu\r\n        const newUser = {\r\n            ...userData,\r\n            id: Date.now().toString(),\r\n            createdAt: new Date().toISOString()\r\n        };\r\n\r\n        users.push(newUser);\r\n        return { success: true, user: { ...newUser, password: undefined } };\r\n    },\r\n\r\n    login: async (username, password) => {\r\n        return loginUser(username, password);\r\n    }\r\n};\r\n\r\nexport const loginUser = async (username, password) => {\r\n    // Tìm user trong danh sách\r\n    const user = users.find(u => u.username === username && u.password === password);\r\n\r\n    if (!user) {\r\n        throw new Error('Tên đăng nhập hoặc mật khẩu không đúng');\r\n    }\r\n\r\n    // Tạo token\r\n    const token = generateToken(user);\r\n\r\n    return {\r\n        success: true,\r\n        user: { ...user, password: undefined },\r\n        token\r\n    };\r\n};\r\n\r\n// Mock logout function\r\nexport const logoutUser = async () => {\r\n    await new Promise(resolve => setTimeout(resolve, 200));\r\n    // Xóa thông tin đăng nhập khỏi localStorage\r\n    localStorage.removeItem('authToken');\r\n    localStorage.removeItem('user');\r\n};\r\n\r\nexport const verifyToken = async (token) => {\r\n    // Trong thực tế, đây sẽ là logic verify JWT token\r\n    // Ở đây chúng ta chỉ kiểm tra xem token có tồn tại không\r\n    if (!token) {\r\n        throw new Error('Token không hợp lệ');\r\n    }\r\n    return true;\r\n};\r\n"],"mappings":"AAAA;AACA,MAAMA,KAAK,GAAG,CACV;EAAEC,QAAQ,EAAE,OAAO;EAAEC,QAAQ,EAAE,UAAU;EAAEC,IAAI,EAAE;AAAQ,CAAC,EAC1D;EAAEF,QAAQ,EAAE,MAAM;EAAEC,QAAQ,EAAE,SAAS;EAAEC,IAAI,EAAE;AAAO,CAAC,CAC1D;;AAED;AACA,MAAMC,aAAa,GAAIC,IAAI,IAAK;EAC5B,OAAO,kBAAkBA,IAAI,CAACJ,QAAQ,IAAIK,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;AAC1D,CAAC;AAED,OAAO,MAAMC,WAAW,GAAG;EACvBC,QAAQ,EAAE,MAAOC,QAAQ,IAAK;IAC1B;IACA,MAAMC,YAAY,GAAGX,KAAK,CAACY,IAAI,CAC3BP,IAAI,IAAIA,IAAI,CAACJ,QAAQ,KAAKS,QAAQ,CAACT,QACvC,CAAC;IAED,IAAIU,YAAY,EAAE;MACd,MAAM,IAAIE,KAAK,CAAC,2BAA2B,CAAC;IAChD;;IAEA;IACA,MAAMC,OAAO,GAAG;MACZ,GAAGJ,QAAQ;MACXK,EAAE,EAAET,IAAI,CAACC,GAAG,CAAC,CAAC,CAACS,QAAQ,CAAC,CAAC;MACzBC,SAAS,EAAE,IAAIX,IAAI,CAAC,CAAC,CAACY,WAAW,CAAC;IACtC,CAAC;IAEDlB,KAAK,CAACmB,IAAI,CAACL,OAAO,CAAC;IACnB,OAAO;MAAEM,OAAO,EAAE,IAAI;MAAEf,IAAI,EAAE;QAAE,GAAGS,OAAO;QAAEZ,QAAQ,EAAEmB;MAAU;IAAE,CAAC;EACvE,CAAC;EAEDC,KAAK,EAAE,MAAAA,CAAOrB,QAAQ,EAAEC,QAAQ,KAAK;IACjC,OAAOqB,SAAS,CAACtB,QAAQ,EAAEC,QAAQ,CAAC;EACxC;AACJ,CAAC;AAED,OAAO,MAAMqB,SAAS,GAAG,MAAAA,CAAOtB,QAAQ,EAAEC,QAAQ,KAAK;EACnD;EACA,MAAMG,IAAI,GAAGL,KAAK,CAACY,IAAI,CAACY,CAAC,IAAIA,CAAC,CAACvB,QAAQ,KAAKA,QAAQ,IAAIuB,CAAC,CAACtB,QAAQ,KAAKA,QAAQ,CAAC;EAEhF,IAAI,CAACG,IAAI,EAAE;IACP,MAAM,IAAIQ,KAAK,CAAC,wCAAwC,CAAC;EAC7D;;EAEA;EACA,MAAMY,KAAK,GAAGrB,aAAa,CAACC,IAAI,CAAC;EAEjC,OAAO;IACHe,OAAO,EAAE,IAAI;IACbf,IAAI,EAAE;MAAE,GAAGA,IAAI;MAAEH,QAAQ,EAAEmB;IAAU,CAAC;IACtCI;EACJ,CAAC;AACL,CAAC;;AAED;AACA,OAAO,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;EAClC,MAAM,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;EACtD;EACAE,YAAY,CAACC,UAAU,CAAC,WAAW,CAAC;EACpCD,YAAY,CAACC,UAAU,CAAC,MAAM,CAAC;AACnC,CAAC;AAED,OAAO,MAAMC,WAAW,GAAG,MAAOP,KAAK,IAAK;EACxC;EACA;EACA,IAAI,CAACA,KAAK,EAAE;IACR,MAAM,IAAIZ,KAAK,CAAC,oBAAoB,CAAC;EACzC;EACA,OAAO,IAAI;AACf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}