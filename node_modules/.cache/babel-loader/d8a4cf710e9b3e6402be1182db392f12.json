{"ast":null,"code":"// MOCK DATA & API ONLY - KHÔNG GỌI BACKEND NỮA\n\n// Giả lập danh sách người dùng\nconst users = [{\n  id: 1,\n  username: 'admin',\n  password: 'admin123',\n  email: 'admin@example.com'\n}, {\n  id: 2,\n  username: 'user',\n  password: 'user123',\n  email: 'user@example.com'\n}];\nlet currentUser = users[0];\nconst auth = {\n  register: async userData => {\n    if (users.some(u => u.username === userData.username || u.email === userData.email)) {\n      throw new Error('Username hoặc email đã tồn tại');\n    }\n    const newUser = {\n      id: users.length + 1,\n      ...userData\n    };\n    users.push(newUser);\n    return {\n      message: 'Đăng ký thành công',\n      user: {\n        ...newUser,\n        password: undefined\n      }\n    };\n  },\n  login: async (username, password) => {\n    const user = users.find(u => u.username === username && u.password === password);\n    if (!user) {\n      throw new Error('Tên đăng nhập hoặc mật khẩu không đúng');\n    }\n    currentUser = user;\n    return {\n      token: 'mock-token',\n      user: {\n        id: user.id,\n        username: user.username,\n        email: user.email\n      }\n    };\n  },\n  getProfile: async () => {\n    if (!currentUser) throw new Error('Chưa đăng nhập');\n    return {\n      id: currentUser.id,\n      username: currentUser.username,\n      email: currentUser.email\n    };\n  }\n};\n\n// Giả lập dữ liệu kệ hàng\nfunction generateShelves() {\n  const shelves = [];\n  for (let shelfNum = 1; shelfNum <= 5; shelfNum++) {\n    // 5 kệ hàng\n    for (let tier = 1; tier <= 3; tier++) {\n      for (let tray = 1; tray <= 5; tray++) {\n        const capacity = Math.floor(Math.random() * 101);\n        let status;\n        if (capacity >= 80) status = 'HIGH';else if (capacity >= 30) status = 'MEDIUM';else status = 'EMPTY';\n        shelves.push({\n          shelf: shelfNum,\n          tier,\n          tray,\n          status,\n          capacity,\n          lastUpdated: new Date().toISOString()\n        });\n      }\n    }\n  }\n  return shelves;\n}\nlet shelvesData = generateShelves();\nconst shelfAPI = {\n  fetchAll: async () => {\n    return shelvesData;\n  },\n  getStats: async () => {\n    const stats = {\n      high: 0,\n      medium: 0,\n      empty: 0\n    };\n    shelvesData.forEach(shelf => {\n      stats[shelf.status.toLowerCase()]++;\n    });\n    return stats;\n  },\n  subscribeToUpdates: async onUpdate => {\n    // Giả lập cập nhật ngẫu nhiên mỗi 10s\n    const intervalId = setInterval(() => {\n      const idx = Math.floor(Math.random() * shelvesData.length);\n      const shelf = shelvesData[idx];\n      // Random capacity\n      shelf.capacity = Math.floor(Math.random() * 101);\n      if (shelf.capacity >= 80) shelf.status = 'HIGH';else if (shelf.capacity >= 30) shelf.status = 'MEDIUM';else shelf.status = 'EMPTY';\n      shelf.lastUpdated = new Date().toISOString();\n      onUpdate({\n        ...shelf\n      });\n    }, 10000);\n    // Trả về hàm unsubscribe\n    return () => clearInterval(intervalId);\n  },\n  updateShelf: async (tier, tray, data) => {\n    // Tìm đúng kệ theo tier, tray và shelf (nếu có)\n    const idx = shelvesData.findIndex(s => s.tier === tier && s.tray === tray && (data.shelf ? s.shelf === data.shelf : true));\n    if (idx === -1) throw new Error('Không tìm thấy kệ');\n    shelvesData[idx] = {\n      ...shelvesData[idx],\n      ...data,\n      lastUpdated: new Date().toISOString()\n    };\n    return shelvesData[idx];\n  }\n};\nexport const authAPI = auth;\nexport const shelf = shelfAPI;\nexport const api = {\n  auth,\n  shelf: shelfAPI\n};","map":{"version":3,"names":["users","id","username","password","email","currentUser","auth","register","userData","some","u","Error","newUser","length","push","message","user","undefined","login","find","token","getProfile","generateShelves","shelves","shelfNum","tier","tray","capacity","Math","floor","random","status","shelf","lastUpdated","Date","toISOString","shelvesData","shelfAPI","fetchAll","getStats","stats","high","medium","empty","forEach","toLowerCase","subscribeToUpdates","onUpdate","intervalId","setInterval","idx","clearInterval","updateShelf","data","findIndex","s","authAPI","api"],"sources":["C:/Documents/warehouse-dashboard/src/utils/api.js"],"sourcesContent":["\r\n// MOCK DATA & API ONLY - KHÔNG GỌI BACKEND NỮA\r\n\r\n// Giả lập danh sách người dùng\r\nconst users = [\r\n  { id: 1, username: 'admin', password: 'admin123', email: 'admin@example.com' },\r\n  { id: 2, username: 'user', password: 'user123', email: 'user@example.com' }\r\n];\r\n\r\nlet currentUser = users[0];\r\n\r\nconst auth = {\r\n  register: async (userData) => {\r\n    if (users.some(u => u.username === userData.username || u.email === userData.email)) {\r\n      throw new Error('Username hoặc email đã tồn tại');\r\n    }\r\n    const newUser = {\r\n      id: users.length + 1,\r\n      ...userData\r\n    };\r\n    users.push(newUser);\r\n    return { message: 'Đăng ký thành công', user: { ...newUser, password: undefined } };\r\n  },\r\n  login: async (username, password) => {\r\n    const user = users.find(u => u.username === username && u.password === password);\r\n    if (!user) {\r\n      throw new Error('Tên đăng nhập hoặc mật khẩu không đúng');\r\n    }\r\n    currentUser = user;\r\n    return {\r\n      token: 'mock-token',\r\n      user: { id: user.id, username: user.username, email: user.email }\r\n    };\r\n  },\r\n  getProfile: async () => {\r\n    if (!currentUser) throw new Error('Chưa đăng nhập');\r\n    return { id: currentUser.id, username: currentUser.username, email: currentUser.email };\r\n  }\r\n};\r\n\r\n// Giả lập dữ liệu kệ hàng\r\nfunction generateShelves() {\r\n  const shelves = [];\r\n  for (let shelfNum = 1; shelfNum <= 5; shelfNum++) { // 5 kệ hàng\r\n    for (let tier = 1; tier <= 3; tier++) {\r\n      for (let tray = 1; tray <= 5; tray++) {\r\n        const capacity = Math.floor(Math.random() * 101);\r\n        let status;\r\n        if (capacity >= 80) status = 'HIGH';\r\n        else if (capacity >= 30) status = 'MEDIUM';\r\n        else status = 'EMPTY';\r\n        shelves.push({\r\n          shelf: shelfNum,\r\n          tier,\r\n          tray,\r\n          status,\r\n          capacity,\r\n          lastUpdated: new Date().toISOString()\r\n        });\r\n      }\r\n    }\r\n  }\r\n  return shelves;\r\n}\r\n\r\nlet shelvesData = generateShelves();\r\n\r\nconst shelfAPI = {\r\n  fetchAll: async () => {\r\n    return shelvesData;\r\n  },\r\n  getStats: async () => {\r\n    const stats = { high: 0, medium: 0, empty: 0 };\r\n    shelvesData.forEach(shelf => {\r\n      stats[shelf.status.toLowerCase()]++;\r\n    });\r\n    return stats;\r\n  },\r\n  subscribeToUpdates: async (onUpdate) => {\r\n    // Giả lập cập nhật ngẫu nhiên mỗi 10s\r\n    const intervalId = setInterval(() => {\r\n      const idx = Math.floor(Math.random() * shelvesData.length);\r\n      const shelf = shelvesData[idx];\r\n      // Random capacity\r\n      shelf.capacity = Math.floor(Math.random() * 101);\r\n      if (shelf.capacity >= 80) shelf.status = 'HIGH';\r\n      else if (shelf.capacity >= 30) shelf.status = 'MEDIUM';\r\n      else shelf.status = 'EMPTY';\r\n      shelf.lastUpdated = new Date().toISOString();\r\n      onUpdate({ ...shelf });\r\n    }, 10000);\r\n    // Trả về hàm unsubscribe\r\n    return () => clearInterval(intervalId);\r\n  },\r\n  updateShelf: async (tier, tray, data) => {\r\n    // Tìm đúng kệ theo tier, tray và shelf (nếu có)\r\n    const idx = shelvesData.findIndex(s => s.tier === tier && s.tray === tray && (data.shelf ? s.shelf === data.shelf : true));\r\n    if (idx === -1) throw new Error('Không tìm thấy kệ');\r\n    shelvesData[idx] = {\r\n      ...shelvesData[idx],\r\n      ...data,\r\n      lastUpdated: new Date().toISOString()\r\n    };\r\n    return shelvesData[idx];\r\n  }\r\n};\r\n\r\nexport const authAPI = auth;\r\nexport const shelf = shelfAPI;\r\nexport const api = { auth, shelf: shelfAPI };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}