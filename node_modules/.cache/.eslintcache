[{"C:\\Documents\\warehouse-dashboard\\src\\index.js":"1","C:\\Documents\\warehouse-dashboard\\src\\App.js":"2","C:\\Documents\\warehouse-dashboard\\src\\context\\AuthContext.js":"3","C:\\Documents\\warehouse-dashboard\\src\\pages\\Login.js":"4","C:\\Documents\\warehouse-dashboard\\src\\pages\\Dashboard.js":"5","C:\\Documents\\warehouse-dashboard\\src\\components\\ProtectedRoute\\ProtectedRoute.js":"6","C:\\Documents\\warehouse-dashboard\\src\\components\\ShelfDetail\\ShelfDetail.js":"7","C:\\Documents\\warehouse-dashboard\\src\\components\\ShelfGrid\\ShelfGrid.js":"8","C:\\Documents\\warehouse-dashboard\\src\\utils\\api.js":"9","C:\\Documents\\warehouse-dashboard\\src\\components\\FilterPanel\\FilterPanel.js":"10","C:\\Documents\\warehouse-dashboard\\src\\components\\ShelfGrid\\ShelfItem.js":"11","C:\\Documents\\warehouse-dashboard\\src\\components\\StatusBar\\StatusBar.js":"12","C:\\Documents\\warehouse-dashboard\\src\\utils\\mqtt.js":"13","C:\\Documents\\warehouse-dashboard\\src\\utils\\auth.js":"14"},{"size":448,"mtime":1747877744244,"results":"15","hashOfConfig":"16"},{"size":1206,"mtime":1747887635886,"results":"17","hashOfConfig":"16"},{"size":2339,"mtime":1747887580569,"results":"18","hashOfConfig":"16"},{"size":5422,"mtime":1747880505248,"results":"19","hashOfConfig":"16"},{"size":7586,"mtime":1747886550408,"results":"20","hashOfConfig":"16"},{"size":959,"mtime":1747804340437,"results":"21","hashOfConfig":"16"},{"size":3377,"mtime":1747885128548,"results":"22","hashOfConfig":"16"},{"size":4962,"mtime":1747885067475,"results":"23","hashOfConfig":"16"},{"size":3727,"mtime":1747886187754,"results":"24","hashOfConfig":"16"},{"size":5091,"mtime":1747885229980,"results":"25","hashOfConfig":"16"},{"size":1693,"mtime":1747885098625,"results":"26","hashOfConfig":"16"},{"size":3207,"mtime":1747812058231,"results":"27","hashOfConfig":"16"},{"size":7834,"mtime":1747887743549,"results":"28","hashOfConfig":"16"},{"size":2161,"mtime":1747887567624,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"ziuld6",{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Documents\\warehouse-dashboard\\src\\index.js",[],["62","63"],"C:\\Documents\\warehouse-dashboard\\src\\App.js",[],"C:\\Documents\\warehouse-dashboard\\src\\context\\AuthContext.js",[],"C:\\Documents\\warehouse-dashboard\\src\\pages\\Login.js",["64","65"],"import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useAuth } from '../context/AuthContext';\r\nimport { loginUser } from '../utils/auth';\r\nimport './Login.css';\r\n\r\nconst Login = () => {\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [error, setError] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const [showPassword, setShowPassword] = useState(false);\r\n    const navigate = useNavigate();\r\n    const { login } = useAuth();\r\n\r\n    // Clear error when inputs change\r\n    useEffect(() => {\r\n        if (error) setError('');\r\n    }, [username, password]);\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setError('');\r\n        setLoading(true);\r\n        \r\n        try {\r\n            const response = await loginUser(username, password);\r\n            if (response.success) {\r\n                login(response.user, response.token);\r\n                \r\n                // Log thông tin để debug\r\n                console.log('Đăng nhập thành công:', response);\r\n                \r\n                // Chuyển hướng với thông báo chi tiết\r\n                navigate('/dashboard', { \r\n                    state: { \r\n                        from: 'login', \r\n                        user: response.user \r\n                    } \r\n                });\r\n            }\r\n        } catch (err) {\r\n            setError(err.message || 'Đăng nhập thất bại. Vui lòng thử lại.');\r\n            console.error('Chi tiết lỗi đăng nhập:', err);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleSampleLogin = (sampleUsername, samplePassword) => {\r\n        setUsername(sampleUsername);\r\n        setPassword(samplePassword);\r\n    };\r\n\r\n    return (\r\n        <div className=\"login-container\">\r\n            <div className=\"login-box\">\r\n                <h2>Shelf Dashboard</h2>\r\n                <form onSubmit={handleSubmit}>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"username\">Tên đăng nhập</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            id=\"username\"\r\n                            value={username}\r\n                            onChange={(e) => setUsername(e.target.value)}\r\n                            required\r\n                            disabled={loading}\r\n                            placeholder=\"Nhập tên đăng nhập\"\r\n                            autoComplete=\"username\"\r\n                            autoFocus\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"password\">Mật khẩu</label>\r\n                        <div className=\"password-input\">\r\n                            <input\r\n                                type={showPassword ? \"text\" : \"password\"}\r\n                                id=\"password\"\r\n                                value={password}\r\n                                onChange={(e) => setPassword(e.target.value)}\r\n                                required\r\n                                disabled={loading}\r\n                                placeholder=\"Nhập mật khẩu\"\r\n                                autoComplete=\"current-password\"\r\n                            />\r\n                            <button\r\n                                type=\"button\"\r\n                                className=\"show-password-btn\"\r\n                                onClick={() => setShowPassword(!showPassword)}\r\n                                tabIndex=\"-1\"\r\n                                aria-label={showPassword ? \"Ẩn mật khẩu\" : \"Hiện mật khẩu\"}\r\n                            >\r\n                                {showPassword ? '👁️' : '👁️‍🗨️'}\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                    {error && (\r\n                        <div className=\"error-message\" role=\"alert\">\r\n                            {error}\r\n                        </div>\r\n                    )}\r\n                    <button \r\n                        type=\"submit\" \r\n                        className=\"login-button\" \r\n                        disabled={loading}\r\n                    >\r\n                        {loading ? 'Đang xử lý...' : 'Đăng Nhập'}\r\n                    </button>\r\n                </form>\r\n                {/* <div className=\"login-help\">\r\n                    <p>Tài khoản thử nghiệm</p>\r\n                    <ul>\r\n                        <li \r\n                            onClick={() => handleSampleLogin('admin', 'admin123')}\r\n                            title=\"Click để điền thông tin đăng nhập\"\r\n                        >\r\n                            Admin: admin / admin123\r\n                        </li>\r\n                        <li \r\n                            onClick={() => handleSampleLogin('user', 'user123')}\r\n                            title=\"Click để điền thông tin đăng nhập\"\r\n                        >\r\n                            User: user / user123\r\n                        </li>\r\n                    </ul>\r\n                </div> */}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;","C:\\Documents\\warehouse-dashboard\\src\\pages\\Dashboard.js",["66"],"// File: Dashboard.js\n// Mô tả: Component chính hiển thị dashboard quản lý kho hàng\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../context/AuthContext';\nimport { subscribeToShelfUpdates } from '../utils/mqtt';\nimport { shelf as shelfAPI } from '../utils/api';\nimport './Dashboard.css';\nimport ShelfGrid from '../components/ShelfGrid/ShelfGrid';\nimport FilterPanel from '../components/FilterPanel/FilterPanel';\nimport ShelfDetail from '../components/ShelfDetail/ShelfDetail';\n\n// Mapping trạng thái với mô tả và màu sắc\nconst STATUS_CONFIG = {\n    HIGH: { label: 'Kệ đầy', color: '#22c55e' },\n    MEDIUM: { label: 'Kệ còn trống một phần', color: '#f59e0b' },\n    EMPTY: { label: 'Kệ trống hoàn toàn', color: '#ef4444' },\n};\n\nconst Dashboard = () => {\n    const { user, logout } = useAuth();\n    const navigate = useNavigate();\n    const [shelves, setShelves] = useState([]); // Danh sách kệ thô, chưa lọc\n    const [filteredShelves, setFilteredShelves] = useState([]); // Danh sách kệ đã lọc\n    const [selectedShelf, setSelectedShelf] = useState(null);\n    const [filters, setFilters] = useState({ tier: 'all', status: 'all' });\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [stats, setStats] = useState({ high: 0, medium: 0, empty: 0 }); // Thống kê trạng thái kệ\n    const isMounted = useRef(true);\n    const currentFilters = useRef(filters); // Lưu trữ bộ lọc hiện tại để sử dụng trong callback\n\n    // Luôn cập nhật currentFilters khi filters thay đổi\n    useEffect(() => {\n        currentFilters.current = filters;\n    }, [filters]);\n\n    // Hàm lọc dữ liệu dựa trên bộ lọc hiện tại\n    const filterShelves = useCallback((data, filterSettings) => {\n        let filtered = [...data];\n        \n        // Lọc theo tầng (tier)\n        if (filterSettings.tier !== 'all') {\n            filtered = filtered.filter(\n                shelf => String(shelf.tier) === String(filterSettings.tier)\n            );\n        }\n\n        // Lọc theo trạng thái (status)\n        if (filterSettings.status !== 'all') {\n            filtered = filtered.filter(\n                shelf => shelf.status === filterSettings.status\n            );\n        }\n        \n        return filtered;\n    }, []);\n\n    // Cập nhật thống kê từ dữ liệu shelves\n    const updateStats = useCallback((data) => {\n        const newStats = { high: 0, medium: 0, empty: 0 };\n        \n        data.forEach(shelf => {\n            const status = shelf.status?.toLowerCase() || 'empty';\n            if (newStats[status] !== undefined) {\n                newStats[status]++;\n            }\n        });\n        \n        return newStats;\n    }, []);\n\n    // useEffect chính cho việc khởi tạo, tải dữ liệu, và MQTT subscription\n    useEffect(() => {\n        isMounted.current = true;\n\n        // Tải dữ liệu kệ ban đầu\n        const fetchInitialShelves = async () => {\n            try {\n                const data = await shelfAPI.fetchAll();\n                if (isMounted.current) {\n                    setShelves(data);\n                    // Áp dụng bộ lọc cho dữ liệu ban đầu\n                    setFilteredShelves(filterShelves(data, filters));\n                    // Cập nhật thống kê\n                    setStats(updateStats(data));\n                    setLoading(false);\n                }\n            } catch (err) {\n                if (isMounted.current) {\n                    setError(err.message);\n                    setLoading(false);\n                }\n            }\n        };\n\n        fetchInitialShelves();\n\n        // Đăng ký nhận cập nhật MQTT cho kệ hàng\n        const unsubscribeFromMQTT = subscribeToShelfUpdates((update) => {\n            if (isMounted.current) {\n                // Cập nhật shelves\n                setShelves(prevShelves => {\n                    const newShelves = prevShelves.map(s =>\n                        s.tier === update.tier && s.tray === update.tray && s.shelf === update.shelf\n                            ? { ...s, ...update }\n                            : s\n                    );\n                    \n                    // Áp dụng bộ lọc hiện tại cho dữ liệu mới cập nhật\n                    const currentFilteredShelves = filterShelves(newShelves, currentFilters.current);\n                    setFilteredShelves(currentFilteredShelves);\n                    \n                    // Cập nhật thống kê\n                    setStats(updateStats(newShelves));\n                    \n                    return newShelves;\n                });\n            }\n        });\n\n        return () => {\n            isMounted.current = false;\n            if (unsubscribeFromMQTT) {\n                unsubscribeFromMQTT();\n            }\n        };\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n    // useEffect riêng cho việc áp dụng bộ lọc khi filters thay đổi\n    useEffect(() => {\n        if (loading) return; // Nếu đang tải dữ liệu ban đầu, chưa cần lọc\n        \n        const filteredData = filterShelves(shelves, filters);\n        setFilteredShelves(filteredData);\n    }, [filters, loading]); // Loại bỏ shelves từ dependency để tránh gọi lại khi cập nhật từ MQTT\n    \n    // Xử lý thay đổi bộ lọc từ FilterPanel\n    const handleFilterChange = (filterType, value, newFiltersFromPanel) => {\n        setFilters(newFiltersFromPanel);\n    };\n\n    // Xử lý đăng xuất\n    const handleLogout = () => {\n        logout();\n        navigate('/login');\n    };\n\n    // Xử lý chọn kệ\n    const handleSelectShelf = (shelf) => {\n        setSelectedShelf(shelf);\n    };\n\n    // Loading state\n    if (loading) {\n        return <div className=\"dashboard__loading\">Đang tải dữ liệu...</div>;\n    }\n\n    // Error state\n    if (error) {\n        return <div className=\"dashboard__error\">Lỗi: {error}</div>;\n    }\n\n    return (\n        <div className=\"dashboard\">\n            <header className=\"dashboard__header\">\n                <h1 className=\"dashboard__title\">Quản lý kệ hàng</h1>\n                <div className=\"dashboard__user-info\">\n                    <span className=\"dashboard__username\">{user?.username || 'Admin'}</span>\n                    <button onClick={handleLogout} className=\"dashboard__logout-btn\">\n                        Đăng xuất\n                    </button>\n                </div>\n            </header>\n\n            <div className=\"dashboard__filters\">\n                <FilterPanel \n                    tiers={[...new Set(shelves.map(s => s.tier))].sort((a, b) => Number(a) - Number(b))}\n                    statuses={Object.keys(STATUS_CONFIG)}\n                    filters={filters}\n                    onFilterChange={handleFilterChange}\n                    shelfStats={stats}\n                />\n            </div>\n            \n            <div className=\"dashboard__content\">\n                <ShelfGrid \n                    shelves={filteredShelves}\n                    onShelfClick={handleSelectShelf}\n                />\n            </div>\n            \n            {selectedShelf && (\n                <ShelfDetail \n                    shelf={selectedShelf}\n                    onClose={() => setSelectedShelf(null)}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default Dashboard;","C:\\Documents\\warehouse-dashboard\\src\\components\\ProtectedRoute\\ProtectedRoute.js",[],["67","68"],"C:\\Documents\\warehouse-dashboard\\src\\components\\ShelfDetail\\ShelfDetail.js",[],"C:\\Documents\\warehouse-dashboard\\src\\components\\ShelfGrid\\ShelfGrid.js",[],"C:\\Documents\\warehouse-dashboard\\src\\utils\\api.js",[],"C:\\Documents\\warehouse-dashboard\\src\\components\\FilterPanel\\FilterPanel.js",[],"C:\\Documents\\warehouse-dashboard\\src\\components\\ShelfGrid\\ShelfItem.js",[],"C:\\Documents\\warehouse-dashboard\\src\\components\\StatusBar\\StatusBar.js",[],"C:\\Documents\\warehouse-dashboard\\src\\utils\\mqtt.js",[],"C:\\Documents\\warehouse-dashboard\\src\\utils\\auth.js",[],{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":19,"column":8,"nodeType":"75","endLine":19,"endColumn":28,"suggestions":"76"},{"ruleId":"77","severity":1,"message":"78","line":50,"column":11,"nodeType":"79","messageId":"80","endLine":50,"endColumn":28},{"ruleId":"73","severity":1,"message":"81","line":136,"column":8,"nodeType":"75","endLine":136,"endColumn":26,"suggestions":"82"},{"ruleId":"69","replacedBy":"83"},{"ruleId":"71","replacedBy":"84"},"no-native-reassign",["85"],"no-negated-in-lhs",["86"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'error'. Either include it or remove the dependency array.","ArrayExpression",["87"],"no-unused-vars","'handleSampleLogin' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'filterShelves' and 'shelves'. Either include them or remove the dependency array.",["88"],["85"],["86"],"no-global-assign","no-unsafe-negation",{"desc":"89","fix":"90"},{"desc":"91","fix":"92"},"Update the dependencies array to be: [username, password, error]",{"range":"93","text":"94"},"Update the dependencies array to be: [filterShelves, filters, loading, shelves]",{"range":"95","text":"96"},[682,702],"[username, password, error]",[5135,5153],"[filterShelves, filters, loading, shelves]"]