{"version":3,"sources":["context/AuthContext.js","components/ProtectedRoute/ProtectedRoute.js","pages/Login.js","components/ShelfGrid/ShelfItem.js","components/ShelfDetail/ShelfDetail.js","components/StatusBar/StatusBar.js","components/FilterPanel/FilterPanel.js","components/ShelfGrid/ShelfGrid.js","utils/api.js","pages/Dashboard.js","App.js","index.js"],"names":["AuthContext","createContext","AuthProvider","_ref","children","user","setUser","useState","loading","setLoading","useEffect","savedUser","localStorage","getItem","JSON","parse","_jsx","Provider","value","login","async","userData","setItem","stringify","logout","removeItem","useAuth","context","useContext","Error","ProtectedRoute","component","Component","rest","_objectWithoutProperties","_excluded","_jsxs","className","Route","_objectSpread","render","props","Redirect","to","pathname","state","from","location","Login","username","setUsername","password","setPassword","error","setError","isLoading","setIsLoading","history","useHistory","useLocation","onSubmit","e","preventDefault","role","replace","err","message","htmlFor","type","id","onChange","target","disabled","required","placeholder","ShelfItem","tier","tray","status","onClick","isFiltered","safeStatus","toLowerCase","statusLabels","high","medium","empty","filterClass","undefined","concat","stopPropagation","onKeyPress","key","title","tabIndex","style","cursor","ShelfDetail","shelf","onClose","percentageFilled","useMemo","itemCount","capacity","displayTier","parseInt","toFixed","formatStatus","lastUpdated","dateString","date","Date","isNaN","getTime","Intl","DateTimeFormat","year","month","day","hour","minute","second","hour12","format","console","formatDateTime","StatusBar","stats","safeStats","totalTrays","d","_unused","formatDate","FilterPanel","_statusDescriptions$f","_statusDescriptions$f2","_statusDescriptions$f3","onFilterChange","tiers","statuses","filters","shelfStats","statusDescriptions","HIGH","label","color","MEDIUM","EMPTY","sortedTiers","Set","sort","a","b","Number","handleFilterChange","filterType","newFilters","totalItems","Object","values","reduce","acc","curr","resetFilters","map","toString","borderLeft","_statusDescriptions$s","count","percentage","Math","round","paddingLeft","ShelfGrid","shelves","onShelfClick","selectedShelf","setSelectedShelf","setStats","setLastUpdated","toISOString","shelvesData","setShelvesData","setFilters","calculateStatus","initialData","Array","length","_","shelfIndex","NUM_TIERS_PER_SHELF","groupIndex","trays","trayIndex","floor","random","interval","setInterval","prevData","newData","randomShelf","randomTierGroup","randomTierInGroup","randomTray","newItemCount","clearInterval","newStats","forEach","group","isItemMatchingFilters","tierNumber","tierMatch","statusMatch","hasMatchingItems","some","hasTierMatchingItems","isMatching","handleTrayClick","tierInfo","handleCloseDetail","users","email","shelfNum","push","generateShelves","shelfAPI","fetchAll","getStats","subscribeToUpdates","intervalId","idx","onUpdate","updateShelf","data","findIndex","s","Dashboard","onLogout","setShelves","filteredShelves","setFilteredShelves","applyFilters","shelfList","currentFilters","isArray","filter","String","isMounted","filtered","loadData","unsub","update","prevShelves","newShelves","subscribe","nextFilters","App","Router","Switch","exact","path","ReactDOM","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3146d313.chunk.js","sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst AuthContext = createContext(null);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [user, setUser] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        const savedUser = localStorage.getItem('user');\r\n        if (savedUser) {\r\n            setUser(JSON.parse(savedUser));\r\n        }\r\n        setLoading(false);\r\n    }, []);\r\n\r\n    const login = async (userData) => {\r\n        setUser(userData);\r\n        localStorage.setItem('user', JSON.stringify(userData));\r\n    };\r\n\r\n    const logout = () => {\r\n        setUser(null);\r\n        localStorage.removeItem('user');\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ user, login, logout, loading }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useAuth = () => {\r\n    const context = useContext(AuthContext);\r\n    if (!context) {\r\n        throw new Error('useAuth must be used within an AuthProvider');\r\n    }\r\n    return context;\r\n};","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { useAuth } from '../../context/AuthContext';\nimport './ProtectedRoute.css';\n\nconst ProtectedRoute = ({ component: Component, ...rest }) => {\n    const { user, loading } = useAuth();\n\n    if (loading) {\n        return (\n            <div className=\"loading-container\">\n                <div className=\"loading-spinner\"></div>\n                <p>Đang tải...</p>\n            </div>\n        );\n    }\n\n    return (\n        <Route\n            {...rest}\n            render={props => \n                user ? (\n                    <Component {...props} />\n                ) : (\n                    <Redirect\n                        to={{\n                            pathname: \"/login\",\n                            state: { from: props.location }\n                        }}\n                    />\n                )\n            }\n        />\n    );\n};\n\nexport default ProtectedRoute;","import React, { useState } from 'react';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { useAuth } from '../context/AuthContext';\r\nimport './Login.css';\r\n\r\nconst Login = () => {\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [error, setError] = useState('');\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const { login } = useAuth();\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setError('');\r\n        setIsLoading(true);\r\n\r\n        try {\r\n            if (!username || !password) {\r\n                throw new Error('Vui lòng nhập đầy đủ thông tin');\r\n            }\r\n\r\n            if (username === 'admin' && password === 'admin123') {\r\n                await login({ username, role: 'admin' });\r\n                const { from } = location.state || { from: { pathname: \"/dashboard\" } };\r\n                history.replace(from);\r\n            } else {\r\n                throw new Error('Thông tin đăng nhập không chính xác');\r\n            }\r\n        } catch (err) {\r\n            setError(err.message);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"login-container\">\r\n            <h2>Đăng Nhập Hệ Thống</h2>\r\n            <form onSubmit={handleSubmit}>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"username\">Tên đăng nhập:</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"username\"\r\n                        value={username}\r\n                        onChange={(e) => setUsername(e.target.value)}\r\n                        disabled={isLoading}\r\n                        required\r\n                        placeholder=\"Nhập tên đăng nhập\"\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"password\">Mật khẩu:</label>\r\n                    <input\r\n                        type=\"password\"\r\n                        id=\"password\"\r\n                        value={password}\r\n                        onChange={(e) => setPassword(e.target.value)}\r\n                        disabled={isLoading}\r\n                        required\r\n                        placeholder=\"Nhập mật khẩu\"\r\n                    />\r\n                </div>\r\n                {error && <div className=\"error-message\">{error}</div>}\r\n                <button type=\"submit\" disabled={isLoading}>\r\n                    {isLoading ? 'Đang xử lý...' : 'Đăng Nhập'}\r\n                </button>\r\n            </form>\r\n            <div className=\"login-note\">\r\n                <p>Tài khoản mặc định: admin / admin123</p>\r\n                <p>Lưu ý: Chỉ dành cho mục đích kiểm thử</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;","// File: ShelfItem.js\n// Mô tả: Component React hiển thị một kệ hàng đơn lẻ trong lưới kệ của dashboard quản lý kho.\n// Chức năng: Hiển thị trạng thái, vị trí kệ, màu sắc và cho phép chọn để xem chi tiết.\nimport React from 'react';\nimport './ShelfGrid.css';\n\nconst ShelfItem = ({ tier, tray, status, onClick, isFiltered }) => {\n  // Đảm bảo status luôn là chuỗi hợp lệ và chữ thường\n  const safeStatus = (status || 'empty').toLowerCase();\n\n  // Tooltip chi tiết hơn\n  const statusLabels = {\n    high: 'Kệ chứa nhiều',\n    medium: 'Kệ chứa vừa phải',\n    empty: 'Kệ trống'\n  };\n\n  // Thêm class dựa trên trạng thái lọc\n  const filterClass = isFiltered !== undefined \n    ? (isFiltered ? 'filtered-in' : 'filtered-out')\n    : '';\n\n  // Thêm hàm xử lý sự kiện riêng để đảm bảo click hoạt động\n  const handleClick = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (onClick) onClick();\n  };\n\n  // Thêm hàm xử lý phím để đảm bảo accessibility\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter' || e.key === ' ') {\n      e.preventDefault();\n      if (onClick) onClick();\n    }\n  };\n\n  return (\n    <div\n      className={`shelf-item ${safeStatus} ${filterClass}`}\n      onClick={handleClick}\n      onKeyPress={handleKeyPress}\n      title={`Tầng ${tier} - Khay ${tray} | ${statusLabels[safeStatus]}`}\n      tabIndex={0}\n      role=\"button\"\n      aria-label={`Kệ tầng ${tier} khay ${tray} trạng thái ${statusLabels[safeStatus]}`}\n      style={{ cursor: onClick ? 'pointer' : 'default' }}\n    >\n      <span className=\"shelf-label\">{tier}-{tray}</span>\n    </div>\n  );\n};\n\nexport default ShelfItem;","/**\n * File: ShelfDetail.js\n * Mô tả: Component hiển thị chi tiết thông tin một kệ hàng trong dashboard quản lý kho.\n * Chức năng: \n * - Hiển thị thông tin chi tiết của kệ hàng được chọn (tầng, khay, trạng thái)\n * - Hiển thị số lượng hiện tại, sức chứa và phần trăm đã sử dụng\n * - Hiển thị thời gian cập nhật thông tin gần nhất\n * - Cung cấp nút đóng để quay lại giao diện tổng quan\n * - Hỗ trợ accessibility với ARIA attributes\n */\nimport React, { useMemo } from 'react';\nimport './ShelfDetail.css';\n\nconst ShelfDetail = ({ shelf, onClose }) => {\n    // Đảm bảo useMemo luôn được gọi\n    const percentageFilled = useMemo(() => {\n        if (!shelf) return 0; // Trả về 0 nếu shelf không tồn tại\n        const itemCount = shelf.itemCount || 0;\n        const capacity = shelf.capacity || 1; // Tránh chia cho 0\n        return (itemCount / capacity) * 100;\n    }, [shelf]);\n\n    // Di chuyển điều kiện kiểm tra xuống dưới\n    if (!shelf) return null;\n\n    // Chuyển đổi trạng thái sang định dạng hiển thị dễ đọc\n    const formatStatus = (status) => {\n        if (!status) return '';\n        const statusMap = {\n            'HIGH': 'Đầy',\n            'MEDIUM': 'Còn trống một phần',\n            'EMPTY': 'Trống'\n        };\n        return statusMap[status] || status;\n    };\n\n    // Định dạng thời gian\n    const formatDateTime = (dateString) => {\n        if (!dateString) return '';\n        try {\n            const date = new Date(dateString);\n            if (isNaN(date.getTime())) return '';\n            \n            return new Intl.DateTimeFormat('vi-VN', {\n                year: 'numeric',\n                month: 'numeric',\n                day: 'numeric',\n                hour: 'numeric',\n                minute: 'numeric',\n                second: 'numeric',\n                hour12: false\n            }).format(date);\n        } catch (error) {\n            console.error('Lỗi khi định dạng ngày:', error);\n            return '';\n        }\n    };\n\n    // Đảm bảo tier là số nguyên\n    const displayTier = typeof shelf.tier === 'string' ? parseInt(shelf.tier, 10) : shelf.tier;\n\n    return (\n        <div className=\"shelf-detail\" role=\"dialog\" aria-labelledby=\"shelf-detail-title\">\n            <div className=\"shelf-detail-header\">\n                <h3 id=\"shelf-detail-title\">Chi tiết kệ hàng</h3>\n                <button \n                    onClick={onClose} \n                    className=\"close-button\"\n                    aria-label=\"Đóng chi tiết\"\n                >&times;</button>\n            </div>\n            <div className=\"shelf-detail-content\">\n                <div className=\"detail-row\">\n                    <span className=\"label\">Tầng:</span>\n                    <span className=\"value\">{displayTier}</span>\n                </div>\n                <div className=\"detail-row\">\n                    <span className=\"label\">Khay:</span>\n                    <span className=\"value\">{shelf.tray}</span>\n                </div>\n                <div className=\"detail-row\">\n                    <span className=\"label\">Số lượng:</span>\n                    <span className=\"value\">\n                        {shelf.itemCount || 0} / {shelf.capacity || 0} ({percentageFilled.toFixed(1)}%)\n                    </span>\n                </div>\n                <div className=\"detail-row\">\n                    <span className=\"label\">Trạng thái:</span>\n                    <span className={`value status-${(shelf.status || '').toLowerCase()}`}>\n                        {formatStatus(shelf.status)}\n                    </span>\n                </div>\n                {shelf.lastUpdated && (\n                    <div className=\"detail-row\">\n                        <span className=\"label\">Cập nhật lần cuối:</span>\n                        <span className=\"value\">{formatDateTime(shelf.lastUpdated)}</span>\n                    </div>\n                )}\n                {shelf.capacity !== undefined && (\n                    <div className=\"detail-row\">\n                        <span className=\"label\">Sức chứa:</span>\n                        <span className=\"value\">{shelf.capacity}</span>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default ShelfDetail;\n","// File: StatusBar.js\n// Mô tả: Component React hiển thị thanh trạng thái tổng quan các kệ hàng trong dashboard quản lý kho.\n// Chức năng: Hiển thị số lượng kệ theo từng trạng thái (đầy, còn trống, trống hoàn toàn) và thời gian cập nhật gần nhất.\nimport React from 'react';\nimport './StatusBar.css';\n\nconst StatusBar = ({ stats = {}, lastUpdated }) => {\n  // Đảm bảo stats luôn có đủ các trường\n  const safeStats = {\n    high: typeof stats.high === 'number' ? stats.high : 0,\n    medium: typeof stats.medium === 'number' ? stats.medium : 0,\n    empty: typeof stats.empty === 'number' ? stats.empty : 0,\n  };\n\n  // Định dạng ngày giờ cập nhật\n  const formatDate = (date) => {\n    if (!date) return '---';\n    try {\n      const d = typeof date === 'string' ? new Date(date) : date;\n      if (isNaN(d)) return '---';\n      \n      return new Intl.DateTimeFormat('vi-VN', {\n        year: 'numeric',\n        month: 'numeric',\n        day: 'numeric',\n        hour: 'numeric',\n        minute: 'numeric',\n        second: 'numeric',\n        hour12: false\n      }).format(d);\n    } catch {\n      return '---';\n    }\n  };\n\n  // Tính tổng số ô\n  const totalTrays = safeStats.high + safeStats.medium + safeStats.empty;\n\n  return (\n    <div className=\"status-bar\" role=\"status\" aria-label=\"Thống kê trạng thái kệ hàng\">\n      <div className=\"status-bar-items\">\n        <div className=\"stat-item\" title=\"Số ô đang chứa nhiều\">\n          <div className=\"stat-content\">\n            <span className=\"dot high-dot\" aria-label=\"Ô chứa nhiều\"></span>\n            <span className=\"stat-label\">HIGH:</span>\n            <span className=\"stat-value\">{safeStats.high}</span>\n          </div>\n          <div className=\"stat-percentage\">\n            {totalTrays ? ((safeStats.high / totalTrays) * 100).toFixed(1) : 0}%\n          </div>\n        </div>\n\n        <div className=\"stat-item\" title=\"Số ô đang chứa vừa phải\">\n          <div className=\"stat-content\">\n            <span className=\"dot medium-dot\" aria-label=\"Ô chứa vừa phải\"></span>\n            <span className=\"stat-label\">MEDIUM:</span>\n            <span className=\"stat-value\">{safeStats.medium}</span>\n          </div>\n          <div className=\"stat-percentage\">\n            {totalTrays ? ((safeStats.medium / totalTrays) * 100).toFixed(1) : 0}%\n          </div>\n        </div>\n\n        <div className=\"stat-item\" title=\"Số ô đang trống\">\n          <div className=\"stat-content\">\n            <span className=\"dot empty-dot\" aria-label=\"Ô trống\"></span>\n            <span className=\"stat-label\">EMPTY:</span>\n            <span className=\"stat-value\">{safeStats.empty}</span>\n          </div>\n          <div className=\"stat-percentage\">\n            {totalTrays ? ((safeStats.empty / totalTrays) * 100).toFixed(1) : 0}%\n          </div>\n        </div>\n      </div>\n\n      <div className=\"last-updated\" title=\"Thời gian cập nhật thống kê\">\n        Cập nhật: {formatDate(lastUpdated)}\n      </div>\n    </div>\n  );\n};\n\nexport default StatusBar;","// File: FilterPanel.js\n// Mô tả: Component React hiển thị và xử lý bộ lọc (filter) cho dashboard quản lý kho hàng.\n// Chức năng: Cho phép người dùng lọc dữ liệu kệ hàng theo tầng và trạng thái, đồng bộ với dashboard.\nimport React, { useMemo } from 'react';\nimport './FilterPanel.css';\n\nconst FilterPanel = ({\n  onFilterChange,\n  tiers = [],\n  statuses = ['HIGH', 'MEDIUM', 'EMPTY'],\n  filters,\n  shelfStats\n}) => {\n  // Mapping trạng thái với mô tả và màu sắc\n  const statusDescriptions = {\n    HIGH: { label: 'Kệ đầy', color: '#22c55e' },\n    MEDIUM: { label: 'Kệ còn trống một phần', color: '#f59e0b' },\n    EMPTY: { label: 'Kệ trống hoàn toàn', color: '#ef4444' },\n  };\n\n  // Sắp xếp danh sách tầng\n  const sortedTiers = useMemo(() => {\n    return [...new Set(tiers)].sort((a, b) => Number(a) - Number(b));\n  }, [tiers]);\n\n  // Xử lý thay đổi bộ lọc\n  const handleFilterChange = (filterType, value) => {\n    const newFilters = {\n      ...filters,\n      [filterType]: value,\n    };\n    onFilterChange(filterType, value, newFilters);\n  };\n\n  // Reset tất cả bộ lọc\n  const resetFilters = () => {\n    const resetState = {\n      tier: 'all',\n      status: 'all',\n    };\n    onFilterChange('reset', null, resetState);\n  };\n\n  // Tính tổng số lượng cho mỗi trạng thái\n  const totalItems = useMemo(() => {\n    return Object.values(shelfStats || {}).reduce((acc, curr) => acc + (curr || 0), 0);\n  }, [shelfStats]);\n\n  return (\n    <div className=\"filter-panel\">\n      <div className=\"filter-header\">\n        <h3>Bộ lọc</h3>\n        <button\n          className=\"reset-button\"\n          onClick={resetFilters}\n          disabled={filters.tier === 'all' && filters.status === 'all'}\n          title=\"Đặt lại tất cả bộ lọc\"\n        >\n          Đặt lại\n        </button>\n      </div>\n\n      <div className=\"filter-group\">\n        <label htmlFor=\"tier-select\">Chọn tầng:</label>\n        <select\n          id=\"tier-select\"\n          value={filters.tier}\n          onChange={(e) => handleFilterChange('tier', e.target.value)}\n        >\n          <option value=\"all\">Tất cả các tầng</option>\n          {sortedTiers.map((tier) => (\n            <option key={tier} value={tier.toString()}>\n              Tầng {tier}\n            </option>\n          ))}\n        </select>\n      </div>\n\n      <div className=\"filter-group\">\n        <label htmlFor=\"status-select\">Trạng thái kệ:</label>\n        <select\n          id=\"status-select\"\n          value={filters.status}\n          onChange={(e) => handleFilterChange('status', e.target.value)}\n          style={{\n            borderLeft: filters.status !== 'all' ? `4px solid ${statusDescriptions[filters.status]?.color || 'transparent'}` : 'none'\n          }}\n        >\n          <option value=\"all\">Tất cả trạng thái</option>\n          {statuses.map((status) => {\n            const count = shelfStats?.[status.toLowerCase()] || 0;\n            const percentage = totalItems > 0 ? Math.round((count / totalItems) * 100) : 0;\n            \n            return (\n              <option \n                key={status} \n                value={status}\n                className={`status-option status-${status.toLowerCase()}`}\n              >\n                {statusDescriptions[status]?.label || status}\n                {` (${count} - ${percentage}%)`}\n              </option>\n            );\n          })}\n        </select>\n      </div>\n\n      {/* Hiển thị các bộ lọc đang áp dụng */}\n      <div className=\"active-filters\">\n        {(filters.tier !== 'all' || filters.status !== 'all') && (\n          <div className=\"filter-tags\">\n            <span>Đang lọc theo: </span>\n            {filters.tier !== 'all' && (\n              <span className=\"filter-tag\">\n                Tầng {filters.tier}\n                <button \n                  onClick={() => handleFilterChange('tier', 'all')} \n                  aria-label=\"Xóa bộ lọc tầng\"\n                  title=\"Xóa bộ lọc tầng\"\n                >×</button>\n              </span>\n            )}\n            {filters.status !== 'all' && (\n              <span \n                className=\"filter-tag\"\n                style={{ \n                  borderLeft: `4px solid ${statusDescriptions[filters.status]?.color || 'transparent'}`,\n                  paddingLeft: '8px'\n                }}\n              >\n                {statusDescriptions[filters.status]?.label || filters.status}\n                <button \n                  onClick={() => handleFilterChange('status', 'all')} \n                  aria-label=\"Xóa bộ lọc trạng thái\"\n                  title=\"Xóa bộ lọc trạng thái\"\n                >×</button>\n              </span>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default FilterPanel;\n","// File: ShelfGrid.js\n// Mô tả: Component React hiển thị lưới các kệ hàng trong dashboard quản lý kho.\n// Chức năng: Hiển thị danh sách kệ hàng theo tầng và khay, cho phép chọn từng kệ để xem chi tiết.\nimport React, { useState, useEffect } from 'react';\nimport './ShelfGrid.css';\nimport ShelfItem from './ShelfItem';\nimport ShelfDetail from '../ShelfDetail/ShelfDetail';\nimport StatusBar from '../StatusBar/StatusBar';\nimport FilterPanel from '../FilterPanel/FilterPanel';\n\nconst ShelfGrid = ({ shelves, onShelfClick }) => {\n  const NUM_SHELVES = 4; // Số lượng kệ đồ\n  const NUM_TIERS_PER_SHELF = 4; // Số tầng mỗi kệ\n  const NUM_TRAYS_PER_TIER = 6; // Số ô mỗi tầng\n\n  const [selectedShelf, setSelectedShelf] = useState(null);\n  const [stats, setStats] = useState({ high: 0, medium: 0, empty: 0 });\n  const [lastUpdated, setLastUpdated] = useState(new Date().toISOString());\n  const [shelvesData, setShelvesData] = useState([]);\n  const [filters, setFilters] = useState({\n    tier: 'all',\n    status: 'all'\n  });\n\n  // Hàm tính toán trạng thái dựa trên số lượng vật phẩm và sức chứa\n  const calculateStatus = (itemCount, capacity) => {\n    const percentage = (itemCount / capacity) * 100;\n    if (percentage >= 80) return 'HIGH';\n    if (percentage >= 15) return 'MEDIUM';\n    if (percentage >=0) return 'EMPTY';\n  };\n\n  // Khởi tạo dữ liệu ban đầu và thiết lập interval cập nhật\n  useEffect(() => {\n    // Tạo dữ liệu mẫu ban đầu\n    const initialData = Array.from({ length: NUM_SHELVES }, (_, shelfIndex) => {\n      const tiers = Array.from({ length: NUM_TIERS_PER_SHELF / 2 }, (_, groupIndex) => {\n        const groupedTiers = [\n          { \n            tier: groupIndex * 2 + 1, \n            trays: Array.from({ length: NUM_TRAYS_PER_TIER }, (_, trayIndex) => {\n              const capacity = 100;\n              const itemCount = Math.floor(Math.random() * (capacity + 1));\n              return {\n                tray: trayIndex + 1,\n                status: calculateStatus(itemCount, capacity),\n                capacity,\n                itemCount,\n                lastUpdated: new Date().toISOString()\n              };\n            })\n          },\n          { \n            tier: groupIndex * 2 + 2, \n            trays: Array.from({ length: NUM_TRAYS_PER_TIER }, (_, trayIndex) => {\n              const capacity = 100;\n              const itemCount = Math.floor(Math.random() * (capacity + 1));\n              return {\n                tray: trayIndex + 1,\n                status: calculateStatus(itemCount, capacity),\n                capacity,\n                itemCount,\n                lastUpdated: new Date().toISOString()\n              };\n            })\n          }\n        ];\n        return groupedTiers;\n      });\n      return { shelf: shelfIndex + 1, tiers };\n    });\n\n    setShelvesData(initialData);\n\n    // Thiết lập interval để cập nhật ngẫu nhiên\n    const interval = setInterval(() => {\n      setShelvesData(prevData => {\n        const newData = JSON.parse(JSON.stringify(prevData));\n        \n        // Chọn ngẫu nhiên một ô để cập nhật\n        const randomShelf = Math.floor(Math.random() * NUM_SHELVES);\n        const randomTierGroup = Math.floor(Math.random() * (NUM_TIERS_PER_SHELF / 2));\n        const randomTierInGroup = Math.floor(Math.random() * 2);\n        const randomTray = Math.floor(Math.random() * NUM_TRAYS_PER_TIER);\n        \n        // Cập nhật thông tin của ô được chọn\n        const tray = newData[randomShelf].tiers[randomTierGroup][randomTierInGroup].trays[randomTray];\n        const newItemCount = Math.floor(Math.random() * (tray.capacity + 1));\n        tray.itemCount = newItemCount;\n        tray.status = calculateStatus(newItemCount, tray.capacity);\n        tray.lastUpdated = new Date().toISOString();\n        \n        return newData;\n      });\n      setLastUpdated(new Date().toISOString());\n    }, 3000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  // Tính toán thống kê mỗi khi dữ liệu thay đổi\n  useEffect(() => {\n    const newStats = { high: 0, medium: 0, empty: 0 };\n    \n    shelvesData.forEach(shelf => {\n      shelf.tiers.forEach(group => {\n        group.forEach(tier => {\n          tier.trays.forEach(tray => {\n            newStats[tray.status.toLowerCase()]++;\n          });\n        });\n      });\n    });\n    \n    setStats(newStats);\n  }, [shelvesData]);\n\n  const handleTrayClick = (shelfIndex, tierInfo, trayIndex) => {\n    // Thêm check để tránh click vào khu vực không hợp lệ\n    if (!tierInfo || !tierInfo.trays || !tierInfo.trays[trayIndex]) {\n      return;\n    }\n  \n    const tray = tierInfo.trays[trayIndex];\n    \n    setSelectedShelf({\n      shelf: shelfIndex + 1,\n      tier: tierInfo.tier,\n      tray: tray.tray,\n      status: tray.status,\n      capacity: tray.capacity,\n      itemCount: tray.itemCount,\n      lastUpdated: tray.lastUpdated\n    });\n  };\n\n  // Hàm kiểm tra một ô có phù hợp với bộ lọc hay không\n  const isItemMatchingFilters = (tierNumber, status) => {\n    const tierMatch = filters.tier === 'all' || Number(filters.tier) === tierNumber;\n    const statusMatch = filters.status === 'all' || filters.status === status;\n    return tierMatch && statusMatch;\n  };\n\n  // Hàm kiểm tra một hàng (tier) có bất kỳ ô nào phù hợp với bộ lọc không\n  const hasTierMatchingItems = (tier) => {\n    return tier.trays.some(tray => isItemMatchingFilters(tier.tier, tray.status));\n  };\n\n  const handleCloseDetail = () => {\n    setSelectedShelf(null);\n  };\n\n  return (\n    <div className=\"shelf-grid-wrapper\">\n      <StatusBar stats={stats} lastUpdated={lastUpdated} />\n      <div className=\"shelf-grid-container\">\n        {shelvesData.map((shelf, shelfIndex) => (\n          <div key={`shelf-${shelf.shelf}`} className=\"shelf-grid\">\n            <h3>Kệ {shelf.shelf}</h3>\n            {shelf.tiers.map((group, groupIndex) => (\n              <div key={`tier-group-${groupIndex}`} className=\"tier-row-group\">\n                {group.map((tier) => {\n                  const hasMatchingItems = hasTierMatchingItems(tier);\n                  return (\n                    <div \n                      key={`tier-${tier.tier}`} \n                      className={`tier-row ${hasMatchingItems ? 'has-matching-items' : 'no-matching-items'}`}\n                    >\n                      <div className=\"tier-label\">Tầng {tier.tier}</div>\n                      <div className=\"tray-container\">\n                        {tier.trays.map((tray, trayIndex) => {\n                          const isMatching = isItemMatchingFilters(tier.tier, tray.status);\n                          return (\n                            <div \n                              key={`tray-${tier.tier}-${tray.tray}`} \n                              className={`tray-cell ${isMatching ? 'matching-filter' : 'not-matching-filter'}`}\n                            >\n                              <ShelfItem\n                                tier={tier.tier}\n                                tray={tray.tray}\n                                status={tray.status}\n                                onClick={() => handleTrayClick(shelfIndex, tier, trayIndex)}\n                                isFiltered={isMatching}\n                              />\n                            </div>\n                          );\n                        })}\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n      {selectedShelf && (\n        <ShelfDetail\n          shelf={selectedShelf}\n          onClose={handleCloseDetail}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default ShelfGrid;","\r\n// MOCK DATA & API ONLY - KHÔNG GỌI BACKEND NỮA\r\n\r\n// Giả lập danh sách người dùng\r\nconst users = [\r\n  { id: 1, username: 'admin', password: 'admin123', email: 'admin@example.com' },\r\n  { id: 2, username: 'user', password: 'user123', email: 'user@example.com' }\r\n];\r\n\r\nlet currentUser = users[0];\r\n\r\nconst auth = {\r\n  register: async (userData) => {\r\n    if (users.some(u => u.username === userData.username || u.email === userData.email)) {\r\n      throw new Error('Username hoặc email đã tồn tại');\r\n    }\r\n    const newUser = {\r\n      id: users.length + 1,\r\n      ...userData\r\n    };\r\n    users.push(newUser);\r\n    return { message: 'Đăng ký thành công', user: { ...newUser, password: undefined } };\r\n  },\r\n  login: async (username, password) => {\r\n    const user = users.find(u => u.username === username && u.password === password);\r\n    if (!user) {\r\n      throw new Error('Tên đăng nhập hoặc mật khẩu không đúng');\r\n    }\r\n    currentUser = user;\r\n    return {\r\n      token: 'mock-token',\r\n      user: { id: user.id, username: user.username, email: user.email }\r\n    };\r\n  },\r\n  getProfile: async () => {\r\n    if (!currentUser) throw new Error('Chưa đăng nhập');\r\n    return { id: currentUser.id, username: currentUser.username, email: currentUser.email };\r\n  }\r\n};\r\n\r\n// Giả lập dữ liệu kệ hàng\r\nfunction generateShelves() {\r\n  const shelves = [];\r\n  for (let shelfNum = 1; shelfNum <= 5; shelfNum++) { // 5 kệ hàng\r\n    for (let tier = 1; tier <= 3; tier++) {\r\n      for (let tray = 1; tray <= 5; tray++) {\r\n        const capacity = Math.floor(Math.random() * 101);\r\n        let status;\r\n        if (capacity >= 80) status = 'HIGH';\r\n        else if (capacity >= 30) status = 'MEDIUM';\r\n        else status = 'EMPTY';\r\n        shelves.push({\r\n          shelf: shelfNum,\r\n          tier,\r\n          tray,\r\n          status,\r\n          capacity,\r\n          lastUpdated: new Date().toISOString()\r\n        });\r\n      }\r\n    }\r\n  }\r\n  return shelves;\r\n}\r\n\r\nlet shelvesData = generateShelves();\r\n\r\nconst shelfAPI = {\r\n  fetchAll: async () => {\r\n    return shelvesData;\r\n  },\r\n  getStats: async () => {\r\n    const stats = { high: 0, medium: 0, empty: 0 };\r\n    shelvesData.forEach(shelf => {\r\n      stats[shelf.status.toLowerCase()]++;\r\n    });\r\n    return stats;\r\n  },\r\n  subscribeToUpdates: async (onUpdate) => {\r\n    // Giả lập cập nhật ngẫu nhiên mỗi 10s\r\n    const intervalId = setInterval(() => {\r\n      const idx = Math.floor(Math.random() * shelvesData.length);\r\n      const shelf = shelvesData[idx];\r\n      // Random capacity\r\n      shelf.capacity = Math.floor(Math.random() * 101);\r\n      if (shelf.capacity >= 80) shelf.status = 'HIGH';\r\n      else if (shelf.capacity >= 30) shelf.status = 'MEDIUM';\r\n      else shelf.status = 'EMPTY';\r\n      shelf.lastUpdated = new Date().toISOString();\r\n      onUpdate({ ...shelf });\r\n    }, 10000);\r\n    // Trả về hàm unsubscribe\r\n    return () => clearInterval(intervalId);\r\n  },\r\n  updateShelf: async (tier, tray, data) => {\r\n    // Tìm đúng kệ theo tier, tray và shelf (nếu có)\r\n    const idx = shelvesData.findIndex(s => s.tier === tier && s.tray === tray && (data.shelf ? s.shelf === data.shelf : true));\r\n    if (idx === -1) throw new Error('Không tìm thấy kệ');\r\n    shelvesData[idx] = {\r\n      ...shelvesData[idx],\r\n      ...data,\r\n      lastUpdated: new Date().toISOString()\r\n    };\r\n    return shelvesData[idx];\r\n  }\r\n};\r\n\r\nexport const authAPI = auth;\r\nexport const shelf = shelfAPI;\r\nexport const api = { auth, shelf: shelfAPI };","// File: Dashboard.js\n// Mô tả: Component React chính hiển thị dashboard quản lý kho hàng.\n// Chức năng: Quản lý trạng thái, lọc, thống kê, hiển thị lưới kệ, chi tiết kệ, và đồng bộ dữ liệu mock cho toàn bộ hệ thống.\nimport React, { useState, useEffect } from 'react';\nimport './Dashboard.css';\nimport ShelfGrid from '../components/ShelfGrid/ShelfGrid';\nimport FilterPanel from '../components/FilterPanel/FilterPanel';\nimport ShelfDetail from '../components/ShelfDetail/ShelfDetail';\nimport { shelf } from '../utils/api';\n\nconst Dashboard = ({ user, onLogout }) => {\n  const [shelves, setShelves] = useState([]);\n  const [filteredShelves, setFilteredShelves] = useState([]);\n  const [selectedShelf, setSelectedShelf] = useState(null);  const [filters, setFilters] = useState({ tier: 'all', status: 'all' });\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Loại bỏ hàm calculateStats vì không cần thiết nữa\n\n\n  // Áp dụng bộ lọc, an toàn với dữ liệu thiếu\n  const applyFilters = (shelfList, currentFilters) => {\n    return (Array.isArray(shelfList) ? shelfList : []).filter(shelf => {\n      const tierMatch = currentFilters.tier === 'all' || String(shelf.tier) === String(currentFilters.tier);\n      const statusMatch = currentFilters.status === 'all' || (shelf.status && shelf.status === currentFilters.status);\n      return tierMatch && statusMatch;\n    });\n  };\n\n  // Load dữ liệu ban đầu\n  useEffect(() => {\n    let isMounted = true;\n    const loadData = async () => {\n      try {\n        setLoading(true);\n        const data = await shelf.fetchAll();\n        if (!isMounted) return;        setShelves(data);\n        const filtered = applyFilters(data, filters);\n        setFilteredShelves(filtered);\n      } catch (err) {\n        if (isMounted) setError(err.message);\n      } finally {\n        if (isMounted) setLoading(false);\n      }\n    };\n    loadData();\n    return () => { isMounted = false; };\n  }, [filters]);\n\n\n  // Subscribe to shelf updates (mock)\n  useEffect(() => {\n    let unsub = null;\n    const subscribe = async () => {\n      unsub = await shelf.subscribeToUpdates((update) => {\n        setShelves(prevShelves => {\n          const newShelves = prevShelves.map(s =>\n            s.tier === update.tier && s.tray === update.tray\n              ? { ...s, ...update }\n              : s          );\n          const filtered = applyFilters(newShelves, filters);\n          setFilteredShelves(filtered);\n          return newShelves;\n        });\n      });\n    };\n    subscribe();\n    return () => { if (unsub) unsub(); };\n  }, [filters]);\n\n\n  // Xử lý thay đổi bộ lọc\n  const handleFilterChange = (type, value, newFilters) => {\n    // newFilters có thể được truyền từ FilterPanel, nếu không thì tự tạo\n    const nextFilters = newFilters || { ...filters, [type]: value };\n    setFilters(nextFilters);\n    const filtered = applyFilters(shelves, nextFilters);\n    setFilteredShelves(filtered);\n  };\n\n\n  if (loading) {\n    return <div className=\"loading\" role=\"status\">Đang tải dữ liệu...</div>;\n  }\n\n  if (error) {\n    return <div className=\"error\" role=\"alert\">Lỗi: {error}</div>;\n  }\n\n  return (\n    <div className=\"dashboard\">\n      <div className=\"dashboard-header\">\n        <h1 className=\"dashboard-title\">Warehouse Dashboard</h1>\n        <div className=\"user-info\">\n          <span className=\"user-name\">{user?.username || 'Admin'}</span>\n          <button className=\"logout-button\" onClick={onLogout}>\n            Đăng xuất\n          </button>\n        </div>\n      </div>      <FilterPanel \n        tiers={[...new Set(shelves.map(s => s.tier))].sort()}        statuses={['HIGH', 'MEDIUM', 'EMPTY']}\n        filters={filters}\n        onFilterChange={handleFilterChange}\n      />\n      \n      <ShelfGrid \n        shelves={filteredShelves}\n        onShelfClick={setSelectedShelf}\n      />\n      \n      {selectedShelf && (\n        <ShelfDetail \n          shelf={selectedShelf}\n          onClose={() => setSelectedShelf(null)}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Dashboard;","import React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\r\nimport { AuthProvider } from './context/AuthContext';\r\nimport ProtectedRoute from './components/ProtectedRoute/ProtectedRoute';\r\nimport Login from './pages/Login';\r\nimport Dashboard from './pages/Dashboard';\r\n\r\nfunction App() {\r\n    return (\r\n        <AuthProvider>\r\n            <Router>\r\n                <Switch>\r\n                    <Route exact path=\"/login\" component={Login} />\r\n                    <ProtectedRoute path=\"/dashboard\" component={Dashboard} />\r\n                    <Route exact path=\"/\">\r\n                        <Redirect to=\"/dashboard\" />\r\n                    </Route>\r\n                </Switch>\r\n            </Router>\r\n        </AuthProvider>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}